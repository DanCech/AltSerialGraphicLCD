
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000037c4  00003858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000037c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a2  00800102  00800102  0000385a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000385a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  00003870  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006c0b  00000000  00000000  00003a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000160b  00000000  00000000  0000a663  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001218  00000000  00000000  0000bc6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ef8  00000000  00000000  0000ce88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000011a5  00000000  00000000  0000dd80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007820  00000000  00000000  0000ef25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000370  00000000  00000000  00016745  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__ctors_end>
       4:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
       8:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
       c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      10:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      14:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      18:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_6>
      1c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      20:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      24:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      28:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      2c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      30:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      34:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      38:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      3c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      40:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      44:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      48:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__vector_18>
      4c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      50:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      54:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      58:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      5c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      60:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      64:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	80 40       	sbci	r24, 0x00	; 0
      6a:	20 10       	cpse	r2, r0
      6c:	08 04       	cpc	r0, r8
      6e:	02 01       	movw	r0, r4

00000070 <bit_shift_single_maskP>:
      70:	01 02 04 08 10 20 40 80                             ..... @.

00000078 <bit_shift_maskP>:
      78:	ff 7f 3f 1f 0f 07 03 01                             ..?.....

00000080 <cmdtable_funcsP>:
      80:	16 00 04 01 0b 0e 18 12 0a 10 05 07 03 08 06 17     ................
      90:	1c 1b 1d 02 19 11 11 09 1a 14 0c 15 13 13 00 04     ................
      a0:	0d 12 0a 05 03 08 06 17 11 0f 09                    ...........

000000ab <cmdtable_argsP>:
      ab:	00 81 04 80 04 05 01 81 06 01 05 01 05 03 13 a0     ................
      bb:	00 04 03 13 01 a1 a1 13 03 01 00 00 80 80 81 43     ...............C
      cb:	44 81 45 44 44 42 1b 81 82 03 1b                    D.EDDB.....

000000d6 <cmdtable_cmdsP>:
      d6:	00 02 03 04 05 06 07 08 09 0a 0c 0d 0f 10 11 12     ................
      e6:	13 14 15 16 17 18 19 1a 1b 1e 1f 20 40 41 42 43     ........... @ABC
      f6:	46 48 49 4c 4f 50 51 52 58 59 5a                    FHILOPQRXYZ

00000101 <cmd_functabP>:
     101:	a7 02 bf 12 1e 0a b0 09 02 07 c5 05 a2 06 c2 05     ................
     111:	e1 06 31 07 0d 07 15 0a ea 11 7d 09 50 09 a0 0c     ..1.......}.P...
     121:	d3 0a 8d 0c b0 0a 93 02 66 12 cf 11 da 11 a5 12     ........f.......
     131:	82 13 c6 13 3f 12 a6 14 99 15 36 15                 ....?.....6.

0000013d <ks0108b_functabP>:
     13d:	1c 11 6d 0e 89 0e d9 0e 52 0f 63 0f 70 11 a8 0e     ..m.....R.c.p...

0000014d <t6963_functabP>:
     14d:	9a 19 06 17 5f 16 ca 16 30 18 5d 18 08 1a 7c 16     ...._...0.]...|.

0000015d <consts>:
     15d:	01 26 22 0e 22 06                                   .&".".

00000163 <on.2379>:
     163:	6f 6e 00                                            on.

00000166 <off.2380>:
     166:	6f 66 66 00                                         off.

0000016a <tom_thumb_3x6>:
     16a:	03 06 01 20 7f 00 00 00 00 17 00 03 00 03 1f 0a     ... ............
     17a:	1f 0a 1f 05 09 04 12 0f 17 1c 00 03 00 00 0e 11     ................
     18a:	11 0e 00 0a 04 0a 04 0e 04 10 08 00 04 04 04 00     ................
     19a:	10 00 18 04 03 1e 11 0f 02 1f 00 19 15 12 11 15     ................
     1aa:	0a 07 04 1f 17 15 09 1e 15 1d 19 05 03 1f 15 1f     ................
     1ba:	17 15 0f 00 0a 00 10 0a 00 04 0a 11 0a 0a 0a 11     ................
     1ca:	0a 04 01 15 03 0e 15 16 1e 05 1e 1f 15 0a 0e 11     ................
     1da:	11 1f 11 0e 1f 15 15 1f 05 05 0e 15 1d 1f 04 1f     ................
     1ea:	11 1f 11 08 10 0f 1f 04 1b 1f 10 10 1f 06 1f 1f     ................
     1fa:	0e 1f 0e 11 0e 1f 05 02 0e 19 1e 1f 0d 16 12 15     ................
     20a:	09 01 1f 01 0f 10 1f 07 18 07 1f 0c 1f 1b 04 1b     ................
     21a:	03 1c 03 19 15 13 1f 11 11 02 04 08 11 11 1f 02     ................
     22a:	01 02 10 10 10 00 01 02 1a 16 1c 1f 12 0c 0c 12     ................
     23a:	12 0c 12 1f 0c 1a 16 04 1e 05 0c 2a 1e 1f 02 1c     ...........*....
     24a:	00 1d 00 10 20 1d 1f 0c 12 11 1f 10 1e 0e 1e 1e     .... ...........
     25a:	02 1c 0c 12 0c 3e 12 0c 0c 12 3e 1c 02 02 14 1e     .....>....>.....
     26a:	0a 02 1f 12 0e 10 1e 0e 18 0e 1e 1c 1e 12 0c 12     ................
     27a:	06 28 1e 1a 1e 16 04 1b 11 00 1b 00 11 1b 04 02     .(..............
     28a:	03 01                                               ..

0000028c <font_alt_5x8>:
     28c:	05 08 01 20 7f 00 00 00 00 00 00 00 5f 00 00 00     ... ........_...
     29c:	07 00 07 00 14 7f 14 7f 14 24 2a 7f 2a 12 23 13     .........$*.*.#.
     2ac:	08 64 62 36 49 55 22 50 00 00 03 00 00 00 1c 22     .db6IU"P......."
     2bc:	41 00 00 41 22 1c 00 14 08 3e 08 14 08 08 3e 08     A..A"....>....>.
     2cc:	08 00 00 a0 60 00 08 08 08 08 08 00 00 60 60 00     ....`........``.
     2dc:	20 10 08 04 02 3e 51 49 45 3e 00 42 7f 40 00 42      ....>QIE>.B.@.B
     2ec:	61 51 49 46 21 41 45 4b 31 18 14 12 7f 10 27 45     aQIF!AEK1.....'E
     2fc:	45 45 39 3c 4a 49 49 30 03 71 09 05 03 36 49 49     EE9<JII0.q...6II
     30c:	49 36 06 49 49 29 1e 00 00 6c 6c 00 00 00 ac 6c     I6.II)...ll....l
     31c:	00 08 14 22 41 00 28 28 28 28 28 00 41 22 14 08     ..."A.(((((.A"..
     32c:	02 01 51 09 06 32 49 79 41 3e 7e 11 11 11 7e 7f     ..Q..2IyA>~...~.
     33c:	49 49 49 36 3e 41 41 41 22 7f 41 41 41 3e 7f 49     III6>AAA".AAA>.I
     34c:	49 49 41 7f 09 09 09 01 3e 41 41 49 72 7f 08 08     IIA.....>AAIr...
     35c:	08 7f 00 41 7f 41 00 20 40 41 3f 01 7f 08 14 22     ...A.A. @A?...."
     36c:	41 7f 40 40 40 40 7f 02 0c 02 7f 7f 04 08 10 7f     A.@@@@..........
     37c:	3e 41 41 41 3e 7f 09 09 09 06 3e 41 51 21 5e 7f     >AAA>.....>AQ!^.
     38c:	09 19 29 46 26 49 49 49 32 01 01 7f 01 01 3f 40     ..)F&III2.....?@
     39c:	40 40 3f 1f 20 40 20 1f 3f 40 38 40 3f 63 14 08     @@?. @ .?@8@?c..
     3ac:	14 63 07 08 70 08 07 61 51 49 45 43 00 7f 41 41     .c..p..aQIEC..AA
     3bc:	00 02 04 08 10 20 00 41 41 7f 00 04 02 01 02 04     ..... .AA.......
     3cc:	80 80 80 80 80 00 01 02 04 00 20 54 54 54 78 7f     .......... TTTx.
     3dc:	48 44 44 38 38 44 44 44 20 38 44 44 48 7f 38 54     HDD88DDD 8DDH.8T
     3ec:	54 54 18 08 7e 09 01 02 18 a4 a4 a4 78 7f 10 08     TT..~.......x...
     3fc:	08 70 00 48 7a 40 00 00 20 40 48 3a 7f 10 28 44     .p.Hz@.. @H:..(D
     40c:	00 00 41 7f 40 00 7c 04 38 04 78 7c 08 04 04 78     ..A.@.|.8.x|...x
     41c:	38 44 44 44 38 7c 14 14 14 08 08 14 14 18 7c 7c     8DDD8|........||
     42c:	08 04 04 08 48 54 54 54 20 04 3e 44 40 20 3c 40     ....HTTT .>D@ <@
     43c:	40 20 7c 1c 20 40 20 1c 3c 40 30 40 3c 44 28 10     @ |. @ .<@0@<D(.
     44c:	28 44 0c 50 50 50 3c 44 64 54 4c 44 00 08 36 41     (D.PPP<DdTLD..6A
     45c:	00 20 40 ff 40 20 00 41 36 08 00 10 08 08 10 08     . @.@ .A6.......

0000046c <label_0.2499>:
     46c:	42 61 75 64 72 61 74 65 3a 00                       Baudrate:.

00000476 <label_1.2500>:
     476:	53 70 6c 61 73 68 20 20 3a 00                       Splash  :.

00000480 <label_2.2501>:
     480:	43 52 4c 46 20 20 20 20 3a 00                       CRLF    :.

0000048a <label_3.2502>:
     48a:	53 63 72 6f 6c 6c 20 20 3a 00                       Scroll  :.

00000494 <label_4.2503>:
     494:	42 27 4c 69 67 68 74 20 3a 00                       B'Light :.

0000049e <label_5.2504>:
     49e:	78 6f 6e 2f 78 6f 66 66 3a 00                       xon/xoff:.

000004a8 <label_6.2505>:
     4a8:	56 65 72 73 69 6f 6e 20 3a 00                       Version :.

000004b2 <slash.2507>:
     4b2:	2f 00                                               /.

000004b4 <zero2.2508>:
     4b4:	30 30 00                                            00.

000004b7 <baudrates.2498>:
     4b7:	30 00 60 00 c0 00 80 01 40 02 80 04                 0.`.....@...

000004c3 <labels.2506>:
     4c3:	6c 04 76 04 80 04 8a 04 94 04 9e 04 a8 04           l.v...........

000004d1 <sparkfun_logo.2461>:
     4d1:	0a 10 80 c0 40 0c 3e fe f2 e0 f0 e0 ff 7f 3f 1f     ....@.>.......?.
     4e1:	1f 1f 1f 0f 07 03 00                                .......

000004e8 <__ctors_end>:
     4e8:	11 24       	eor	r1, r1
     4ea:	1f be       	out	0x3f, r1	; 63
     4ec:	cf ef       	ldi	r28, 0xFF	; 255
     4ee:	d4 e0       	ldi	r29, 0x04	; 4
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	cd bf       	out	0x3d, r28	; 61

000004f4 <__do_copy_data>:
     4f4:	11 e0       	ldi	r17, 0x01	; 1
     4f6:	a0 e0       	ldi	r26, 0x00	; 0
     4f8:	b1 e0       	ldi	r27, 0x01	; 1
     4fa:	e4 ec       	ldi	r30, 0xC4	; 196
     4fc:	f7 e3       	ldi	r31, 0x37	; 55
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <__stack+0x5>
     500:	05 90       	lpm	r0, Z+
     502:	0d 92       	st	X+, r0
     504:	a2 30       	cpi	r26, 0x02	; 2
     506:	b1 07       	cpc	r27, r17
     508:	d9 f7       	brne	.-10     	; 0x500 <__stack+0x1>

0000050a <__do_clear_bss>:
     50a:	23 e0       	ldi	r18, 0x03	; 3
     50c:	a2 e0       	ldi	r26, 0x02	; 2
     50e:	b1 e0       	ldi	r27, 0x01	; 1
     510:	01 c0       	rjmp	.+2      	; 0x514 <.do_clear_bss_start>

00000512 <.do_clear_bss_loop>:
     512:	1d 92       	st	X+, r1

00000514 <.do_clear_bss_start>:
     514:	a4 3a       	cpi	r26, 0xA4	; 164
     516:	b2 07       	cpc	r27, r18
     518:	e1 f7       	brne	.-8      	; 0x512 <.do_clear_bss_loop>
     51a:	0e 94 2a 1a 	call	0x3454	; 0x3454 <main>
     51e:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <_exit>

00000522 <__bad_interrupt>:
     522:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000526 <graphics_mode>:
/////////////////////////////////////////////////////////////////////////////
/// Set the graphics mode
void
graphics_mode (uint8_t cmd)
{
    prefs_graphics = (cmd == CMDX_GRAPHICS_ON) ? 1 : 0;
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	80 34       	cpi	r24, 0x40	; 64
     52a:	09 f0       	breq	.+2      	; 0x52e <graphics_mode+0x8>
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	90 93 ee 02 	sts	0x02EE, r25
     532:	08 95       	ret

00000534 <__vector_6>:
    }
}

/* Watchdog timer interrupt */
ISR (WDT_vect)
{
     534:	1f 92       	push	r1
     536:	0f 92       	push	r0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	0f 92       	push	r0
     53c:	11 24       	eor	r1, r1
    ; /* Do nothing - we do not have anything to do, just let the system reset. */
}
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <backlight_init>:
///
void
backlight_init (void)
{
    // Turn the backlight of
    PORTB |= 1 << nBL_EN;               // Set backlight off.
     548:	2a 9a       	sbi	0x05, 2	; 5
    DDRB  |= 1 << nBL_EN;               // Set PB2 as output
     54a:	22 9a       	sbi	0x04, 2	; 4
     54c:	08 95       	ret

0000054e <backlight_level>:
///
/// @return The current level.
///
uint8_t
backlight_level (uint8_t level, uint8_t cmd)
{
     54e:	cf 93       	push	r28
     550:	c8 2f       	mov	r28, r24
    // Accept the new value and make sure it is in a valid range.
    if (level > 100)
     552:	85 36       	cpi	r24, 0x65	; 101
     554:	10 f4       	brcc	.+4      	; 0x55a <backlight_level+0xc>
        level = 100;

    // Full brightness
    if (level >= 100)
     556:	84 36       	cpi	r24, 0x64	; 100
     558:	39 f4       	brne	.+14     	; 0x568 <backlight_level+0x1a>
    {
        // Disable Timer1
        TCCR1A = 0;
     55a:	10 92 80 00 	sts	0x0080, r1
        TCCR1B = 0;
     55e:	10 92 81 00 	sts	0x0081, r1

        // Turn backlight on
        PORTB &= ~(1 << nBL_EN);
     562:	2a 98       	cbi	0x05, 2	; 5
     564:	c4 e6       	ldi	r28, 0x64	; 100
     566:	1b c0       	rjmp	.+54     	; 0x59e <backlight_level+0x50>
    }
    // Turn backlight off
    else if (level == 0)
     568:	81 11       	cpse	r24, r1
     56a:	06 c0       	rjmp	.+12     	; 0x578 <backlight_level+0x2a>
    {
        // Disable Timer1
        TCCR1A = 0;
     56c:	10 92 80 00 	sts	0x0080, r1
        TCCR1B = 0;
     570:	10 92 81 00 	sts	0x0081, r1

        // Set the backlight off
        PORTB |= 1 << nBL_EN;
     574:	2a 9a       	sbi	0x05, 2	; 5
     576:	13 c0       	rjmp	.+38     	; 0x59e <backlight_level+0x50>
    }
    // Some setting in the middle.
    else
    {
        // Backlight on
        PORTB &= ~(1 << nBL_EN);
     578:	2a 98       	cbi	0x05, 2	; 5
        //          1:0 - Waveform generation mode bits 1:0
        //                 Along with WGM1 3:2 (In TCCR1B), set to 1111 to enable
        //                 fast PWM mode. TCNT1 will increment until it reaches ICR1,
        //                 then reset, and the pin will change when TCNT1 == 0 and
        //                 when TCNT1 == OCR1B.
        TCCR1A = 0b00110010;
     57a:	82 e3       	ldi	r24, 0x32	; 50
     57c:	80 93 80 00 	sts	0x0080, r24
        //          5   - Don't care/no use
        //          4:3 - Waveform generation mode bits 3:2
        //                 See above; set to 11 for fast PWM
        //          2:0 - Timer 1 clock source
        //                 Set to 001 for no clock divisor.
        TCCR1B = 0b00011001;
     580:	89 e1       	ldi	r24, 0x19	; 25
     582:	80 93 81 00 	sts	0x0081, r24

        // ICR1- Really implemented as two 8-bit registers (ICR1L and ICR1H), the
        // value in this register (in this mode) marks the point at which the
        // timer quits counting and returns to zero. By making it 100, we can
        // then really easily set our backlight intensity from 0-100.
        ICR1 = 100;
     586:	24 e6       	ldi	r18, 0x64	; 100
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	30 93 87 00 	sts	0x0087, r19
     58e:	20 93 86 00 	sts	0x0086, r18

        // OCR1B- Really implemented as two 8-bit registers (OCR1BL and OCR1BH),
        // the value in this register is the point where the output pin will
        // transition from low to high, turning the backlight off.
        OCR1B = level;
     592:	2c 2f       	mov	r18, r28
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	30 93 8b 00 	sts	0x008B, r19
     59a:	20 93 8a 00 	sts	0x008A, r18
    }

    // Save the setting if required.
    if (cmd == CMD_SET_BACKLIGHT)
     59e:	62 30       	cpi	r22, 0x02	; 2
     5a0:	21 f4       	brne	.+8      	; 0x5aa <backlight_level+0x5c>
        lcd_set (LCD_SET_CHECKBYTE, EEPROM_ADDR_BACKLIGHT, level);
     5a2:	4c 2f       	mov	r20, r28
     5a4:	85 ec       	ldi	r24, 0xC5	; 197
     5a6:	0e 94 3f 12 	call	0x247e	; 0x247e <lcd_set>

    // Return the level to the caller.
    return level;
}
     5aa:	8c 2f       	mov	r24, r28
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <clip_hline>:

static void
clip_hline (int x0, int y0, int x1, uint8_t s_r)
{
    // Make sure y is on screen
    if (y_valid (y0))
     5b0:	e0 91 f1 02 	lds	r30, 0x02F1
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	f1 95       	neg	r31
     5b8:	e1 95       	neg	r30
     5ba:	f1 09       	sbc	r31, r1
     5bc:	e6 23       	and	r30, r22
     5be:	f7 23       	and	r31, r23
     5c0:	ef 2b       	or	r30, r31
     5c2:	11 f5       	brne	.+68     	; 0x608 <clip_hline+0x58>
    {
        // Swap the word if in the incorrect order.
        if (x0 > x1)
     5c4:	48 17       	cp	r20, r24
     5c6:	59 07       	cpc	r21, r25
     5c8:	2c f4       	brge	.+10     	; 0x5d4 <clip_hline+0x24>
     5ca:	e8 2f       	mov	r30, r24
     5cc:	39 2f       	mov	r19, r25
     5ce:	ca 01       	movw	r24, r20
     5d0:	4e 2f       	mov	r20, r30
     5d2:	53 2f       	mov	r21, r19
            x0 = x1;
            x1 = temp;
        }

        // Ensure end point is on screen
        if (x1 >= 0)
     5d4:	57 fd       	sbrc	r21, 7
     5d6:	18 c0       	rjmp	.+48     	; 0x608 <clip_hline+0x58>
        {
            // Ensure start point is on screen */
            if (x0 < x_dim)
     5d8:	e0 91 02 03 	lds	r30, 0x0302
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	8e 17       	cp	r24, r30
     5e0:	9f 07       	cpc	r25, r31
     5e2:	94 f4       	brge	.+36     	; 0x608 <clip_hline+0x58>
            {
                // Ensure endpoint is not off screen
                if (x1 >= x_dim)
     5e4:	4e 17       	cp	r20, r30
     5e6:	5f 07       	cpc	r21, r31
     5e8:	1c f0       	brlt	.+6      	; 0x5f0 <clip_hline+0x40>
                    x1 = x_dim - 1;     // Clip end point to screen.
     5ea:	af 01       	movw	r20, r30
     5ec:	41 50       	subi	r20, 0x01	; 1
     5ee:	51 09       	sbc	r21, r1
                if (x0 < 0)
                    x0 = 0;             // Clip start point to screen.
                draw_hline (x0, y0, x1, s_r);
     5f0:	e0 91 ef 02 	lds	r30, 0x02EF
     5f4:	f0 91 f0 02 	lds	r31, 0x02F0
     5f8:	a5 91       	lpm	r26, Z+
     5fa:	b4 91       	lpm	r27, Z
     5fc:	97 ff       	sbrs	r25, 7
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <clip_hline+0x54>
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	fd 01       	movw	r30, r26
     606:	09 94       	ijmp
     608:	08 95       	ret

0000060a <clip_vline>:

static void
clip_vline (int x0, int y0, int y1, uint8_t s_r)
{
    // Make sure y is on screen
    if (x_valid (x0))
     60a:	97 fd       	sbrc	r25, 7
     60c:	29 c0       	rjmp	.+82     	; 0x660 <clip_vline+0x56>
     60e:	e0 91 02 03 	lds	r30, 0x0302
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	8e 17       	cp	r24, r30
     616:	9f 07       	cpc	r25, r31
     618:	1c f5       	brge	.+70     	; 0x660 <clip_vline+0x56>
    {
        // Swap the word if in the incorrect order.
        if (y0 > y1)
     61a:	46 17       	cp	r20, r22
     61c:	57 07       	cpc	r21, r23
     61e:	2c f4       	brge	.+10     	; 0x62a <clip_vline+0x20>
     620:	e6 2f       	mov	r30, r22
     622:	37 2f       	mov	r19, r23
     624:	ba 01       	movw	r22, r20
     626:	4e 2f       	mov	r20, r30
     628:	53 2f       	mov	r21, r19
            y0 = y1;
            y1 = temp;
        }

        // Ensure end point is on screen
        if (y1 >= 0)
     62a:	57 fd       	sbrc	r21, 7
     62c:	19 c0       	rjmp	.+50     	; 0x660 <clip_vline+0x56>
        {
            // Ensure start point is on screen */
            if (y0 < y_dim)
     62e:	e0 91 f1 02 	lds	r30, 0x02F1
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	6e 17       	cp	r22, r30
     636:	7f 07       	cpc	r23, r31
     638:	9c f4       	brge	.+38     	; 0x660 <clip_vline+0x56>
            {
                // Ensure endpoint is not off screen
                if (y1 >= y_dim)
     63a:	4e 17       	cp	r20, r30
     63c:	5f 07       	cpc	r21, r31
     63e:	1c f0       	brlt	.+6      	; 0x646 <clip_vline+0x3c>
                    y1 = y_dim - 1;     // Clip end point to screen.
     640:	af 01       	movw	r20, r30
     642:	41 50       	subi	r20, 0x01	; 1
     644:	51 09       	sbc	r21, r1
                if (y0 < 0)
                    y0 = 0;             // Clip start point to screen.
                draw_vline (x0, y0, y1, s_r);
     646:	e0 91 ef 02 	lds	r30, 0x02EF
     64a:	f0 91 f0 02 	lds	r31, 0x02F0
     64e:	3c 96       	adiw	r30, 0x0c	; 12
     650:	a5 91       	lpm	r26, Z+
     652:	b4 91       	lpm	r27, Z
     654:	77 ff       	sbrs	r23, 7
     656:	02 c0       	rjmp	.+4      	; 0x65c <clip_vline+0x52>
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	fd 01       	movw	r30, r26
     65e:	09 94       	ijmp
     660:	08 95       	ret

00000662 <_draw_circle>:
// Noted that the Sparkfun circle algorithm is a little easier however the
// circle quality is dubious at a small radius so we keep the existing one
// used by Jennifer Holt.
static void
_draw_circle (uint8_t xin, uint8_t yin, uint8_t xgap, uint8_t ygap, uint8_t rin, uint8_t s_r)
{
     662:	2f 92       	push	r2
     664:	3f 92       	push	r3
     666:	4f 92       	push	r4
     668:	5f 92       	push	r5
     66a:	6f 92       	push	r6
     66c:	7f 92       	push	r7
     66e:	8f 92       	push	r8
     670:	9f 92       	push	r9
     672:	af 92       	push	r10
     674:	bf 92       	push	r11
     676:	cf 92       	push	r12
     678:	df 92       	push	r13
     67a:	ef 92       	push	r14
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	65 97       	sbiw	r28, 0x15	; 21
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
     696:	f4 2e       	mov	r15, r20
    int r = rin;
     698:	60 2e       	mov	r6, r16
     69a:	71 2c       	mov	r7, r1
    int f = 1 - r;
     69c:	41 e0       	ldi	r20, 0x01	; 1
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	46 19       	sub	r20, r6
     6a2:	57 09       	sbc	r21, r7
     6a4:	58 87       	std	Y+8, r21	; 0x08
     6a6:	4f 83       	std	Y+7, r20	; 0x07
    int ddF_x = 1;
    int ddF_y = -2 * r;
     6a8:	ee 27       	eor	r30, r30
     6aa:	ff 27       	eor	r31, r31
     6ac:	e6 19       	sub	r30, r6
     6ae:	f7 09       	sbc	r31, r7
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	fc 87       	std	Y+12, r31	; 0x0c
     6b6:	eb 87       	std	Y+11, r30	; 0x0b
    int x = 0;
    int y = r;
    int x0 = xin;
     6b8:	28 2e       	mov	r2, r24
     6ba:	31 2c       	mov	r3, r1
    int y0 = yin;
     6bc:	86 2e       	mov	r8, r22
     6be:	91 2c       	mov	r9, r1
    int xstart;

    // Sort out the drawing mode
    s_r = ((~s_r ^ prefs_reverse) & MODE_NORMAL_MASK) | (s_r & ~MODE_NORMAL_MASK);
     6c0:	8e 2d       	mov	r24, r14
     6c2:	80 95       	com	r24
     6c4:	90 91 e6 02 	lds	r25, 0x02E6
     6c8:	89 27       	eor	r24, r25
     6ca:	80 fb       	bst	r24, 0
     6cc:	e0 f8       	bld	r14, 0
     6ce:	42 2f       	mov	r20, r18
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	5e 83       	std	Y+6, r21	; 0x06
     6d4:	4d 83       	std	Y+5, r20	; 0x05
     6d6:	48 0d       	add	r20, r8
     6d8:	59 1d       	adc	r21, r9
     6da:	5c 83       	std	Y+4, r21	; 0x04
     6dc:	4b 83       	std	Y+3, r20	; 0x03
    xstart = x;
    while(x < y)
     6de:	41 2c       	mov	r4, r1
     6e0:	51 2c       	mov	r5, r1
    int y0 = yin;
    int xstart;

    // Sort out the drawing mode
    s_r = ((~s_r ^ prefs_reverse) & MODE_NORMAL_MASK) | (s_r & ~MODE_NORMAL_MASK);
    xstart = x;
     6e2:	1d 8a       	std	Y+21, r1	; 0x15
     6e4:	1c 8a       	std	Y+20, r1	; 0x14
     6e6:	38 8a       	std	Y+16, r3	; 0x10
     6e8:	2f 86       	std	Y+15, r2	; 0x0f
     6ea:	8f 2d       	mov	r24, r15
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	9a 87       	std	Y+10, r25	; 0x0a
     6f0:	89 87       	std	Y+9, r24	; 0x09
                    clip_vline (x0 - y,        y0 + x + ygap, y0 - x, s_r);  // 6/8 + 7/8
                }
            }
            else
            {
                if (s_r & MODE_FILL)
     6f2:	3e 2d       	mov	r19, r14
     6f4:	38 70       	andi	r19, 0x08	; 8
     6f6:	3b 8b       	std	Y+19, r19	; 0x13
     6f8:	82 0d       	add	r24, r2
     6fa:	93 1d       	adc	r25, r3
     6fc:	9a 8b       	std	Y+18, r25	; 0x12
     6fe:	89 8b       	std	Y+17, r24	; 0x11
     700:	9e 86       	std	Y+14, r9	; 0x0e
     702:	8d 86       	std	Y+13, r8	; 0x0d
    int xstart;

    // Sort out the drawing mode
    s_r = ((~s_r ^ prefs_reverse) & MODE_NORMAL_MASK) | (s_r & ~MODE_NORMAL_MASK);
    xstart = x;
    while(x < y)
     704:	46 14       	cp	r4, r6
     706:	57 04       	cpc	r5, r7
     708:	0c f0       	brlt	.+2      	; 0x70c <_draw_circle+0xaa>
     70a:	5b c1       	rjmp	.+694    	; 0x9c2 <_draw_circle+0x360>
    {
        if(f >= 0)
     70c:	4f 81       	ldd	r20, Y+7	; 0x07
     70e:	58 85       	ldd	r21, Y+8	; 0x08
     710:	57 fd       	sbrc	r21, 7
     712:	44 c1       	rjmp	.+648    	; 0x99c <_draw_circle+0x33a>
     714:	84 01       	movw	r16, r8
     716:	06 19       	sub	r16, r6
     718:	17 09       	sbc	r17, r7
        {
            if (xstart == 0)
     71a:	8c 89       	ldd	r24, Y+20	; 0x14
     71c:	9d 89       	ldd	r25, Y+21	; 0x15
     71e:	89 2b       	or	r24, r25
     720:	09 f0       	breq	.+2      	; 0x724 <_draw_circle+0xc2>
     722:	54 c0       	rjmp	.+168    	; 0x7cc <_draw_circle+0x16a>
            {
                // For the first co-ordinate x = 0 then coersce the lines as
                // they are abutting each other and we do not want them to
                // overlap in an xor operation which would cancel out 2 draw operations.
                clip_hline (x0 - x, y0 - y,        x0 + x + xgap, s_r);  // 1/8 + 8/8
     724:	2e 2d       	mov	r18, r14
     726:	c9 88       	ldd	r12, Y+17	; 0x11
     728:	da 88       	ldd	r13, Y+18	; 0x12
     72a:	c4 0c       	add	r12, r4
     72c:	d5 1c       	adc	r13, r5
     72e:	a6 01       	movw	r20, r12
     730:	b8 01       	movw	r22, r16
     732:	0f 85       	ldd	r16, Y+15	; 0x0f
     734:	18 89       	ldd	r17, Y+16	; 0x10
     736:	04 19       	sub	r16, r4
     738:	15 09       	sbc	r17, r5
     73a:	c8 01       	movw	r24, r16
     73c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
                clip_hline (x0 - x, y0 + y + ygap, x0 + x + xgap, s_r);  // 4/8 + 5/8
     740:	b4 01       	movw	r22, r8
     742:	66 0d       	add	r22, r6
     744:	77 1d       	adc	r23, r7
     746:	ed 81       	ldd	r30, Y+5	; 0x05
     748:	fe 81       	ldd	r31, Y+6	; 0x06
     74a:	6e 0f       	add	r22, r30
     74c:	7f 1f       	adc	r23, r31
     74e:	2e 2d       	mov	r18, r14
     750:	a6 01       	movw	r20, r12
     752:	c8 01       	movw	r24, r16
     754:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>

                if (s_r & MODE_FILL)
     758:	3b 89       	ldd	r19, Y+19	; 0x13
     75a:	33 23       	and	r19, r19
     75c:	f1 f0       	breq	.+60     	; 0x79a <_draw_circle+0x138>
     75e:	ad 84       	ldd	r10, Y+13	; 0x0d
     760:	be 84       	ldd	r11, Y+14	; 0x0e
     762:	a4 18       	sub	r10, r4
     764:	b5 08       	sbc	r11, r5
                {
                    int ii;

                    // Fill the lines
                    for (ii = y0 - x; ii <= y0 + x + ygap; ii++)
                        clip_hline (x0 - y, ii, x0 + y + xgap, s_r);
     766:	61 01       	movw	r12, r2
     768:	c6 0c       	add	r12, r6
     76a:	d7 1c       	adc	r13, r7
     76c:	49 85       	ldd	r20, Y+9	; 0x09
     76e:	5a 85       	ldd	r21, Y+10	; 0x0a
     770:	c4 0e       	add	r12, r20
     772:	d5 1e       	adc	r13, r21
     774:	81 01       	movw	r16, r2
     776:	06 19       	sub	r16, r6
     778:	17 09       	sbc	r17, r7
                if (s_r & MODE_FILL)
                {
                    int ii;

                    // Fill the lines
                    for (ii = y0 - x; ii <= y0 + x + ygap; ii++)
     77a:	8b 81       	ldd	r24, Y+3	; 0x03
     77c:	9c 81       	ldd	r25, Y+4	; 0x04
     77e:	8a 15       	cp	r24, r10
     780:	9b 05       	cpc	r25, r11
     782:	0c f4       	brge	.+2      	; 0x786 <_draw_circle+0x124>
     784:	f8 c0       	rjmp	.+496    	; 0x976 <_draw_circle+0x314>
                        clip_hline (x0 - y, ii, x0 + y + xgap, s_r);
     786:	2e 2d       	mov	r18, r14
     788:	a6 01       	movw	r20, r12
     78a:	b5 01       	movw	r22, r10
     78c:	c8 01       	movw	r24, r16
     78e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
                if (s_r & MODE_FILL)
                {
                    int ii;

                    // Fill the lines
                    for (ii = y0 - x; ii <= y0 + x + ygap; ii++)
     792:	5f ef       	ldi	r21, 0xFF	; 255
     794:	a5 1a       	sub	r10, r21
     796:	b5 0a       	sbc	r11, r21
     798:	f0 cf       	rjmp	.-32     	; 0x77a <_draw_circle+0x118>
                        clip_hline (x0 - y, ii, x0 + y + xgap, s_r);
                }
                else
                {
                    // Draw the lines
                    clip_vline (x0 + y + xgap, y0 + x + ygap, y0 - x, s_r);  // 2/8 + 3/8
     79a:	2e 2d       	mov	r18, r14
     79c:	0d 85       	ldd	r16, Y+13	; 0x0d
     79e:	1e 85       	ldd	r17, Y+14	; 0x0e
     7a0:	04 19       	sub	r16, r4
     7a2:	15 09       	sbc	r17, r5
     7a4:	a8 01       	movw	r20, r16
     7a6:	6b 81       	ldd	r22, Y+3	; 0x03
     7a8:	7c 81       	ldd	r23, Y+4	; 0x04
     7aa:	c1 01       	movw	r24, r2
     7ac:	86 0d       	add	r24, r6
     7ae:	97 1d       	adc	r25, r7
     7b0:	e9 85       	ldd	r30, Y+9	; 0x09
     7b2:	fa 85       	ldd	r31, Y+10	; 0x0a
     7b4:	8e 0f       	add	r24, r30
     7b6:	9f 1f       	adc	r25, r31
     7b8:	0e 94 05 03 	call	0x60a	; 0x60a <clip_vline>
                    clip_vline (x0 - y,        y0 + x + ygap, y0 - x, s_r);  // 6/8 + 7/8
     7bc:	2e 2d       	mov	r18, r14
     7be:	a8 01       	movw	r20, r16
     7c0:	6b 81       	ldd	r22, Y+3	; 0x03
     7c2:	7c 81       	ldd	r23, Y+4	; 0x04
     7c4:	c1 01       	movw	r24, r2
     7c6:	86 19       	sub	r24, r6
     7c8:	97 09       	sbc	r25, r7
     7ca:	d3 c0       	rjmp	.+422    	; 0x972 <_draw_circle+0x310>
                }
            }
            else
            {
                if (s_r & MODE_FILL)
     7cc:	3b 89       	ldd	r19, Y+19	; 0x13
     7ce:	33 23       	and	r19, r19
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <_draw_circle+0x172>
     7d2:	5f c0       	rjmp	.+190    	; 0x892 <_draw_circle+0x230>
                {
                    // Fill the lines
                    clip_hline (x0 - x, y0 - y,        x0 + x + xgap, s_r);  // 1/8 + 8/8
     7d4:	2e 2d       	mov	r18, r14
     7d6:	c9 88       	ldd	r12, Y+17	; 0x11
     7d8:	da 88       	ldd	r13, Y+18	; 0x12
     7da:	c4 0c       	add	r12, r4
     7dc:	d5 1c       	adc	r13, r5
     7de:	a6 01       	movw	r20, r12
     7e0:	b8 01       	movw	r22, r16
     7e2:	0f 85       	ldd	r16, Y+15	; 0x0f
     7e4:	18 89       	ldd	r17, Y+16	; 0x10
     7e6:	04 19       	sub	r16, r4
     7e8:	15 09       	sbc	r17, r5
     7ea:	c8 01       	movw	r24, r16
     7ec:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
                    clip_hline (x0 - x, y0 + y + ygap, x0 + x + xgap, s_r);  // 4/8 + 5/8
     7f0:	b4 01       	movw	r22, r8
     7f2:	66 0d       	add	r22, r6
     7f4:	77 1d       	adc	r23, r7
     7f6:	4d 81       	ldd	r20, Y+5	; 0x05
     7f8:	5e 81       	ldd	r21, Y+6	; 0x06
     7fa:	64 0f       	add	r22, r20
     7fc:	75 1f       	adc	r23, r21
     7fe:	2e 2d       	mov	r18, r14
     800:	a6 01       	movw	r20, r12
     802:	c8 01       	movw	r24, r16
     804:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
     808:	0d 85       	ldd	r16, Y+13	; 0x0d
     80a:	1e 85       	ldd	r17, Y+14	; 0x0e
     80c:	04 19       	sub	r16, r4
     80e:	15 09       	sbc	r17, r5

                    int ii;
                    for (ii = y0 - x; ii <= y0 - xstart; ii++)
     810:	c4 01       	movw	r24, r8
     812:	ec 89       	ldd	r30, Y+20	; 0x14
     814:	fd 89       	ldd	r31, Y+21	; 0x15
     816:	8e 1b       	sub	r24, r30
     818:	9f 0b       	sbc	r25, r31
     81a:	9a 83       	std	Y+2, r25	; 0x02
     81c:	89 83       	std	Y+1, r24	; 0x01
                        clip_hline (x0 - y, ii, x0 + y + xgap, s_r);    // 2/8 + 7/8
     81e:	61 01       	movw	r12, r2
     820:	c6 0c       	add	r12, r6
     822:	d7 1c       	adc	r13, r7
     824:	29 85       	ldd	r18, Y+9	; 0x09
     826:	3a 85       	ldd	r19, Y+10	; 0x0a
     828:	c2 0e       	add	r12, r18
     82a:	d3 1e       	adc	r13, r19
     82c:	51 01       	movw	r10, r2
     82e:	a6 18       	sub	r10, r6
     830:	b7 08       	sbc	r11, r7
                    // Fill the lines
                    clip_hline (x0 - x, y0 - y,        x0 + x + xgap, s_r);  // 1/8 + 8/8
                    clip_hline (x0 - x, y0 + y + ygap, x0 + x + xgap, s_r);  // 4/8 + 5/8

                    int ii;
                    for (ii = y0 - x; ii <= y0 - xstart; ii++)
     832:	49 81       	ldd	r20, Y+1	; 0x01
     834:	5a 81       	ldd	r21, Y+2	; 0x02
     836:	40 17       	cp	r20, r16
     838:	51 07       	cpc	r21, r17
     83a:	4c f0       	brlt	.+18     	; 0x84e <_draw_circle+0x1ec>
                        clip_hline (x0 - y, ii, x0 + y + xgap, s_r);    // 2/8 + 7/8
     83c:	2e 2d       	mov	r18, r14
     83e:	a6 01       	movw	r20, r12
     840:	b8 01       	movw	r22, r16
     842:	c5 01       	movw	r24, r10
     844:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
                    // Fill the lines
                    clip_hline (x0 - x, y0 - y,        x0 + x + xgap, s_r);  // 1/8 + 8/8
                    clip_hline (x0 - x, y0 + y + ygap, x0 + x + xgap, s_r);  // 4/8 + 5/8

                    int ii;
                    for (ii = y0 - x; ii <= y0 - xstart; ii++)
     848:	0f 5f       	subi	r16, 0xFF	; 255
     84a:	1f 4f       	sbci	r17, 0xFF	; 255
     84c:	f2 cf       	rjmp	.-28     	; 0x832 <_draw_circle+0x1d0>
                        clip_hline (x0 - y, ii, x0 + y + xgap, s_r);    // 2/8 + 7/8
                    for (ii = y0 + xstart + ygap; ii <= y0 + x + ygap; ii++)
     84e:	ac 88       	ldd	r10, Y+20	; 0x14
     850:	bd 88       	ldd	r11, Y+21	; 0x15
     852:	a8 0c       	add	r10, r8
     854:	b9 1c       	adc	r11, r9
     856:	8d 81       	ldd	r24, Y+5	; 0x05
     858:	9e 81       	ldd	r25, Y+6	; 0x06
     85a:	a8 0e       	add	r10, r24
     85c:	b9 1e       	adc	r11, r25
                        clip_hline (x0 - y, ii, x0 + y + xgap, s_r);    // 3/8 + 6/8
     85e:	61 01       	movw	r12, r2
     860:	c6 0c       	add	r12, r6
     862:	d7 1c       	adc	r13, r7
     864:	e9 85       	ldd	r30, Y+9	; 0x09
     866:	fa 85       	ldd	r31, Y+10	; 0x0a
     868:	ce 0e       	add	r12, r30
     86a:	df 1e       	adc	r13, r31
     86c:	81 01       	movw	r16, r2
     86e:	06 19       	sub	r16, r6
     870:	17 09       	sbc	r17, r7
                    clip_hline (x0 - x, y0 + y + ygap, x0 + x + xgap, s_r);  // 4/8 + 5/8

                    int ii;
                    for (ii = y0 - x; ii <= y0 - xstart; ii++)
                        clip_hline (x0 - y, ii, x0 + y + xgap, s_r);    // 2/8 + 7/8
                    for (ii = y0 + xstart + ygap; ii <= y0 + x + ygap; ii++)
     872:	2b 81       	ldd	r18, Y+3	; 0x03
     874:	3c 81       	ldd	r19, Y+4	; 0x04
     876:	2a 15       	cp	r18, r10
     878:	3b 05       	cpc	r19, r11
     87a:	0c f4       	brge	.+2      	; 0x87e <_draw_circle+0x21c>
     87c:	7c c0       	rjmp	.+248    	; 0x976 <_draw_circle+0x314>
                        clip_hline (x0 - y, ii, x0 + y + xgap, s_r);    // 3/8 + 6/8
     87e:	2e 2d       	mov	r18, r14
     880:	a6 01       	movw	r20, r12
     882:	b5 01       	movw	r22, r10
     884:	c8 01       	movw	r24, r16
     886:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
                    clip_hline (x0 - x, y0 + y + ygap, x0 + x + xgap, s_r);  // 4/8 + 5/8

                    int ii;
                    for (ii = y0 - x; ii <= y0 - xstart; ii++)
                        clip_hline (x0 - y, ii, x0 + y + xgap, s_r);    // 2/8 + 7/8
                    for (ii = y0 + xstart + ygap; ii <= y0 + x + ygap; ii++)
     88a:	ff ef       	ldi	r31, 0xFF	; 255
     88c:	af 1a       	sub	r10, r31
     88e:	bf 0a       	sbc	r11, r31
     890:	f0 cf       	rjmp	.-32     	; 0x872 <_draw_circle+0x210>
                        clip_hline (x0 - y, ii, x0 + y + xgap, s_r);    // 3/8 + 6/8
                }
                else
                {
                    // For the rest of the lines then draw each octant.
                    clip_hline (x0 + xstart + xgap, y0 - y,        x0 + x + xgap, s_r);  // 1/8
     892:	ac 88       	ldd	r10, Y+20	; 0x14
     894:	bd 88       	ldd	r11, Y+21	; 0x15
     896:	a2 0c       	add	r10, r2
     898:	b3 1c       	adc	r11, r3
     89a:	49 85       	ldd	r20, Y+9	; 0x09
     89c:	5a 85       	ldd	r21, Y+10	; 0x0a
     89e:	a4 0e       	add	r10, r20
     8a0:	b5 1e       	adc	r11, r21
     8a2:	2e 2d       	mov	r18, r14
     8a4:	89 89       	ldd	r24, Y+17	; 0x11
     8a6:	9a 89       	ldd	r25, Y+18	; 0x12
     8a8:	84 0d       	add	r24, r4
     8aa:	95 1d       	adc	r25, r5
     8ac:	9a 83       	std	Y+2, r25	; 0x02
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	ac 01       	movw	r20, r24
     8b2:	b8 01       	movw	r22, r16
     8b4:	c5 01       	movw	r24, r10
     8b6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
                    clip_hline (x0 + xstart + xgap, y0 + y + ygap, x0 + x + xgap, s_r);  // 4/8
     8ba:	64 01       	movw	r12, r8
     8bc:	c6 0c       	add	r12, r6
     8be:	d7 1c       	adc	r13, r7
     8c0:	ed 81       	ldd	r30, Y+5	; 0x05
     8c2:	fe 81       	ldd	r31, Y+6	; 0x06
     8c4:	ce 0e       	add	r12, r30
     8c6:	df 1e       	adc	r13, r31
     8c8:	2e 2d       	mov	r18, r14
     8ca:	49 81       	ldd	r20, Y+1	; 0x01
     8cc:	5a 81       	ldd	r21, Y+2	; 0x02
     8ce:	b6 01       	movw	r22, r12
     8d0:	c5 01       	movw	r24, r10
     8d2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
                    clip_hline (x0 - xstart,        y0 + y + ygap, x0 - x,        s_r);  // 5/8
     8d6:	51 01       	movw	r10, r2
     8d8:	2c 89       	ldd	r18, Y+20	; 0x14
     8da:	3d 89       	ldd	r19, Y+21	; 0x15
     8dc:	a2 1a       	sub	r10, r18
     8de:	b3 0a       	sbc	r11, r19
     8e0:	2e 2d       	mov	r18, r14
     8e2:	4f 85       	ldd	r20, Y+15	; 0x0f
     8e4:	58 89       	ldd	r21, Y+16	; 0x10
     8e6:	44 19       	sub	r20, r4
     8e8:	55 09       	sbc	r21, r5
     8ea:	5a 83       	std	Y+2, r21	; 0x02
     8ec:	49 83       	std	Y+1, r20	; 0x01
     8ee:	b6 01       	movw	r22, r12
     8f0:	c5 01       	movw	r24, r10
     8f2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
                    clip_hline (x0 - xstart,        y0 - y,        x0 - x,        s_r);  // 8/8
     8f6:	2e 2d       	mov	r18, r14
     8f8:	49 81       	ldd	r20, Y+1	; 0x01
     8fa:	5a 81       	ldd	r21, Y+2	; 0x02
     8fc:	b8 01       	movw	r22, r16
     8fe:	c5 01       	movw	r24, r10
     900:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>

                    clip_vline (x0 + y + xgap, y0 + xstart + ygap, y0 + x + ygap, s_r);  // 3/8
     904:	0c 89       	ldd	r16, Y+20	; 0x14
     906:	1d 89       	ldd	r17, Y+21	; 0x15
     908:	08 0d       	add	r16, r8
     90a:	19 1d       	adc	r17, r9
     90c:	8d 81       	ldd	r24, Y+5	; 0x05
     90e:	9e 81       	ldd	r25, Y+6	; 0x06
     910:	08 0f       	add	r16, r24
     912:	19 1f       	adc	r17, r25
     914:	61 01       	movw	r12, r2
     916:	c6 0c       	add	r12, r6
     918:	d7 1c       	adc	r13, r7
     91a:	e9 85       	ldd	r30, Y+9	; 0x09
     91c:	fa 85       	ldd	r31, Y+10	; 0x0a
     91e:	ce 0e       	add	r12, r30
     920:	df 1e       	adc	r13, r31
     922:	2e 2d       	mov	r18, r14
     924:	4b 81       	ldd	r20, Y+3	; 0x03
     926:	5c 81       	ldd	r21, Y+4	; 0x04
     928:	b8 01       	movw	r22, r16
     92a:	c6 01       	movw	r24, r12
     92c:	0e 94 05 03 	call	0x60a	; 0x60a <clip_vline>
                    clip_vline (x0 + y + xgap, y0 - xstart,        y0 - x,        s_r);  // 2/8
     930:	94 01       	movw	r18, r8
     932:	4c 89       	ldd	r20, Y+20	; 0x14
     934:	5d 89       	ldd	r21, Y+21	; 0x15
     936:	24 1b       	sub	r18, r20
     938:	35 0b       	sbc	r19, r21
     93a:	3a 83       	std	Y+2, r19	; 0x02
     93c:	29 83       	std	Y+1, r18	; 0x01
     93e:	2e 2d       	mov	r18, r14
     940:	ad 84       	ldd	r10, Y+13	; 0x0d
     942:	be 84       	ldd	r11, Y+14	; 0x0e
     944:	a4 18       	sub	r10, r4
     946:	b5 08       	sbc	r11, r5
     948:	a5 01       	movw	r20, r10
     94a:	69 81       	ldd	r22, Y+1	; 0x01
     94c:	7a 81       	ldd	r23, Y+2	; 0x02
     94e:	c6 01       	movw	r24, r12
     950:	0e 94 05 03 	call	0x60a	; 0x60a <clip_vline>
                    clip_vline (x0 - y,        y0 - xstart,        y0 - x,        s_r);  // 7/8
     954:	2e 2d       	mov	r18, r14
     956:	a5 01       	movw	r20, r10
     958:	69 81       	ldd	r22, Y+1	; 0x01
     95a:	7a 81       	ldd	r23, Y+2	; 0x02
     95c:	61 01       	movw	r12, r2
     95e:	c6 18       	sub	r12, r6
     960:	d7 08       	sbc	r13, r7
     962:	c6 01       	movw	r24, r12
     964:	0e 94 05 03 	call	0x60a	; 0x60a <clip_vline>
                    clip_vline (x0 - y,        y0 + xstart + ygap, y0 + x + ygap, s_r);  // 6/8
     968:	2e 2d       	mov	r18, r14
     96a:	4b 81       	ldd	r20, Y+3	; 0x03
     96c:	5c 81       	ldd	r21, Y+4	; 0x04
     96e:	b8 01       	movw	r22, r16
     970:	c6 01       	movw	r24, r12
     972:	0e 94 05 03 	call	0x60a	; 0x60a <clip_vline>
                }
            }
            y--;
     976:	51 e0       	ldi	r21, 0x01	; 1
     978:	65 1a       	sub	r6, r21
     97a:	71 08       	sbc	r7, r1
            ddF_y += 2;
     97c:	8b 85       	ldd	r24, Y+11	; 0x0b
     97e:	9c 85       	ldd	r25, Y+12	; 0x0c
     980:	02 96       	adiw	r24, 0x02	; 2
     982:	9c 87       	std	Y+12, r25	; 0x0c
     984:	8b 87       	std	Y+11, r24	; 0x0b
            f += ddF_y;
     986:	ef 81       	ldd	r30, Y+7	; 0x07
     988:	f8 85       	ldd	r31, Y+8	; 0x08
     98a:	e8 0f       	add	r30, r24
     98c:	f9 1f       	adc	r31, r25
     98e:	f8 87       	std	Y+8, r31	; 0x08
     990:	ef 83       	std	Y+7, r30	; 0x07
     992:	92 01       	movw	r18, r4
     994:	2f 5f       	subi	r18, 0xFF	; 255
     996:	3f 4f       	sbci	r19, 0xFF	; 255
     998:	3d 8b       	std	Y+21, r19	; 0x15
     99a:	2c 8b       	std	Y+20, r18	; 0x14
     99c:	c2 01       	movw	r24, r4
     99e:	88 0f       	add	r24, r24
     9a0:	99 1f       	adc	r25, r25
     9a2:	03 96       	adiw	r24, 0x03	; 3
            xstart = x;
        }
        else
            x++;
        ddF_x += 2;
        f += ddF_x;
     9a4:	4f 81       	ldd	r20, Y+7	; 0x07
     9a6:	58 85       	ldd	r21, Y+8	; 0x08
     9a8:	48 0f       	add	r20, r24
     9aa:	59 1f       	adc	r21, r25
     9ac:	58 87       	std	Y+8, r21	; 0x08
     9ae:	4f 83       	std	Y+7, r20	; 0x07
     9b0:	5f ef       	ldi	r21, 0xFF	; 255
     9b2:	45 1a       	sub	r4, r21
     9b4:	55 0a       	sbc	r5, r21
     9b6:	8b 81       	ldd	r24, Y+3	; 0x03
     9b8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	a1 ce       	rjmp	.-702    	; 0x704 <_draw_circle+0xa2>
    }

    // Handle the last round only if the 2 coordinates are the same. When the
    // coordinates are different then over-drawing occurs which is why we skip.
    if (x == y)
     9c2:	46 14       	cp	r4, r6
     9c4:	57 04       	cpc	r5, r7
     9c6:	09 f0       	breq	.+2      	; 0x9ca <_draw_circle+0x368>
     9c8:	c4 c0       	rjmp	.+392    	; 0xb52 <_draw_circle+0x4f0>
     9ca:	8f 2d       	mov	r24, r15
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	61 01       	movw	r12, r2
     9d0:	c4 0c       	add	r12, r4
     9d2:	d5 1c       	adc	r13, r5
     9d4:	81 01       	movw	r16, r2
     9d6:	04 19       	sub	r16, r4
     9d8:	15 09       	sbc	r17, r5
     9da:	34 01       	movw	r6, r8
     9dc:	64 0c       	add	r6, r4
     9de:	75 1c       	adc	r7, r5
    {
        if (s_r & MODE_FILL)
        {
            // Fill the lines.
            clip_hline (x0 - x, y0 + y + ygap, x0 + x + xgap, s_r); // 3/8 + 5/8
     9e0:	c8 0e       	add	r12, r24
     9e2:	d9 1e       	adc	r13, r25

    // Handle the last round only if the 2 coordinates are the same. When the
    // coordinates are different then over-drawing occurs which is why we skip.
    if (x == y)
    {
        if (s_r & MODE_FILL)
     9e4:	e3 fe       	sbrs	r14, 3
     9e6:	46 c0       	rjmp	.+140    	; 0xa74 <_draw_circle+0x412>
        {
            // Fill the lines.
            clip_hline (x0 - x, y0 + y + ygap, x0 + x + xgap, s_r); // 3/8 + 5/8
     9e8:	6d 81       	ldd	r22, Y+5	; 0x05
     9ea:	7e 81       	ldd	r23, Y+6	; 0x06
     9ec:	66 0d       	add	r22, r6
     9ee:	77 1d       	adc	r23, r7
     9f0:	2e 2d       	mov	r18, r14
     9f2:	a6 01       	movw	r20, r12
     9f4:	c8 01       	movw	r24, r16
     9f6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
            clip_hline (x0 - x, y0 - y,        x0 + x + xgap, s_r); // 1/8 + 7/8
     9fa:	b4 01       	movw	r22, r8
     9fc:	64 19       	sub	r22, r4
     9fe:	75 09       	sbc	r23, r5
     a00:	2e 2d       	mov	r18, r14
     a02:	a6 01       	movw	r20, r12
     a04:	c8 01       	movw	r24, r16
     a06:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
            clip_hline (x0 + xstart + xgap, y0 + y + ygap, x0 + x + xgap, s_r);    // 3/8
            clip_hline (x0 + xstart + xgap, y0 - y,        x0 + x + xgap, s_r);    // 1/8
            clip_hline (x0 - xstart,        y0 + y + ygap, x0 - x,        s_r);    // 5/8
            clip_hline (x0 - xstart,        y0 - y,        x0 - x,        s_r);    // 7/8
        }
        if (xstart < x)
     a0a:	ec 89       	ldd	r30, Y+20	; 0x14
     a0c:	fd 89       	ldd	r31, Y+21	; 0x15
     a0e:	e4 15       	cp	r30, r4
     a10:	f5 05       	cpc	r31, r5
     a12:	0c f0       	brlt	.+2      	; 0xa16 <_draw_circle+0x3b4>
     a14:	9e c0       	rjmp	.+316    	; 0xb52 <_draw_circle+0x4f0>
            // In this case then the line is longer than 1 pixel, ensure that
            // the x is not re-drawn.
            if (s_r & MODE_FILL)
            {
                // Fill the lines
                clip_hline (x0 - y, y0 + xstart + ygap, x0 + y + xgap, s_r);
     a16:	6c 89       	ldd	r22, Y+20	; 0x14
     a18:	7d 89       	ldd	r23, Y+21	; 0x15
     a1a:	68 0d       	add	r22, r8
     a1c:	79 1d       	adc	r23, r9
     a1e:	2d 81       	ldd	r18, Y+5	; 0x05
     a20:	3e 81       	ldd	r19, Y+6	; 0x06
     a22:	62 0f       	add	r22, r18
     a24:	73 1f       	adc	r23, r19
     a26:	2e 2d       	mov	r18, r14
     a28:	a6 01       	movw	r20, r12
     a2a:	c8 01       	movw	r24, r16
     a2c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
                clip_hline (x0 - y, y0 - xstart,        x0 + y + xgap, s_r);
     a30:	b4 01       	movw	r22, r8
     a32:	4c 89       	ldd	r20, Y+20	; 0x14
     a34:	5d 89       	ldd	r21, Y+21	; 0x15
     a36:	64 1b       	sub	r22, r20
     a38:	75 0b       	sbc	r23, r21
     a3a:	2e 2d       	mov	r18, r14
     a3c:	a6 01       	movw	r20, r12
     a3e:	c8 01       	movw	r24, r16
                clip_vline (x0 + y + xgap, y0 - xstart,        y0 - xstart,        s_r);  // 2/8
                clip_vline (x0 - y,        y0 - xstart,        y0 - xstart,        s_r);
            }
        }
    }
}
     a40:	65 96       	adiw	r28, 0x15	; 21
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	cf 90       	pop	r12
     a5c:	bf 90       	pop	r11
     a5e:	af 90       	pop	r10
     a60:	9f 90       	pop	r9
     a62:	8f 90       	pop	r8
     a64:	7f 90       	pop	r7
     a66:	6f 90       	pop	r6
     a68:	5f 90       	pop	r5
     a6a:	4f 90       	pop	r4
     a6c:	3f 90       	pop	r3
     a6e:	2f 90       	pop	r2
            // the x is not re-drawn.
            if (s_r & MODE_FILL)
            {
                // Fill the lines
                clip_hline (x0 - y, y0 + xstart + ygap, x0 + y + xgap, s_r);
                clip_hline (x0 - y, y0 - xstart,        x0 + y + xgap, s_r);
     a70:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <clip_hline>
            clip_hline (x0 - x, y0 - y,        x0 + x + xgap, s_r); // 1/8 + 7/8
        }
        else
        {
            // Draw the lines
            clip_hline (x0 + xstart + xgap, y0 + y + ygap, x0 + x + xgap, s_r);    // 3/8
     a74:	2d 81       	ldd	r18, Y+5	; 0x05
     a76:	3e 81       	ldd	r19, Y+6	; 0x06
     a78:	62 0e       	add	r6, r18
     a7a:	73 1e       	adc	r7, r19
     a7c:	ac 88       	ldd	r10, Y+20	; 0x14
     a7e:	bd 88       	ldd	r11, Y+21	; 0x15
     a80:	a2 0c       	add	r10, r2
     a82:	b3 1c       	adc	r11, r3
     a84:	a8 0e       	add	r10, r24
     a86:	b9 1e       	adc	r11, r25
     a88:	2e 2d       	mov	r18, r14
     a8a:	a6 01       	movw	r20, r12
     a8c:	b3 01       	movw	r22, r6
     a8e:	c5 01       	movw	r24, r10
     a90:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
            clip_hline (x0 + xstart + xgap, y0 - y,        x0 + x + xgap, s_r);    // 1/8
     a94:	a4 01       	movw	r20, r8
     a96:	44 19       	sub	r20, r4
     a98:	55 09       	sbc	r21, r5
     a9a:	5c 83       	std	Y+4, r21	; 0x04
     a9c:	4b 83       	std	Y+3, r20	; 0x03
     a9e:	2e 2d       	mov	r18, r14
     aa0:	a6 01       	movw	r20, r12
     aa2:	6b 81       	ldd	r22, Y+3	; 0x03
     aa4:	7c 81       	ldd	r23, Y+4	; 0x04
     aa6:	c5 01       	movw	r24, r10
     aa8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
            clip_hline (x0 - xstart,        y0 + y + ygap, x0 - x,        s_r);    // 5/8
     aac:	51 01       	movw	r10, r2
     aae:	8c 89       	ldd	r24, Y+20	; 0x14
     ab0:	9d 89       	ldd	r25, Y+21	; 0x15
     ab2:	a8 1a       	sub	r10, r24
     ab4:	b9 0a       	sbc	r11, r25
     ab6:	2e 2d       	mov	r18, r14
     ab8:	a8 01       	movw	r20, r16
     aba:	b3 01       	movw	r22, r6
     abc:	c5 01       	movw	r24, r10
     abe:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
            clip_hline (x0 - xstart,        y0 - y,        x0 - x,        s_r);    // 7/8
     ac2:	2e 2d       	mov	r18, r14
     ac4:	a8 01       	movw	r20, r16
     ac6:	6b 81       	ldd	r22, Y+3	; 0x03
     ac8:	7c 81       	ldd	r23, Y+4	; 0x04
     aca:	c5 01       	movw	r24, r10
     acc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <clip_hline>
        }
        if (xstart < x)
     ad0:	ec 89       	ldd	r30, Y+20	; 0x14
     ad2:	fd 89       	ldd	r31, Y+21	; 0x15
     ad4:	e4 15       	cp	r30, r4
     ad6:	f5 05       	cpc	r31, r5
     ad8:	e4 f5       	brge	.+120    	; 0xb52 <_draw_circle+0x4f0>
                clip_hline (x0 - y, y0 - xstart,        x0 + y + xgap, s_r);
            }
            else
            {
                // Draw the lines
                clip_vline (x0 + y + xgap, y0 + xstart + ygap, y0 + xstart + ygap, s_r);
     ada:	ac 88       	ldd	r10, Y+20	; 0x14
     adc:	bd 88       	ldd	r11, Y+21	; 0x15
     ade:	a8 0c       	add	r10, r8
     ae0:	b9 1c       	adc	r11, r9
     ae2:	8d 81       	ldd	r24, Y+5	; 0x05
     ae4:	9e 81       	ldd	r25, Y+6	; 0x06
     ae6:	a8 0e       	add	r10, r24
     ae8:	b9 1e       	adc	r11, r25
     aea:	2e 2d       	mov	r18, r14
     aec:	a5 01       	movw	r20, r10
     aee:	b5 01       	movw	r22, r10
     af0:	c6 01       	movw	r24, r12
     af2:	0e 94 05 03 	call	0x60a	; 0x60a <clip_vline>
                clip_vline (x0 - y,        y0 + xstart + ygap, y0 + xstart + ygap, s_r);
     af6:	2e 2d       	mov	r18, r14
     af8:	a5 01       	movw	r20, r10
     afa:	b5 01       	movw	r22, r10
     afc:	c8 01       	movw	r24, r16
     afe:	0e 94 05 03 	call	0x60a	; 0x60a <clip_vline>
                clip_vline (x0 + y + xgap, y0 - xstart,        y0 - xstart,        s_r);  // 2/8
     b02:	ec 89       	ldd	r30, Y+20	; 0x14
     b04:	fd 89       	ldd	r31, Y+21	; 0x15
     b06:	8e 1a       	sub	r8, r30
     b08:	9f 0a       	sbc	r9, r31
     b0a:	2e 2d       	mov	r18, r14
     b0c:	a4 01       	movw	r20, r8
     b0e:	b4 01       	movw	r22, r8
     b10:	c6 01       	movw	r24, r12
     b12:	0e 94 05 03 	call	0x60a	; 0x60a <clip_vline>
                clip_vline (x0 - y,        y0 - xstart,        y0 - xstart,        s_r);
     b16:	2e 2d       	mov	r18, r14
     b18:	a4 01       	movw	r20, r8
     b1a:	b4 01       	movw	r22, r8
     b1c:	c8 01       	movw	r24, r16
            }
        }
    }
}
     b1e:	65 96       	adiw	r28, 0x15	; 21
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	df 90       	pop	r13
     b38:	cf 90       	pop	r12
     b3a:	bf 90       	pop	r11
     b3c:	af 90       	pop	r10
     b3e:	9f 90       	pop	r9
     b40:	8f 90       	pop	r8
     b42:	7f 90       	pop	r7
     b44:	6f 90       	pop	r6
     b46:	5f 90       	pop	r5
     b48:	4f 90       	pop	r4
     b4a:	3f 90       	pop	r3
     b4c:	2f 90       	pop	r2
            {
                // Draw the lines
                clip_vline (x0 + y + xgap, y0 + xstart + ygap, y0 + xstart + ygap, s_r);
                clip_vline (x0 - y,        y0 + xstart + ygap, y0 + xstart + ygap, s_r);
                clip_vline (x0 + y + xgap, y0 - xstart,        y0 - xstart,        s_r);  // 2/8
                clip_vline (x0 - y,        y0 - xstart,        y0 - xstart,        s_r);
     b4e:	0c 94 05 03 	jmp	0x60a	; 0x60a <clip_vline>
            }
        }
    }
}
     b52:	65 96       	adiw	r28, 0x15	; 21
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	df 90       	pop	r13
     b6c:	cf 90       	pop	r12
     b6e:	bf 90       	pop	r11
     b70:	af 90       	pop	r10
     b72:	9f 90       	pop	r9
     b74:	8f 90       	pop	r8
     b76:	7f 90       	pop	r7
     b78:	6f 90       	pop	r6
     b7a:	5f 90       	pop	r5
     b7c:	4f 90       	pop	r4
     b7e:	3f 90       	pop	r3
     b80:	2f 90       	pop	r2
     b82:	08 95       	ret

00000b84 <draw_mode>:
/// @param [in] mode The new drawing mode.
///
void
draw_mode (uint8_t mode)
{
    drawing_mode = mode;
     b84:	80 93 03 03 	sts	0x0303, r24
     b88:	08 95       	ret

00000b8a <draw_line>:
///                 0x80 when bit is set then the last pixel is not
///                      drawn. used for polygons.
///
void
draw_line (uint8_t x, uint8_t y, uint8_t x1, uint8_t y1, uint8_t s_r)
{
     b8a:	6f 92       	push	r6
     b8c:	7f 92       	push	r7
     b8e:	8f 92       	push	r8
     b90:	9f 92       	push	r9
     b92:	af 92       	push	r10
     b94:	bf 92       	push	r11
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	b8 2e       	mov	r11, r24
     ba8:	a6 2e       	mov	r10, r22
    int16_t deltay;                     // Difference in y;
    int8_t xinc;                        // X-coordinate increment.
    int8_t yinc;                        // X-coordinate increment.
    uint8_t ps_r;

    ps_r = ((~s_r ^ prefs_reverse) & MODE_NORMAL_MASK) | (s_r & MODE_MODIFIER);
     baa:	90 2e       	mov	r9, r16
     bac:	90 94       	com	r9
     bae:	80 91 e6 02 	lds	r24, 0x02E6
     bb2:	98 26       	eor	r9, r24
     bb4:	39 2d       	mov	r19, r9
     bb6:	31 70       	andi	r19, 0x01	; 1
     bb8:	93 2e       	mov	r9, r19
     bba:	80 2f       	mov	r24, r16
     bbc:	86 71       	andi	r24, 0x16	; 22
     bbe:	98 2a       	or	r9, r24
     bc0:	84 2f       	mov	r24, r20
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	cb 2d       	mov	r28, r11
     bc6:	d0 e0       	ldi	r29, 0x00	; 0

    // Sort out tge x values.
    if (x1 >= x)                        // The x-values are increasing
     bc8:	4b 15       	cp	r20, r11
     bca:	38 f0       	brcs	.+14     	; 0xbda <draw_line+0x50>
    {
        xinc = 1;
        deltax = x1 - x;                // The difference between the x's
     bcc:	ac 01       	movw	r20, r24
     bce:	4c 1b       	sub	r20, r28
     bd0:	5d 0b       	sbc	r21, r29
     bd2:	ea 01       	movw	r28, r20
    ps_r = ((~s_r ^ prefs_reverse) & MODE_NORMAL_MASK) | (s_r & MODE_MODIFIER);

    // Sort out tge x values.
    if (x1 >= x)                        // The x-values are increasing
    {
        xinc = 1;
     bd4:	77 24       	eor	r7, r7
     bd6:	73 94       	inc	r7
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <draw_line+0x58>
        deltax = x1 - x;                // The difference between the x's
    }
    else                                // The x-values are decreasing
    {
        xinc = -1;
        deltax = x - x1;
     bda:	c8 1b       	sub	r28, r24
     bdc:	d9 0b       	sbc	r29, r25
        xinc = 1;
        deltax = x1 - x;                // The difference between the x's
    }
    else                                // The x-values are decreasing
    {
        xinc = -1;
     bde:	77 24       	eor	r7, r7
     be0:	7a 94       	dec	r7
     be2:	82 2f       	mov	r24, r18
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	ea 2c       	mov	r14, r10
     be8:	f1 2c       	mov	r15, r1
        deltax = x - x1;
    }

    // Sort out the y value
    if (y1 >= y)                       // The y-values are increasing
     bea:	2a 15       	cp	r18, r10
     bec:	38 f0       	brcs	.+14     	; 0xbfc <draw_line+0x72>
    {
        yinc = 1;
        deltay = y1 - y;
     bee:	fc 01       	movw	r30, r24
     bf0:	ee 19       	sub	r30, r14
     bf2:	ff 09       	sbc	r31, r15
     bf4:	7f 01       	movw	r14, r30
    }

    // Sort out the y value
    if (y1 >= y)                       // The y-values are increasing
    {
        yinc = 1;
     bf6:	88 24       	eor	r8, r8
     bf8:	83 94       	inc	r8
     bfa:	04 c0       	rjmp	.+8      	; 0xc04 <draw_line+0x7a>
        deltay = y1 - y;
    }
    else                                // The y-values are decreasing
    {
        yinc = -1;
        deltay = y - y1;
     bfc:	e8 1a       	sub	r14, r24
     bfe:	f9 0a       	sbc	r15, r25
        yinc = 1;
        deltay = y1 - y;
    }
    else                                // The y-values are decreasing
    {
        yinc = -1;
     c00:	88 24       	eor	r8, r8
     c02:	8a 94       	dec	r8
        deltay = y - y1;
    }

    // There is at least one x-value for every y-value. Handle the incrementing
    // and decremening separately.
    if (deltax >= deltay)
     c04:	ce 15       	cp	r28, r14
     c06:	df 05       	cpc	r29, r15
     c08:	0c f4       	brge	.+2      	; 0xc0c <draw_line+0x82>
     c0a:	3e c0       	rjmp	.+124    	; 0xc88 <draw_line+0xfe>
        uint8_t xstart;                 // The x start position
        uint8_t written;                // Written the line

        // Calculate the Bresenham parameters
        denominator = deltax;           // The denominator
        numerator = deltax / 2;         // The numerator
     c0c:	6e 01       	movw	r12, r28
     c0e:	d7 ff       	sbrs	r29, 7
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <draw_line+0x8e>
     c12:	ff ef       	ldi	r31, 0xFF	; 255
     c14:	cf 1a       	sub	r12, r31
     c16:	df 0a       	sbc	r13, r31
     c18:	d5 94       	asr	r13
     c1a:	c7 94       	ror	r12
        numadd = deltay;                // Increment of the numerator
        numpixels = deltax;             // There are more x-values than y-values

        // If we are skipping the last pixel the decrement the write length.
        if ((s_r & MODE_LINE_SKIP_LAST) == 0)
     c1c:	07 fd       	sbrc	r16, 7
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <draw_line+0x9e>
            numpixels++;
     c20:	8e 01       	movw	r16, r28
     c22:	0f 5f       	subi	r16, 0xFF	; 255
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <draw_line+0xa0>
     c28:	8e 01       	movw	r16, r28

        xstart = x;
        written = numpixels - 1;
     c2a:	9f ef       	ldi	r25, 0xFF	; 255
     c2c:	90 0f       	add	r25, r16
                draw_hline (xstart, y, x, ps_r);

                y += yinc;              // Change the y as appropriate
                x += xinc;              // Increment x as required.

                xstart = x;             // New start position
     c2e:	8b 2d       	mov	r24, r11

        xstart = x;
        written = numpixels - 1;

        // Write all of the pixels
        while (--numpixels >= 0)
     c30:	01 50       	subi	r16, 0x01	; 1
     c32:	11 09       	sbc	r17, r1
     c34:	17 fd       	sbrc	r17, 7
     c36:	1a c0       	rjmp	.+52     	; 0xc6c <draw_line+0xe2>
        {
            numerator += numadd;        // Increase the numerator by the top of the fraction
     c38:	ce 0c       	add	r12, r14
     c3a:	df 1c       	adc	r13, r15
     c3c:	6b 2c       	mov	r6, r11
     c3e:	67 0c       	add	r6, r7
            if (numerator >= denominator) // Check if numerator >= denominator
     c40:	cc 16       	cp	r12, r28
     c42:	dd 06       	cpc	r13, r29
     c44:	8c f0       	brlt	.+34     	; 0xc68 <draw_line+0xde>
            {
                numerator -= denominator; // Calculate the new numerator value
     c46:	cc 1a       	sub	r12, r28
     c48:	dd 0a       	sbc	r13, r29
                draw_hline (xstart, y, x, ps_r);
     c4a:	e0 91 ef 02 	lds	r30, 0x02EF
     c4e:	f0 91 f0 02 	lds	r31, 0x02F0
     c52:	a5 91       	lpm	r26, Z+
     c54:	b4 91       	lpm	r27, Z
     c56:	29 2d       	mov	r18, r9
     c58:	4b 2d       	mov	r20, r11
     c5a:	6a 2d       	mov	r22, r10
     c5c:	fd 01       	movw	r30, r26
     c5e:	09 95       	icall

                y += yinc;              // Change the y as appropriate
     c60:	a8 0c       	add	r10, r8
                x += xinc;              // Increment x as required.
     c62:	b6 2c       	mov	r11, r6

                xstart = x;             // New start position
                written = numpixels;    // Save the write position
     c64:	90 2f       	mov	r25, r16
     c66:	e3 cf       	rjmp	.-58     	; 0xc2e <draw_line+0xa4>
            }
            else
                x += xinc;
     c68:	b6 2c       	mov	r11, r6
     c6a:	e2 cf       	rjmp	.-60     	; 0xc30 <draw_line+0xa6>
        }

        // Make sure that any line fragment has been flushed.
        if (written != 0)
     c6c:	99 23       	and	r25, r25
     c6e:	09 f4       	brne	.+2      	; 0xc72 <draw_line+0xe8>
     c70:	5a c0       	rjmp	.+180    	; 0xd26 <draw_line+0x19c>
            draw_hline (xstart, y, x - xinc, ps_r);
     c72:	e0 91 ef 02 	lds	r30, 0x02EF
     c76:	f0 91 f0 02 	lds	r31, 0x02F0
     c7a:	a5 91       	lpm	r26, Z+
     c7c:	b4 91       	lpm	r27, Z
     c7e:	4b 2d       	mov	r20, r11
     c80:	47 19       	sub	r20, r7
     c82:	29 2d       	mov	r18, r9
     c84:	6a 2d       	mov	r22, r10
     c86:	3f c0       	rjmp	.+126    	; 0xd06 <draw_line+0x17c>
        uint8_t ystart;                 // The y start position
        uint8_t written;                // Written the line

        // Calculate the Bresenham parameters
        denominator = deltay;
        numerator = deltay / 2;
     c88:	67 01       	movw	r12, r14
     c8a:	f7 fe       	sbrs	r15, 7
     c8c:	03 c0       	rjmp	.+6      	; 0xc94 <draw_line+0x10a>
     c8e:	ff ef       	ldi	r31, 0xFF	; 255
     c90:	cf 1a       	sub	r12, r31
     c92:	df 0a       	sbc	r13, r31
     c94:	d5 94       	asr	r13
     c96:	c7 94       	ror	r12
        numadd = deltax;
        numpixels = deltay;             // There are more y-values than x-values

        // If we are skipping the last pixel the decrement the write length.
        if ((s_r & MODE_LINE_SKIP_LAST) == 0)
     c98:	07 fd       	sbrc	r16, 7
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <draw_line+0x11a>
            numpixels++;
     c9c:	87 01       	movw	r16, r14
     c9e:	0f 5f       	subi	r16, 0xFF	; 255
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
     ca2:	01 c0       	rjmp	.+2      	; 0xca6 <draw_line+0x11c>
     ca4:	87 01       	movw	r16, r14

        ystart = y;
        written = numpixels - 1;
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	80 0f       	add	r24, r16

        // Write all of the pixels
        while (--numpixels >= 0)
     caa:	6a 2d       	mov	r22, r10
     cac:	01 50       	subi	r16, 0x01	; 1
     cae:	11 09       	sbc	r17, r1
     cb0:	17 fd       	sbrc	r17, 7
     cb2:	1c c0       	rjmp	.+56     	; 0xcec <draw_line+0x162>
        {
            // Increase the numerator by the top of the fraction
            numerator += numadd;
     cb4:	cc 0e       	add	r12, r28
     cb6:	dd 1e       	adc	r13, r29
     cb8:	6a 2c       	mov	r6, r10
     cba:	68 0c       	add	r6, r8
            if (numerator >= denominator) // Check if numerator >= denominator
     cbc:	ce 14       	cp	r12, r14
     cbe:	df 04       	cpc	r13, r15
     cc0:	9c f0       	brlt	.+38     	; 0xce8 <draw_line+0x15e>
            {
                numerator -= denominator; // Calculate the new numerator value
     cc2:	ce 18       	sub	r12, r14
     cc4:	df 08       	sbc	r13, r15
                draw_vline (x, ystart, y, ps_r);
     cc6:	e0 91 ef 02 	lds	r30, 0x02EF
     cca:	f0 91 f0 02 	lds	r31, 0x02F0
     cce:	3c 96       	adiw	r30, 0x0c	; 12
     cd0:	a5 91       	lpm	r26, Z+
     cd2:	b4 91       	lpm	r27, Z
     cd4:	29 2d       	mov	r18, r9
     cd6:	4a 2d       	mov	r20, r10
     cd8:	8b 2d       	mov	r24, r11
     cda:	fd 01       	movw	r30, r26
     cdc:	09 95       	icall

                x += xinc;              // Change the x as appropriate
     cde:	b7 0c       	add	r11, r7
                y += yinc;
     ce0:	66 2d       	mov	r22, r6

                ystart = y;             // New start position
                written = numpixels;    // Save the write position
     ce2:	80 2f       	mov	r24, r16
            {
                numerator -= denominator; // Calculate the new numerator value
                draw_vline (x, ystart, y, ps_r);

                x += xinc;              // Change the x as appropriate
                y += yinc;
     ce4:	a6 2c       	mov	r10, r6
     ce6:	e2 cf       	rjmp	.-60     	; 0xcac <draw_line+0x122>
                ystart = y;             // New start position
                written = numpixels;    // Save the write position
            }
            // Increment y.
            else
                y += yinc;
     ce8:	a6 2c       	mov	r10, r6
     cea:	e0 cf       	rjmp	.-64     	; 0xcac <draw_line+0x122>
        }

        // Ensure that all pixels are written
        if (written != 0)
     cec:	88 23       	and	r24, r24
     cee:	d9 f0       	breq	.+54     	; 0xd26 <draw_line+0x19c>
            draw_vline (x, ystart, y - yinc, ps_r);
     cf0:	e0 91 ef 02 	lds	r30, 0x02EF
     cf4:	f0 91 f0 02 	lds	r31, 0x02F0
     cf8:	3c 96       	adiw	r30, 0x0c	; 12
     cfa:	a5 91       	lpm	r26, Z+
     cfc:	b4 91       	lpm	r27, Z
     cfe:	4a 2d       	mov	r20, r10
     d00:	48 19       	sub	r20, r8
     d02:	29 2d       	mov	r18, r9
     d04:	8b 2d       	mov	r24, r11
     d06:	fd 01       	movw	r30, r26
    }
}
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	df 90       	pop	r13
     d16:	cf 90       	pop	r12
     d18:	bf 90       	pop	r11
     d1a:	af 90       	pop	r10
     d1c:	9f 90       	pop	r9
     d1e:	8f 90       	pop	r8
     d20:	7f 90       	pop	r7
     d22:	6f 90       	pop	r6
                y += yinc;
        }

        // Ensure that all pixels are written
        if (written != 0)
            draw_vline (x, ystart, y - yinc, ps_r);
     d24:	09 94       	ijmp
    }
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	df 90       	pop	r13
     d34:	cf 90       	pop	r12
     d36:	bf 90       	pop	r11
     d38:	af 90       	pop	r10
     d3a:	9f 90       	pop	r9
     d3c:	8f 90       	pop	r8
     d3e:	7f 90       	pop	r7
     d40:	6f 90       	pop	r6
     d42:	08 95       	ret

00000d44 <draw_lines>:
/// @param [in] mode The drawing mode.
/// @param [in] data The list of x,y coordinates. The last y coordinate is
///                  marked with the top bit set to 0x80.
void
draw_lines (uint8_t s_r, uint8_t x, uint8_t y, uint8_t *data)
{
     d44:	af 92       	push	r10
     d46:	bf 92       	push	r11
     d48:	df 92       	push	r13
     d4a:	ef 92       	push	r14
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	1f 92       	push	r1
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	d6 2e       	mov	r13, r22
     d5e:	64 2f       	mov	r22, r20
     d60:	59 01       	movw	r10, r18
    // Cache line and do not draw endpoint
    s_r |= MODE_LINE_SKIP_LAST;
     d62:	80 68       	ori	r24, 0x80	; 128
     d64:	f8 2e       	mov	r15, r24
    // Iterate over the rest of the coordinate until we have finished.
    do
    {
        uint8_t x1, y1;

        if (data != NULL)
     d66:	a1 14       	cp	r10, r1
     d68:	b1 04       	cpc	r11, r1
     d6a:	39 f0       	breq	.+14     	; 0xd7a <draw_lines+0x36>
        {
            x1 = *data++;
     d6c:	f5 01       	movw	r30, r10
     d6e:	e0 80       	ld	r14, Z
            y1 = *data++;
     d70:	11 81       	ldd	r17, Z+1	; 0x01
     d72:	c5 01       	movw	r24, r10
     d74:	02 96       	adiw	r24, 0x02	; 2
     d76:	5c 01       	movw	r10, r24
     d78:	08 c0       	rjmp	.+16     	; 0xd8a <draw_lines+0x46>
        }
        else
        {
            x1 = serial_getc (); // Save x
     d7a:	69 83       	std	Y+1, r22	; 0x01
     d7c:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
     d80:	e8 2e       	mov	r14, r24
            y1 = serial_getc (); // Save y
     d82:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
     d86:	18 2f       	mov	r17, r24
     d88:	69 81       	ldd	r22, Y+1	; 0x01
        }

        if ((y1 & 0x80) != 0)
     d8a:	17 ff       	sbrs	r17, 7
     d8c:	04 c0       	rjmp	.+8      	; 0xd96 <draw_lines+0x52>
        {
            y1 &= ~0x80;
     d8e:	1f 77       	andi	r17, 0x7F	; 127
            // Draw last point and flush cache.
            s_r &= ~MODE_LINE_SKIP_LAST;
     d90:	9f 2d       	mov	r25, r15
     d92:	9f 77       	andi	r25, 0x7F	; 127
     d94:	f9 2e       	mov	r15, r25
        }

        // Do the best form of line draw that we can
        draw_line (x, y, x1, y1, s_r);
     d96:	0f 2d       	mov	r16, r15
     d98:	21 2f       	mov	r18, r17
     d9a:	4e 2d       	mov	r20, r14
     d9c:	8d 2d       	mov	r24, r13
     d9e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <draw_line>
        x = x1;
        y = y1;
    }
    while ((s_r & MODE_LINE_SKIP_LAST) != 0);
     da2:	f7 fe       	sbrs	r15, 7
     da4:	03 c0       	rjmp	.+6      	; 0xdac <draw_lines+0x68>
        }

        // Do the best form of line draw that we can
        draw_line (x, y, x1, y1, s_r);
        x = x1;
        y = y1;
     da6:	61 2f       	mov	r22, r17
            s_r &= ~MODE_LINE_SKIP_LAST;
        }

        // Do the best form of line draw that we can
        draw_line (x, y, x1, y1, s_r);
        x = x1;
     da8:	de 2c       	mov	r13, r14
     daa:	dd cf       	rjmp	.-70     	; 0xd66 <draw_lines+0x22>
        y = y1;
    }
    while ((s_r & MODE_LINE_SKIP_LAST) != 0);
}
     dac:	0f 90       	pop	r0
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	df 90       	pop	r13
     dbc:	bf 90       	pop	r11
     dbe:	af 90       	pop	r10
     dc0:	08 95       	ret

00000dc2 <draw_pixel>:
/// @param [in] y The y-coordinate
/// @param [in] s_r The drawing mode.
void
draw_pixel (uint8_t x, uint8_t y, uint8_t s_r)
{
    if (x_valid(x) && y_valid(y))
     dc2:	90 91 02 03 	lds	r25, 0x0302
     dc6:	89 17       	cp	r24, r25
     dc8:	e0 f4       	brcc	.+56     	; 0xe02 <draw_pixel+0x40>
     dca:	26 2f       	mov	r18, r22
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	e0 91 f1 02 	lds	r30, 0x02F1
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	f1 95       	neg	r31
     dd6:	e1 95       	neg	r30
     dd8:	f1 09       	sbc	r31, r1
     dda:	2e 23       	and	r18, r30
     ddc:	3f 23       	and	r19, r31
     dde:	23 2b       	or	r18, r19
     de0:	81 f4       	brne	.+32     	; 0xe02 <draw_pixel+0x40>
    {
        // Compute the current mode based on the reverse preference.
        s_r = ((~s_r ^ prefs_reverse) & MODE_NORMAL_MASK) | (s_r & ~MODE_NORMAL_MASK);
        lcd_set_pixel (x, y, s_r);
     de2:	e0 91 ef 02 	lds	r30, 0x02EF
     de6:	f0 91 f0 02 	lds	r31, 0x02F0
     dea:	38 96       	adiw	r30, 0x08	; 8
     dec:	25 91       	lpm	r18, Z+
     dee:	34 91       	lpm	r19, Z
draw_pixel (uint8_t x, uint8_t y, uint8_t s_r)
{
    if (x_valid(x) && y_valid(y))
    {
        // Compute the current mode based on the reverse preference.
        s_r = ((~s_r ^ prefs_reverse) & MODE_NORMAL_MASK) | (s_r & ~MODE_NORMAL_MASK);
     df0:	94 2f       	mov	r25, r20
     df2:	90 95       	com	r25
     df4:	50 91 e6 02 	lds	r21, 0x02E6
     df8:	95 27       	eor	r25, r21
     dfa:	90 fb       	bst	r25, 0
     dfc:	40 f9       	bld	r20, 0
        lcd_set_pixel (x, y, s_r);
     dfe:	f9 01       	movw	r30, r18
     e00:	09 94       	ijmp
     e02:	08 95       	ret

00000e04 <draw_circle>:
// Noted that the Sparkfun circle algorithm is a little easier however the
// circle quality is dubious at a small radius so we keep the existing one
// used by Jennifer Holt.
void
draw_circle (uint8_t xin, uint8_t yin, uint8_t rin, uint8_t s_r)
{
     e04:	ef 92       	push	r14
     e06:	0f 93       	push	r16
    // Invoke the _draw_circle function
    _draw_circle (xin, yin, 0, 0, rin, s_r);
     e08:	e2 2e       	mov	r14, r18
     e0a:	04 2f       	mov	r16, r20
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	0e 94 31 03 	call	0x662	; 0x662 <_draw_circle>
}
     e14:	0f 91       	pop	r16
     e16:	ef 90       	pop	r14
     e18:	08 95       	ret

00000e1a <draw_rbox>:
 * @param radius The radius of the corner.
 * @param s_r The mode to draw the line
 */
void
draw_rbox (uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t radius, uint8_t s_r)
{
     e1a:	ef 92       	push	r14
     e1c:	0f 93       	push	r16
     e1e:	90 2f       	mov	r25, r16
    uint8_t radius2 = radius << 1;
     e20:	30 2f       	mov	r19, r16
     e22:	33 0f       	add	r19, r19
    uint8_t xdiff;
    uint8_t ydiff;
    uint8_t diff;

    // Sort the x and y coordinates into ascending order.
    if (x1 > x2)
     e24:	48 17       	cp	r20, r24
     e26:	18 f4       	brcc	.+6      	; 0xe2e <draw_rbox+0x14>
        swap_bytes (x1, x2);
     e28:	84 27       	eor	r24, r20
     e2a:	48 27       	eor	r20, r24
     e2c:	84 27       	eor	r24, r20
    if (y1 > y2)
     e2e:	26 17       	cp	r18, r22
     e30:	18 f4       	brcc	.+6      	; 0xe38 <draw_rbox+0x1e>
        swap_bytes (y1, y2);
     e32:	62 27       	eor	r22, r18
     e34:	26 27       	eor	r18, r22
     e36:	62 27       	eor	r22, r18

    // Determine the maximum radius we can deal with.
    xdiff = x2 - x1;
     e38:	48 1b       	sub	r20, r24
    ydiff = y2 - y1;
     e3a:	26 1b       	sub	r18, r22
     e3c:	52 2f       	mov	r21, r18
     e3e:	42 17       	cp	r20, r18
     e40:	08 f4       	brcc	.+2      	; 0xe44 <draw_rbox+0x2a>
     e42:	54 2f       	mov	r21, r20
    diff = xdiff;
    if (ydiff < xdiff)
        diff = ydiff;

    // Radius is larger than the box, reduce the radius to fit the box.
    if (radius2 > diff)
     e44:	53 17       	cp	r21, r19
     e46:	18 f4       	brcc	.+6      	; 0xe4e <draw_rbox+0x34>
    {
        radius = diff >> 1;
     e48:	95 2f       	mov	r25, r21
     e4a:	96 95       	lsr	r25
     e4c:	35 2f       	mov	r19, r21
        radius2 = diff;
    }

    // Invoke the _draw_circle function
    _draw_circle (x1 + radius, y1 + radius,
     e4e:	23 1b       	sub	r18, r19
     e50:	43 1b       	sub	r20, r19
     e52:	69 0f       	add	r22, r25
     e54:	09 2f       	mov	r16, r25
     e56:	89 0f       	add	r24, r25
     e58:	0e 94 31 03 	call	0x662	; 0x662 <_draw_circle>
                  xdiff - radius2, ydiff - radius2,
                  radius, s_r);
}
     e5c:	0f 91       	pop	r16
     e5e:	ef 90       	pop	r14
     e60:	08 95       	ret

00000e62 <draw_polygon>:
/// @param [in] mode The drawing mode.
/// @param [in] data The list of x,y coordinates. The last y coordinate is
///                  marked with the top bit set to 0x80.
void
draw_polygon (uint8_t s_r, uint8_t x, uint8_t y, uint8_t *data)
{
     e62:	2f 92       	push	r2
     e64:	3f 92       	push	r3
     e66:	4f 92       	push	r4
     e68:	5f 92       	push	r5
     e6a:	6f 92       	push	r6
     e6c:	7f 92       	push	r7
     e6e:	8f 92       	push	r8
     e70:	9f 92       	push	r9
     e72:	af 92       	push	r10
     e74:	bf 92       	push	r11
     e76:	cf 92       	push	r12
     e78:	df 92       	push	r13
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	29 97       	sbiw	r28, 0x09	; 9
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	6c 83       	std	Y+4, r22	; 0x04
     e98:	b4 2e       	mov	r11, r20
     e9a:	39 01       	movw	r6, r18
    if (s_r & MODE_FILL)
     e9c:	83 ff       	sbrs	r24, 3
     e9e:	bb c1       	rjmp	.+886    	; 0x1216 <draw_polygon+0x3b4>
    {
        // Correct the reverse flag
        s_r = ((~s_r ^ prefs_reverse) & MODE_NORMAL_MASK) | (s_r & ~MODE_NORMAL_MASK);
     ea0:	98 2f       	mov	r25, r24
     ea2:	90 95       	com	r25
     ea4:	20 91 e6 02 	lds	r18, 0x02E6
     ea8:	92 27       	eor	r25, r18
     eaa:	98 2e       	mov	r9, r24
     eac:	90 fb       	bst	r25, 0
     eae:	90 f8       	bld	r9, 0
    int8_t direction_changed = 0;       // Direction has changed.

    // Initialise our line buffer
    write_ystart = y;
    write_yend = y;
    if (y_valid(y))
     eb0:	24 2f       	mov	r18, r20
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	80 91 f1 02 	lds	r24, 0x02F1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	91 95       	neg	r25
     ebc:	81 95       	neg	r24
     ebe:	91 09       	sbc	r25, r1
     ec0:	82 23       	and	r24, r18
     ec2:	93 23       	and	r25, r19
     ec4:	89 2b       	or	r24, r25
     ec6:	29 f4       	brne	.+10     	; 0xed2 <draw_polygon+0x70>
        draw_buffer[y] = 0xff;
     ec8:	f9 01       	movw	r30, r18
     eca:	ec 5f       	subi	r30, 0xFC	; 252
     ecc:	fc 4f       	sbci	r31, 0xFC	; 252
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	80 83       	st	Z, r24
/// @param [in] mode The drawing mode.
/// @param [in] data The list of x,y coordinates. The last y coordinate is
///                  marked with the top bit set to 0x80.
void
draw_polygon (uint8_t s_r, uint8_t x, uint8_t y, uint8_t *data)
{
     ed2:	bb 82       	std	Y+3, r11	; 0x03
     ed4:	ba 82       	std	Y+2, r11	; 0x02
     ed6:	3b 2c       	mov	r3, r11
     ed8:	dc 80       	ldd	r13, Y+4	; 0x04
     eda:	1d 82       	std	Y+5, r1	; 0x05
     edc:	cc 24       	eor	r12, r12
     ede:	ca 94       	dec	r12
     ee0:	1e 82       	std	Y+6, r1	; 0x06
                // We are about to increment y and move to the next column.
                // Either save the point or draw the point.
                if (buffer != 0xff)
                {
                    draw_hline (x, y, buffer, s_r);
                    buffer = 0xff;
     ee2:	88 24       	eor	r8, r8
     ee4:	8a 94       	dec	r8
        int16_t deltay;                 // Difference in y;
        int8_t xinc;                    // X-coordinate increment.
        int8_t yinc;                    // X-coordinate increment.

        // Get the end marker out of the last coordinate and normalise
        if (last_coord == 0)
     ee6:	3e 81       	ldd	r19, Y+6	; 0x06
     ee8:	31 11       	cpse	r19, r1
     eea:	0b c0       	rjmp	.+22     	; 0xf02 <draw_polygon+0xa0>
        {
            // Read data from serial.
            x1 = serial_getc();
     eec:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
     ef0:	a8 2e       	mov	r10, r24
            y1 = serial_getc();
     ef2:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>

            // Handle the end of the polygon and strip out the signalling.
            last_coord = y1 & 0x80;
     ef6:	58 2f       	mov	r21, r24
     ef8:	50 78       	andi	r21, 0x80	; 128
     efa:	5e 83       	std	Y+6, r21	; 0x06
            y1 &= ~0x80;
     efc:	8f 77       	andi	r24, 0x7F	; 127
     efe:	28 2e       	mov	r2, r24
     f00:	05 c0       	rjmp	.+10     	; 0xf0c <draw_polygon+0xaa>
        else
        {
            // We have processed the last coordinate. Draw a line from the
            // last coordinate to the first coordinate.
            x1 = xfirst;
            y1 = yfirst;
     f02:	2b 2c       	mov	r2, r11
        }
        else
        {
            // We have processed the last coordinate. Draw a line from the
            // last coordinate to the first coordinate.
            x1 = xfirst;
     f04:	ac 80       	ldd	r10, Y+4	; 0x04
            y1 = yfirst;
            yfirst |= 0x80;             // mark as end the loop
     f06:	8b 2d       	mov	r24, r11
     f08:	80 68       	ori	r24, 0x80	; 128
     f0a:	b8 2e       	mov	r11, r24
     f0c:	03 2d       	mov	r16, r3
     f0e:	10 e0       	ldi	r17, 0x00	; 0
        // We skip the direction processing and will effectively carry the
        // direction change to any next line segment.
        //
        // Ignore all horizontal lines as the x coordinates will be repeated
        // on another coordinate. Sort out the y values.
        if (y == y1)
     f10:	32 10       	cpse	r3, r2
     f12:	2a c0       	rjmp	.+84     	; 0xf68 <draw_polygon+0x106>
        {
            uint8_t xstart;
            uint8_t xend;
            uint8_t buffer = draw_buffer[y];
     f14:	f8 01       	movw	r30, r16
     f16:	ec 5f       	subi	r30, 0xFC	; 252
     f18:	fc 4f       	sbci	r31, 0xFC	; 252
     f1a:	80 81       	ld	r24, Z

            // Throw out a coincidental point.
            if (x == x1)
     f1c:	da 14       	cp	r13, r10
     f1e:	09 f4       	brne	.+2      	; 0xf22 <draw_polygon+0xc0>
     f20:	4a c1       	rjmp	.+660    	; 0x11b6 <draw_polygon+0x354>
                continue;               // This is the same point, discard.

            // Determine the direction of the line from x
            if (x > x1)
     f22:	ad 14       	cp	r10, r13
     f24:	58 f4       	brcc	.+22     	; 0xf3c <draw_polygon+0xda>
            {
                // Going left, this is backwards i.e. (x1,y) <--- (x,y)

                // If the direction is reverse then do not do anything as the
                // next line segment will process the start of line.
                if (direction <= 0)
     f26:	1c 14       	cp	r1, r12
     f28:	0c f0       	brlt	.+2      	; 0xf2c <draw_polygon+0xca>
     f2a:	45 c1       	rjmp	.+650    	; 0x11b6 <draw_polygon+0x354>
                    goto skip_line;

                // Otherwise draw the line. If the draw_buffer is defined
                // then advance the draw buffer position to the end point.
                if ((buffer != 0xff) && (buffer >= x))
     f2c:	8f 3f       	cpi	r24, 0xFF	; 255
     f2e:	21 f0       	breq	.+8      	; 0xf38 <draw_polygon+0xd6>
     f30:	8d 15       	cp	r24, r13
     f32:	10 f0       	brcs	.+4      	; 0xf38 <draw_polygon+0xd6>
                {
                    xstart = buffer;
                    draw_buffer[y] = 0xff /* x1*/;
     f34:	80 82       	st	Z, r8
     f36:	d8 2e       	mov	r13, r24
                }
                else
                    xstart = x;
                xend = x1 + 1;
     f38:	41 e0       	ldi	r20, 0x01	; 1
     f3a:	09 c0       	rjmp	.+18     	; 0xf4e <draw_polygon+0xec>
            {
                // Going right, this is forwards. i.e. (x,y) ---> (x1,y)

                // If the direction is currently forward then do not do
                // anything as the next line segment will process the line.
                if (direction != 0)
     f3c:	c1 10       	cpse	r12, r1
     f3e:	3b c1       	rjmp	.+630    	; 0x11b6 <draw_polygon+0x354>
                    goto skip_line;

                // Otherwise draw the line. If the draw_buffer is defined
                // then advance the draw buffer position to the end point.
                if ((buffer != 0xff) && (buffer <= x))
     f40:	8f 3f       	cpi	r24, 0xFF	; 255
     f42:	21 f0       	breq	.+8      	; 0xf4c <draw_polygon+0xea>
     f44:	d8 16       	cp	r13, r24
     f46:	10 f0       	brcs	.+4      	; 0xf4c <draw_polygon+0xea>
                {
                    xstart = buffer;
                    draw_buffer[y] = 0xff /* x1*/;
     f48:	80 82       	st	Z, r8
     f4a:	d8 2e       	mov	r13, r24
                }
                else
                    xstart = x;
                xend = x1 - 1;
     f4c:	4f ef       	ldi	r20, 0xFF	; 255
     f4e:	4a 0d       	add	r20, r10
            }
            draw_hline (xstart, y, xend, s_r);
     f50:	e0 91 ef 02 	lds	r30, 0x02EF
     f54:	f0 91 f0 02 	lds	r31, 0x02F0
     f58:	a5 91       	lpm	r26, Z+
     f5a:	b4 91       	lpm	r27, Z
     f5c:	29 2d       	mov	r18, r9
     f5e:	63 2d       	mov	r22, r3
     f60:	8d 2d       	mov	r24, r13
     f62:	fd 01       	movw	r30, r26
     f64:	09 95       	icall
     f66:	27 c1       	rjmp	.+590    	; 0x11b6 <draw_polygon+0x354>
     f68:	82 2d       	mov	r24, r2
     f6a:	90 e0       	ldi	r25, 0x00	; 0

            // Advance the point.
skip_line:  x = x1;                     // Move the x to the next point.
            continue;                   // Skip any drawing, not processed.
        }
        else if (y1 > y)                // The y-values are increasing
     f6c:	32 14       	cp	r3, r2
     f6e:	30 f5       	brcc	.+76     	; 0xfbc <draw_polygon+0x15a>
        {
            yinc = 1;
            deltay = y1 - y;            // The difference between the y's
     f70:	2c 01       	movw	r4, r24
     f72:	40 1a       	sub	r4, r16
     f74:	51 0a       	sbc	r5, r17
            // If y is increasing downwards then grow the buffer.
            while ((y1 > write_yend) && (write_yend < y_dim - 1))
     f76:	80 91 f1 02 	lds	r24, 0x02F1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	5b 81       	ldd	r21, Y+3	; 0x03
     f80:	52 15       	cp	r21, r2
     f82:	30 f0       	brcs	.+12     	; 0xf90 <draw_polygon+0x12e>
                draw_buffer [++write_yend] = 0xff;

            // Going down, this is forwards
            if (direction >= 0)
     f84:	8f ef       	ldi	r24, 0xFF	; 255
                direction_changed = direction ^ 1;
     f86:	91 e0       	ldi	r25, 0x01	; 1
            // If y is increasing downwards then grow the buffer.
            while ((y1 > write_yend) && (write_yend < y_dim - 1))
                draw_buffer [++write_yend] = 0xff;

            // Going down, this is forwards
            if (direction >= 0)
     f88:	c8 12       	cpse	r12, r24
     f8a:	11 c0       	rjmp	.+34     	; 0xfae <draw_polygon+0x14c>
skip_line:  x = x1;                     // Move the x to the next point.
            continue;                   // Skip any drawing, not processed.
        }
        else if (y1 > y)                // The y-values are increasing
        {
            yinc = 1;
     f8c:	99 83       	std	Y+1, r25	; 0x01
     f8e:	13 c0       	rjmp	.+38     	; 0xfb6 <draw_polygon+0x154>
            deltay = y1 - y;            // The difference between the y's
            // If y is increasing downwards then grow the buffer.
            while ((y1 > write_yend) && (write_yend < y_dim - 1))
     f90:	5b 81       	ldd	r21, Y+3	; 0x03
     f92:	25 2f       	mov	r18, r21
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	28 17       	cp	r18, r24
     f98:	39 07       	cpc	r19, r25
     f9a:	a4 f7       	brge	.-24     	; 0xf84 <draw_polygon+0x122>
                draw_buffer [++write_yend] = 0xff;
     f9c:	3b 81       	ldd	r19, Y+3	; 0x03
     f9e:	3f 5f       	subi	r19, 0xFF	; 255
     fa0:	3b 83       	std	Y+3, r19	; 0x03
     fa2:	e3 2f       	mov	r30, r19
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	ec 5f       	subi	r30, 0xFC	; 252
     fa8:	fc 4f       	sbci	r31, 0xFC	; 252
     faa:	80 82       	st	Z, r8
     fac:	e8 cf       	rjmp	.-48     	; 0xf7e <draw_polygon+0x11c>

            // Going down, this is forwards
            if (direction >= 0)
                direction_changed = direction ^ 1;
     fae:	9c 25       	eor	r25, r12
     fb0:	9d 83       	std	Y+5, r25	; 0x05
skip_line:  x = x1;                     // Move the x to the next point.
            continue;                   // Skip any drawing, not processed.
        }
        else if (y1 > y)                // The y-values are increasing
        {
            yinc = 1;
     fb2:	31 e0       	ldi	r19, 0x01	; 1
     fb4:	39 83       	std	Y+1, r19	; 0x01
                draw_buffer [++write_yend] = 0xff;

            // Going down, this is forwards
            if (direction >= 0)
                direction_changed = direction ^ 1;
            direction = 1;
     fb6:	cc 24       	eor	r12, r12
     fb8:	c3 94       	inc	r12
     fba:	1b c0       	rjmp	.+54     	; 0xff2 <draw_polygon+0x190>
        }
        else                            // The y-values are decreasing
        {
            yinc = -1;
            deltay = y - y1;
     fbc:	28 01       	movw	r4, r16
     fbe:	48 1a       	sub	r4, r24
     fc0:	59 0a       	sbc	r5, r25
            // If the y is decreasing upwards then grow the buffer
            while ((y1 < write_ystart) && (write_ystart > 0))
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	29 16       	cp	r2, r25
     fc6:	58 f4       	brcc	.+22     	; 0xfde <draw_polygon+0x17c>
     fc8:	99 23       	and	r25, r25
     fca:	49 f0       	breq	.+18     	; 0xfde <draw_polygon+0x17c>
                draw_buffer [--write_ystart] = 0xff;
     fcc:	5a 81       	ldd	r21, Y+2	; 0x02
     fce:	51 50       	subi	r21, 0x01	; 1
     fd0:	5a 83       	std	Y+2, r21	; 0x02
     fd2:	e5 2f       	mov	r30, r21
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	ec 5f       	subi	r30, 0xFC	; 252
     fd8:	fc 4f       	sbci	r31, 0xFC	; 252
     fda:	80 82       	st	Z, r8
     fdc:	f2 cf       	rjmp	.-28     	; 0xfc2 <draw_polygon+0x160>

            // Going up, this is backwards
            if (direction >= 0)
     fde:	af ef       	ldi	r26, 0xFF	; 255
     fe0:	ca 12       	cpse	r12, r26
     fe2:	03 c0       	rjmp	.+6      	; 0xfea <draw_polygon+0x188>
                direction_changed = direction ^ 1;
            direction = 1;
        }
        else                            // The y-values are decreasing
        {
            yinc = -1;
     fe4:	3f ef       	ldi	r19, 0xFF	; 255
     fe6:	39 83       	std	Y+1, r19	; 0x01
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <draw_polygon+0x18e>
            // If the y is decreasing upwards then grow the buffer
            while ((y1 < write_ystart) && (write_ystart > 0))
                draw_buffer [--write_ystart] = 0xff;

            // Going up, this is backwards
            if (direction >= 0)
     fea:	cd 82       	std	Y+5, r12	; 0x05
                direction_changed = direction ^ 1;
            direction = 1;
        }
        else                            // The y-values are decreasing
        {
            yinc = -1;
     fec:	5f ef       	ldi	r21, 0xFF	; 255
     fee:	59 83       	std	Y+1, r21	; 0x01
                draw_buffer [--write_ystart] = 0xff;

            // Going up, this is backwards
            if (direction >= 0)
                direction_changed = direction ^ 0;
            direction = 0;
     ff0:	c1 2c       	mov	r12, r1
     ff2:	2a 2d       	mov	r18, r10
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4d 2d       	mov	r20, r13
     ff8:	50 e0       	ldi	r21, 0x00	; 0
        }

        // Sort out the x values
        if (x1 >= x)                       // The x-values are increasing
     ffa:	ad 14       	cp	r10, r13
     ffc:	40 f0       	brcs	.+16     	; 0x100e <draw_polygon+0x1ac>
        {
            if (x1 == x)
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	ad 10       	cpse	r10, r13
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <draw_polygon+0x1a4>
    1004:	90 e0       	ldi	r25, 0x00	; 0
                xinc = 0;
            else
                xinc = 1;
            deltax = x1 - x;
    1006:	39 01       	movw	r6, r18
    1008:	64 1a       	sub	r6, r20
    100a:	75 0a       	sbc	r7, r21
    100c:	04 c0       	rjmp	.+8      	; 0x1016 <draw_polygon+0x1b4>
        }
        else                                // The y-values are decreasing
        {
            xinc = -1;
            deltax = x - x1;
    100e:	3a 01       	movw	r6, r20
    1010:	62 1a       	sub	r6, r18
    1012:	73 0a       	sbc	r7, r19
                xinc = 1;
            deltax = x1 - x;
        }
        else                                // The y-values are decreasing
        {
            xinc = -1;
    1014:	9f ef       	ldi	r25, 0xFF	; 255
         * not plot. We need some special handling because we only visit this
         * pixel once. If draw_the buffer[y] is not initialised then write
         * our current y value, this is the end of the last line. if the
         * buffer[y] is valid then we need to draw a line to the x position
         * in the buffer. */
        if (direction_changed)
    1016:	3d 81       	ldd	r19, Y+5	; 0x05
    1018:	33 23       	and	r19, r19
    101a:	61 f1       	breq	.+88     	; 0x1074 <draw_polygon+0x212>
        {
            uint8_t buffer = draw_buffer[y];
    101c:	0c 5f       	subi	r16, 0xFC	; 252
    101e:	1c 4f       	sbci	r17, 0xFC	; 252
    1020:	d8 01       	movw	r26, r16
    1022:	4c 91       	ld	r20, X
            // Handle the special case of internal and corners with care, we
            // do not want to promote drawing for an internal corner.
            // On internal corners then do not process.

            // Going forwards
            if (direction == 1)
    1024:	b1 e0       	ldi	r27, 0x01	; 1
    1026:	cb 12       	cpse	r12, r27
    1028:	0e c0       	rjmp	.+28     	; 0x1046 <draw_polygon+0x1e4>
            {
                if (buffer == 0xff)
    102a:	4f 3f       	cpi	r20, 0xFF	; 255
    102c:	71 f0       	breq	.+28     	; 0x104a <draw_polygon+0x1e8>
                    draw_buffer[y] = x;
                else if (buffer > x)
    102e:	d4 16       	cp	r13, r20
    1030:	08 f5       	brcc	.+66     	; 0x1074 <draw_polygon+0x212>
                {
                    draw_hline (x+1, y, buffer, s_r);
    1032:	e0 91 ef 02 	lds	r30, 0x02EF
    1036:	f0 91 f0 02 	lds	r31, 0x02F0
    103a:	a5 91       	lpm	r26, Z+
    103c:	b4 91       	lpm	r27, Z
    103e:	29 2d       	mov	r18, r9
    1040:	63 2d       	mov	r22, r3
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	10 c0       	rjmp	.+32     	; 0x1066 <draw_polygon+0x204>
                }
            }
            // Going backwards
            else
            {
                if (buffer == 0xff)
    1046:	4f 3f       	cpi	r20, 0xFF	; 255
    1048:	19 f4       	brne	.+6      	; 0x1050 <draw_polygon+0x1ee>
                    draw_buffer[y] = x;
    104a:	f8 01       	movw	r30, r16
    104c:	d0 82       	st	Z, r13
    104e:	12 c0       	rjmp	.+36     	; 0x1074 <draw_polygon+0x212>
                else if (buffer < x)
    1050:	4d 15       	cp	r20, r13
    1052:	80 f4       	brcc	.+32     	; 0x1074 <draw_polygon+0x212>
                {
                    draw_hline (x-1, y, buffer, s_r);
    1054:	e0 91 ef 02 	lds	r30, 0x02EF
    1058:	f0 91 f0 02 	lds	r31, 0x02F0
    105c:	a5 91       	lpm	r26, Z+
    105e:	b4 91       	lpm	r27, Z
    1060:	29 2d       	mov	r18, r9
    1062:	63 2d       	mov	r22, r3
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	8d 0d       	add	r24, r13
    1068:	9f 83       	std	Y+7, r25	; 0x07
    106a:	fd 01       	movw	r30, r26
    106c:	09 95       	icall
                    draw_buffer[y] = 0xff;
    106e:	d8 01       	movw	r26, r16
    1070:	8c 92       	st	X, r8
    1072:	9f 81       	ldd	r25, Y+7	; 0x07
            }
        }

        // There is at least one x-value for every y-value. Handle the incrementing
        // and decremening separately.
        if (deltax >= deltay)
    1074:	64 14       	cp	r6, r4
    1076:	75 04       	cpc	r7, r5
    1078:	0c f4       	brge	.+2      	; 0x107c <draw_polygon+0x21a>
    107a:	61 c0       	rjmp	.+194    	; 0x113e <draw_polygon+0x2dc>
            int16_t numpixels;               // Number of pixels to write.
            uint8_t xstart;             // X start point

            // Calculate the Bresenham parameters
            denominator = deltax;           // The denominator
            numerator = deltax / 2;         // The numerator
    107c:	93 01       	movw	r18, r6
    107e:	77 fe       	sbrs	r7, 7
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <draw_polygon+0x224>
    1082:	2f 5f       	subi	r18, 0xFF	; 255
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	f9 01       	movw	r30, r18
    1088:	f5 95       	asr	r31
    108a:	e7 95       	ror	r30
    108c:	f9 87       	std	Y+9, r31	; 0x09
    108e:	e8 87       	std	Y+8, r30	; 0x08
    1090:	8d 2d       	mov	r24, r13
    1092:	73 01       	movw	r14, r6
            numadd = deltay;                // Increment of the numerator
            numpixels = deltax;             // There are more x-values than y-values -1
            xstart = x;                 // Save the start point

            // Write all of the pixels EXCLUDING the last pixel of the line.
            while (--numpixels >= 0)
    1094:	41 e0       	ldi	r20, 0x01	; 1
    1096:	e4 1a       	sub	r14, r20
    1098:	f1 08       	sbc	r15, r1
    109a:	f7 fc       	sbrc	r15, 7
    109c:	37 c0       	rjmp	.+110    	; 0x110c <draw_polygon+0x2aa>
            {
                numerator += numadd;          // Increase the numerator by the top of the fraction
    109e:	28 85       	ldd	r18, Y+8	; 0x08
    10a0:	39 85       	ldd	r19, Y+9	; 0x09
    10a2:	24 0d       	add	r18, r4
    10a4:	35 1d       	adc	r19, r5
    10a6:	39 87       	std	Y+9, r19	; 0x09
    10a8:	28 87       	std	Y+8, r18	; 0x08
                if (numerator >= denominator) // Check if numerator >= denominator
    10aa:	26 15       	cp	r18, r6
    10ac:	37 05       	cpc	r19, r7
    10ae:	64 f1       	brlt	.+88     	; 0x1108 <draw_polygon+0x2a6>
                    uint8_t buffer;

                    // If we are going backwards with a positive increment or
                    // going forwards with a negative increment then save the
                    // start x position for plotting.
                    if (((direction == 1) && (xinc > 0)) ||
    10b0:	31 e0       	ldi	r19, 0x01	; 1
    10b2:	c3 12       	cpse	r12, r19
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <draw_polygon+0x25a>
    10b6:	91 30       	cpi	r25, 0x01	; 1
    10b8:	19 f0       	breq	.+6      	; 0x10c0 <draw_polygon+0x25e>
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <draw_polygon+0x260>
                        ((direction == 0) && (xinc < 0)))
    10bc:	9f 3f       	cpi	r25, 0xFF	; 255
    10be:	09 f4       	brne	.+2      	; 0x10c2 <draw_polygon+0x260>
    10c0:	8d 2d       	mov	r24, r13
                        xstart = x;

                    // This is the only position where y changes. Flush out
                    // the last y change before we increment it.
                    buffer = draw_buffer[y];
    10c2:	03 2d       	mov	r16, r3
    10c4:	10 e0       	ldi	r17, 0x00	; 0
    10c6:	0c 5f       	subi	r16, 0xFC	; 252
    10c8:	1c 4f       	sbci	r17, 0xFC	; 252
    10ca:	d8 01       	movw	r26, r16
    10cc:	4c 91       	ld	r20, X
                    if (buffer != 0xff)
    10ce:	4f 3f       	cpi	r20, 0xFF	; 255
    10d0:	69 f0       	breq	.+26     	; 0x10ec <draw_polygon+0x28a>
                    {
                        // Draw the horizontal line to fill the column and
                        // clear the y buffer
                        draw_hline (xstart, y, buffer, s_r);
    10d2:	e0 91 ef 02 	lds	r30, 0x02EF
    10d6:	f0 91 f0 02 	lds	r31, 0x02F0
    10da:	a5 91       	lpm	r26, Z+
    10dc:	b4 91       	lpm	r27, Z
    10de:	29 2d       	mov	r18, r9
    10e0:	63 2d       	mov	r22, r3
    10e2:	9f 83       	std	Y+7, r25	; 0x07
    10e4:	fd 01       	movw	r30, r26
    10e6:	09 95       	icall
                        xstart = 0xff;
    10e8:	8f ef       	ldi	r24, 0xFF	; 255
    10ea:	9f 81       	ldd	r25, Y+7	; 0x07
                    }
                    draw_buffer[y] = xstart;
    10ec:	d8 01       	movw	r26, r16
    10ee:	8c 93       	st	X, r24

                    numerator -= denominator; // Calculate the new numerator value
    10f0:	e8 85       	ldd	r30, Y+8	; 0x08
    10f2:	f9 85       	ldd	r31, Y+9	; 0x09
    10f4:	e6 19       	sub	r30, r6
    10f6:	f7 09       	sbc	r31, r7
    10f8:	f9 87       	std	Y+9, r31	; 0x09
    10fa:	e8 87       	std	Y+8, r30	; 0x08
                    y += yinc;                // Change the y as appropriate
    10fc:	39 81       	ldd	r19, Y+1	; 0x01
    10fe:	33 0e       	add	r3, r19
                    x += xinc;                // Change the x for the nxt loop
    1100:	8d 2d       	mov	r24, r13
    1102:	89 0f       	add	r24, r25
    1104:	d8 2e       	mov	r13, r24
    1106:	c6 cf       	rjmp	.-116    	; 0x1094 <draw_polygon+0x232>
                    xstart = x;               // Save the start position.
                }
                else
                {
                    // Advance the x-coordinate
                    x += xinc;
    1108:	d9 0e       	add	r13, r25
    110a:	c4 cf       	rjmp	.-120    	; 0x1094 <draw_polygon+0x232>
            }

            // Catch any residue horizontal transition that has not been
            // recorded. This occurs for convex shapes where x is advanced
            // without y.
            if (xstart != x)
    110c:	8d 15       	cp	r24, r13
    110e:	09 f4       	brne	.+2      	; 0x1112 <draw_polygon+0x2b0>
    1110:	51 c0       	rjmp	.+162    	; 0x11b4 <draw_polygon+0x352>
            {
                uint8_t buffer = draw_buffer[y];
    1112:	03 2d       	mov	r16, r3
    1114:	10 e0       	ldi	r17, 0x00	; 0
    1116:	0c 5f       	subi	r16, 0xFC	; 252
    1118:	1c 4f       	sbci	r17, 0xFC	; 252
    111a:	d8 01       	movw	r26, r16
    111c:	4c 91       	ld	r20, X

                // This is the only position where y changes. Flush out
                // the last y change before we increment it.
                if (buffer != 0xff)
    111e:	4f 3f       	cpi	r20, 0xFF	; 255
    1120:	59 f0       	breq	.+22     	; 0x1138 <draw_polygon+0x2d6>
                {
                    // Draw the vertical line to fill the column and
                    // clear the y buffer
                    draw_hline (xstart, y, buffer, s_r);
    1122:	e0 91 ef 02 	lds	r30, 0x02EF
    1126:	f0 91 f0 02 	lds	r31, 0x02F0
    112a:	a5 91       	lpm	r26, Z+
    112c:	b4 91       	lpm	r27, Z
    112e:	29 2d       	mov	r18, r9
    1130:	63 2d       	mov	r22, r3
    1132:	fd 01       	movw	r30, r26
    1134:	09 95       	icall
                    xstart = 0xff;
    1136:	8f ef       	ldi	r24, 0xFF	; 255
                }
                draw_buffer[y] = xstart;
    1138:	d8 01       	movw	r26, r16
    113a:	8c 93       	st	X, r24
    113c:	3b c0       	rjmp	.+118    	; 0x11b4 <draw_polygon+0x352>
            int16_t numadd;                  // Numerator to add.
            int16_t numpixels;               // Number of pixels to write.

            // Calculate the Bresenham parameters
            denominator = deltay;
            numerator = deltay / 2;
    113e:	92 01       	movw	r18, r4
    1140:	57 fe       	sbrs	r5, 7
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <draw_polygon+0x2e6>
    1144:	2f 5f       	subi	r18, 0xFF	; 255
    1146:	3f 4f       	sbci	r19, 0xFF	; 255
    1148:	f9 01       	movw	r30, r18
    114a:	f5 95       	asr	r31
    114c:	e7 95       	ror	r30
    114e:	f9 87       	std	Y+9, r31	; 0x09
    1150:	e8 87       	std	Y+8, r30	; 0x08
    1152:	72 01       	movw	r14, r4
            numadd = deltax;
            numpixels = deltay;             // There are more y-values than x-values

            // Write all of the pixels EXCLUDING the last pixel.
            while (--numpixels >= 0)
    1154:	41 e0       	ldi	r20, 0x01	; 1
    1156:	e4 1a       	sub	r14, r20
    1158:	f1 08       	sbc	r15, r1
    115a:	f7 fc       	sbrc	r15, 7
    115c:	2b c0       	rjmp	.+86     	; 0x11b4 <draw_polygon+0x352>
            {
                uint8_t buffer = draw_buffer[y];
    115e:	03 2d       	mov	r16, r3
    1160:	10 e0       	ldi	r17, 0x00	; 0
    1162:	0c 5f       	subi	r16, 0xFC	; 252
    1164:	1c 4f       	sbci	r17, 0xFC	; 252
    1166:	d8 01       	movw	r26, r16
    1168:	4c 91       	ld	r20, X

                // We are about to increment y and move to the next column.
                // Either save the point or draw the point.
                if (buffer != 0xff)
    116a:	4f 3f       	cpi	r20, 0xFF	; 255
    116c:	79 f0       	breq	.+30     	; 0x118c <draw_polygon+0x32a>
                {
                    draw_hline (x, y, buffer, s_r);
    116e:	e0 91 ef 02 	lds	r30, 0x02EF
    1172:	f0 91 f0 02 	lds	r31, 0x02F0
    1176:	a5 91       	lpm	r26, Z+
    1178:	b4 91       	lpm	r27, Z
    117a:	29 2d       	mov	r18, r9
    117c:	63 2d       	mov	r22, r3
    117e:	8d 2d       	mov	r24, r13
    1180:	9f 83       	std	Y+7, r25	; 0x07
    1182:	fd 01       	movw	r30, r26
    1184:	09 95       	icall
                    buffer = 0xff;
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	9f 81       	ldd	r25, Y+7	; 0x07
    118a:	01 c0       	rjmp	.+2      	; 0x118e <draw_polygon+0x32c>
                }
                else
                {
                    buffer = x;
    118c:	8d 2d       	mov	r24, r13
                }
                draw_buffer[y] = buffer;
    118e:	d8 01       	movw	r26, r16
    1190:	8c 93       	st	X, r24

                // Increment x if necessary.
                numerator += numadd;          // Increase the numerator by the top of the fraction
    1192:	e8 85       	ldd	r30, Y+8	; 0x08
    1194:	f9 85       	ldd	r31, Y+9	; 0x09
    1196:	e6 0d       	add	r30, r6
    1198:	f7 1d       	adc	r31, r7
    119a:	f9 87       	std	Y+9, r31	; 0x09
    119c:	e8 87       	std	Y+8, r30	; 0x08
                if (numerator >= denominator) // Check if numerator >= denominator
    119e:	e4 15       	cp	r30, r4
    11a0:	f5 05       	cpc	r31, r5
    11a2:	2c f0       	brlt	.+10     	; 0x11ae <draw_polygon+0x34c>
                {
                    numerator -= denominator; // Calculate the new numerator value
    11a4:	e4 19       	sub	r30, r4
    11a6:	f5 09       	sbc	r31, r5
    11a8:	f9 87       	std	Y+9, r31	; 0x09
    11aa:	e8 87       	std	Y+8, r30	; 0x08
                    x += xinc;                // Change the x as appropriate
    11ac:	d9 0e       	add	r13, r25
                }

                // Increment y.
                y += yinc;
    11ae:	39 81       	ldd	r19, Y+1	; 0x01
    11b0:	33 0e       	add	r3, r19
    11b2:	d0 cf       	rjmp	.-96     	; 0x1154 <draw_polygon+0x2f2>
            }

            // Catch any residue horizontal transition that has not been
            // recorded. This occurs for convex shapes where x is advanced
            // without y.
            if (xstart != x)
    11b4:	32 2c       	mov	r3, r2
        }

        x = x1;
        y = y1;
    }
    while ((yfirst & 0x80) == 0);
    11b6:	b7 fc       	sbrc	r11, 7
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <draw_polygon+0x35c>
    11ba:	da 2c       	mov	r13, r10
    11bc:	94 ce       	rjmp	.-728    	; 0xee6 <draw_polygon+0x84>
    yfirst &= ~0x80;
    11be:	6b 2d       	mov	r22, r11
    11c0:	6f 77       	andi	r22, 0x7F	; 127

    // Flush out any first pixel
    if (draw_buffer[yfirst] != 0xff)
    11c2:	e6 2f       	mov	r30, r22
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	ec 5f       	subi	r30, 0xFC	; 252
    11c8:	fc 4f       	sbci	r31, 0xFC	; 252
    11ca:	40 81       	ld	r20, Z
    11cc:	4f 3f       	cpi	r20, 0xFF	; 255
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <draw_polygon+0x370>
    11d0:	4e c0       	rjmp	.+156    	; 0x126e <draw_polygon+0x40c>
    {
        draw_hline (xfirst, yfirst, draw_buffer[yfirst], s_r);
    11d2:	e0 91 ef 02 	lds	r30, 0x02EF
    11d6:	f0 91 f0 02 	lds	r31, 0x02F0
    11da:	a5 91       	lpm	r26, Z+
    11dc:	b4 91       	lpm	r27, Z
    11de:	29 2d       	mov	r18, r9
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	fd 01       	movw	r30, r26
        while ((y1 & 0x80) == 0);

        // Join up to the start position.
        draw_line (x1, y1 & 0x7f, x, y, s_r);
    }
}
    11e4:	29 96       	adiw	r28, 0x09	; 9
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	ff 90       	pop	r15
    11fa:	ef 90       	pop	r14
    11fc:	df 90       	pop	r13
    11fe:	cf 90       	pop	r12
    1200:	bf 90       	pop	r11
    1202:	af 90       	pop	r10
    1204:	9f 90       	pop	r9
    1206:	8f 90       	pop	r8
    1208:	7f 90       	pop	r7
    120a:	6f 90       	pop	r6
    120c:	5f 90       	pop	r5
    120e:	4f 90       	pop	r4
    1210:	3f 90       	pop	r3
    1212:	2f 90       	pop	r2
    yfirst &= ~0x80;

    // Flush out any first pixel
    if (draw_buffer[yfirst] != 0xff)
    {
        draw_hline (xfirst, yfirst, draw_buffer[yfirst], s_r);
    1214:	09 94       	ijmp
    else
    {
        uint8_t x1, y1;

        // Cache line and do not draw endpoint
        s_r |= MODE_LINE_SKIP_LAST;
    1216:	80 68       	ori	r24, 0x80	; 128
    1218:	98 2e       	mov	r9, r24
    121a:	64 2f       	mov	r22, r20

        // Prepare x and y for the loop
        x1 = x;
    121c:	dc 80       	ldd	r13, Y+4	; 0x04
        // Iterate over the rest of the coordinate until we have finished.
        do
        {
            uint8_t x2, y2;

            if (data != NULL)
    121e:	61 14       	cp	r6, r1
    1220:	71 04       	cpc	r7, r1
    1222:	41 f0       	breq	.+16     	; 0x1234 <draw_polygon+0x3d2>
            {
                x2 = *data++;
    1224:	d3 01       	movw	r26, r6
    1226:	1c 91       	ld	r17, X
                y2 = *data++;
    1228:	11 96       	adiw	r26, 0x01	; 1
    122a:	fc 90       	ld	r15, X
    122c:	f3 01       	movw	r30, r6
    122e:	32 96       	adiw	r30, 0x02	; 2
    1230:	3f 01       	movw	r6, r30
    1232:	08 c0       	rjmp	.+16     	; 0x1244 <draw_polygon+0x3e2>
            }
            else
            {
                x2 = serial_getc (); // Save x
    1234:	6f 83       	std	Y+7, r22	; 0x07
    1236:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
    123a:	18 2f       	mov	r17, r24
                y2 = serial_getc (); // Save y
    123c:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
    1240:	f8 2e       	mov	r15, r24
    1242:	6f 81       	ldd	r22, Y+7	; 0x07
            }

            // Draw the line
            draw_line (x1, y1, x2, y2 & 0x7f, s_r);
    1244:	ff 2d       	mov	r31, r15
    1246:	ff 77       	andi	r31, 0x7F	; 127
    1248:	ef 2e       	mov	r14, r31
    124a:	09 2d       	mov	r16, r9
    124c:	2f 2f       	mov	r18, r31
    124e:	41 2f       	mov	r20, r17
    1250:	8d 2d       	mov	r24, r13
    1252:	0e 94 c5 05 	call	0xb8a	; 0xb8a <draw_line>
            x1 = x2;
            y1 = y2;
        }
        while ((y1 & 0x80) == 0);
    1256:	f7 fc       	sbrc	r15, 7
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <draw_polygon+0x3fe>
            }

            // Draw the line
            draw_line (x1, y1, x2, y2 & 0x7f, s_r);
            x1 = x2;
            y1 = y2;
    125a:	6f 2d       	mov	r22, r15
        }
        while ((y1 & 0x80) == 0);
    125c:	d1 2e       	mov	r13, r17
    125e:	df cf       	rjmp	.-66     	; 0x121e <draw_polygon+0x3bc>

        // Join up to the start position.
        draw_line (x1, y1 & 0x7f, x, y, s_r);
    1260:	09 2d       	mov	r16, r9
    1262:	2b 2d       	mov	r18, r11
    1264:	4c 81       	ldd	r20, Y+4	; 0x04
    1266:	6e 2d       	mov	r22, r14
    1268:	81 2f       	mov	r24, r17
    126a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <draw_line>
    }
}
    126e:	29 96       	adiw	r28, 0x09	; 9
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	ff 90       	pop	r15
    1284:	ef 90       	pop	r14
    1286:	df 90       	pop	r13
    1288:	cf 90       	pop	r12
    128a:	bf 90       	pop	r11
    128c:	af 90       	pop	r10
    128e:	9f 90       	pop	r9
    1290:	8f 90       	pop	r8
    1292:	7f 90       	pop	r7
    1294:	6f 90       	pop	r6
    1296:	5f 90       	pop	r5
    1298:	4f 90       	pop	r4
    129a:	3f 90       	pop	r3
    129c:	2f 90       	pop	r2
    129e:	08 95       	ret

000012a0 <fill_vbox>:
// from x, y1 to x2, y2. The block is filled with byte data (describes a
// vertical row of 8 pixels, use 0x00 to clear the block, 0xFF to fill it,
// etc.)
void
fill_vbox (uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t data)
{
    12a0:	ef 92       	push	r14
    12a2:	ff 92       	push	r15
    12a4:	0f 93       	push	r16
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	1f 92       	push	r1
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	09 83       	std	Y+1, r16	; 0x01
    uint8_t width;
    uint8_t height;

    // Get the top left corner of the block in x1, y1, Get the width and
    // height of the block in the bitblt array.
    if (x1 > x2)
    12b2:	48 17       	cp	r20, r24
    12b4:	18 f4       	brcc	.+6      	; 0x12bc <fill_vbox+0x1c>
        swap_bytes (x1, x2);
    12b6:	84 27       	eor	r24, r20
    12b8:	48 27       	eor	r20, r24
    12ba:	84 27       	eor	r24, r20
    width = 1 + x2 - x1;         // Blit Width
    12bc:	4f 5f       	subi	r20, 0xFF	; 255
    12be:	48 1b       	sub	r20, r24

    if (y1 > y2)
    12c0:	26 17       	cp	r18, r22
    12c2:	18 f4       	brcc	.+6      	; 0x12ca <fill_vbox+0x2a>
        swap_bytes (y1, y2);
    12c4:	62 27       	eor	r22, r18
    12c6:	26 27       	eor	r18, r22
    12c8:	62 27       	eor	r22, r18
    height = 1 + y2 - y1;         // Blit Height

    // Use erase mode of bitblt to draw the block.
    lcd_vbitblt (x1, y1, width, height, MODE_FILL|prefs_reverse, &data);
    12ca:	e0 91 ef 02 	lds	r30, 0x02EF
    12ce:	f0 91 f0 02 	lds	r31, 0x02F0
    12d2:	3a 96       	adiw	r30, 0x0a	; 10
    12d4:	a5 91       	lpm	r26, Z+
    12d6:	b4 91       	lpm	r27, Z
    12d8:	00 91 e6 02 	lds	r16, 0x02E6
    12dc:	08 60       	ori	r16, 0x08	; 8
        swap_bytes (x1, x2);
    width = 1 + x2 - x1;         // Blit Width

    if (y1 > y2)
        swap_bytes (y1, y2);
    height = 1 + y2 - y1;         // Blit Height
    12de:	2f 5f       	subi	r18, 0xFF	; 255
    12e0:	26 1b       	sub	r18, r22

    // Use erase mode of bitblt to draw the block.
    lcd_vbitblt (x1, y1, width, height, MODE_FILL|prefs_reverse, &data);
    12e2:	fe 01       	movw	r30, r28
    12e4:	31 96       	adiw	r30, 0x01	; 1
    12e6:	7f 01       	movw	r14, r30
    12e8:	fd 01       	movw	r30, r26
    12ea:	09 95       	icall
}
    12ec:	0f 90       	pop	r0
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	0f 91       	pop	r16
    12f4:	ff 90       	pop	r15
    12f6:	ef 90       	pop	r14
    12f8:	08 95       	ret

000012fa <fill_box>:
/////////////////////////////////////////////////////////////////////////////
// Draws a filled box on the screen. The box is described by a diagonal line
// from x, y1 to x2, y2. The block is filled according to the mode.
void
fill_box (uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t s_r)
{
    12fa:	ef 92       	push	r14
    12fc:	ff 92       	push	r15
    12fe:	0f 93       	push	r16
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	1f 92       	push	r1
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    uint8_t width;
    uint8_t height;
    uint8_t data = 0xff;
    130a:	9f ef       	ldi	r25, 0xFF	; 255
    130c:	99 83       	std	Y+1, r25	; 0x01

    // Correct the reverse flag
    s_r = ((~s_r ^ prefs_reverse) & MODE_NORMAL_MASK) | (s_r & ~MODE_NORMAL_MASK);
    130e:	90 2f       	mov	r25, r16
    1310:	90 95       	com	r25
    1312:	30 91 e6 02 	lds	r19, 0x02E6
    1316:	93 27       	eor	r25, r19
    1318:	90 fb       	bst	r25, 0
    131a:	00 f9       	bld	r16, 0

    // Get the top left corner of the block in x1, y1, Get the width and
    // height of the block in the bitblt array.
    if (x1 > x2)
    131c:	48 17       	cp	r20, r24
    131e:	18 f4       	brcc	.+6      	; 0x1326 <fill_box+0x2c>
        swap_bytes (x1, x2);
    1320:	84 27       	eor	r24, r20
    1322:	48 27       	eor	r20, r24
    1324:	84 27       	eor	r24, r20
    width = 1 + x2 - x1;                // Blit Width
    1326:	4f 5f       	subi	r20, 0xFF	; 255
    1328:	48 1b       	sub	r20, r24

    if (y1 > y2)
    132a:	26 17       	cp	r18, r22
    132c:	18 f4       	brcc	.+6      	; 0x1334 <fill_box+0x3a>
        swap_bytes (y1, y2);
    132e:	62 27       	eor	r22, r18
    1330:	26 27       	eor	r18, r22
    1332:	62 27       	eor	r22, r18
    height = 1 + y2 - y1;               // Blit Height

    // Use erase mode of bitblt to draw the block.
    lcd_vbitblt (x1, y1, width, height, s_r | MODE_FILL, &data);
    1334:	e0 91 ef 02 	lds	r30, 0x02EF
    1338:	f0 91 f0 02 	lds	r31, 0x02F0
    133c:	3a 96       	adiw	r30, 0x0a	; 10
    133e:	a5 91       	lpm	r26, Z+
    1340:	b4 91       	lpm	r27, Z
    1342:	08 60       	ori	r16, 0x08	; 8
        swap_bytes (x1, x2);
    width = 1 + x2 - x1;                // Blit Width

    if (y1 > y2)
        swap_bytes (y1, y2);
    height = 1 + y2 - y1;               // Blit Height
    1344:	2f 5f       	subi	r18, 0xFF	; 255
    1346:	26 1b       	sub	r18, r22

    // Use erase mode of bitblt to draw the block.
    lcd_vbitblt (x1, y1, width, height, s_r | MODE_FILL, &data);
    1348:	fe 01       	movw	r30, r28
    134a:	31 96       	adiw	r30, 0x01	; 1
    134c:	7f 01       	movw	r14, r30
    134e:	fd 01       	movw	r30, r26
    1350:	09 95       	icall
}
    1352:	0f 90       	pop	r0
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	0f 91       	pop	r16
    135a:	ff 90       	pop	r15
    135c:	ef 90       	pop	r14
    135e:	08 95       	ret

00001360 <draw_box>:
 * @param y2 The lower right y-coordinate
 * @param s_r The mode to draw the line
 */
void
draw_box (uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t s_r)
{
    1360:	ef 92       	push	r14
    1362:	ff 92       	push	r15
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	d8 2f       	mov	r29, r24
    136e:	16 2f       	mov	r17, r22
    1370:	e4 2e       	mov	r14, r20
    1372:	c2 2f       	mov	r28, r18
    if (s_r & MODE_FILL)
    1374:	03 ff       	sbrs	r16, 3
    1376:	09 c0       	rjmp	.+18     	; 0x138a <draw_box+0x2a>
    {
        // Invoke the fill
        fill_box (x1, y1, x2, y2, s_r);
    1378:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fill_box>
        draw_hline (x1, y1, x2-1, s_r);     // Top horizontal.
        draw_vline (x2, y1, y2-1, s_r);     // Right vertical.
        draw_hline (x2, y2, x1+1, s_r);     // Bottom horizontal.
        draw_vline (x1, y2, y1+1, s_r);     // Left vertical.
    }
}
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	08 95       	ret
        fill_box (x1, y1, x2, y2, s_r);
    }
    else
    {
        // Correct the reverse flag and clear any line modes that have been set.
        s_r = ((~s_r ^ prefs_reverse) & MODE_NORMAL_MASK) | (s_r & ~(MODE_LINE_MASK|MODE_NORMAL_MASK));
    138a:	f0 2e       	mov	r15, r16
    138c:	f0 94       	com	r15
    138e:	80 91 e6 02 	lds	r24, 0x02E6
    1392:	f8 26       	eor	r15, r24
    1394:	8f 2d       	mov	r24, r15
    1396:	81 70       	andi	r24, 0x01	; 1
    1398:	f8 2e       	mov	r15, r24
    139a:	0e 77       	andi	r16, 0x7E	; 126
    139c:	f0 2a       	or	r15, r16

        // Do not over-write the corner pixels multiple times. Detect a box
        // of width of 2 which requires 2 lines not 4.

        // Swap the x coordinate if necessary
        if (x1 > x2)
    139e:	4d 17       	cp	r20, r29
    13a0:	18 f4       	brcc	.+6      	; 0x13a8 <draw_box+0x48>
            swap_bytes (x1, x2);
    13a2:	d4 27       	eor	r29, r20
    13a4:	ed 26       	eor	r14, r29
    13a6:	de 25       	eor	r29, r14
        // Swap the y coordinate if necessary
        if (y1 > y2)
    13a8:	c1 17       	cp	r28, r17
    13aa:	18 f4       	brcc	.+6      	; 0x13b2 <draw_box+0x52>
            swap_bytes (y1, y2);
    13ac:	1c 27       	eor	r17, r28
    13ae:	c1 27       	eor	r28, r17
    13b0:	1c 27       	eor	r17, r28

        // Draw a box in a clockwise direction and chain the lines.
        draw_hline (x1, y1, x2-1, s_r);     // Top horizontal.
    13b2:	e0 91 ef 02 	lds	r30, 0x02EF
    13b6:	f0 91 f0 02 	lds	r31, 0x02F0
    13ba:	a5 91       	lpm	r26, Z+
    13bc:	b4 91       	lpm	r27, Z
    13be:	4f ef       	ldi	r20, 0xFF	; 255
    13c0:	4e 0d       	add	r20, r14
    13c2:	2f 2d       	mov	r18, r15
    13c4:	61 2f       	mov	r22, r17
    13c6:	8d 2f       	mov	r24, r29
    13c8:	fd 01       	movw	r30, r26
    13ca:	09 95       	icall
        draw_vline (x2, y1, y2-1, s_r);     // Right vertical.
    13cc:	e0 91 ef 02 	lds	r30, 0x02EF
    13d0:	f0 91 f0 02 	lds	r31, 0x02F0
    13d4:	3c 96       	adiw	r30, 0x0c	; 12
    13d6:	a5 91       	lpm	r26, Z+
    13d8:	b4 91       	lpm	r27, Z
    13da:	4f ef       	ldi	r20, 0xFF	; 255
    13dc:	4c 0f       	add	r20, r28
    13de:	2f 2d       	mov	r18, r15
    13e0:	61 2f       	mov	r22, r17
    13e2:	8e 2d       	mov	r24, r14
    13e4:	fd 01       	movw	r30, r26
    13e6:	09 95       	icall
        draw_hline (x2, y2, x1+1, s_r);     // Bottom horizontal.
    13e8:	e0 91 ef 02 	lds	r30, 0x02EF
    13ec:	f0 91 f0 02 	lds	r31, 0x02F0
    13f0:	a5 91       	lpm	r26, Z+
    13f2:	b4 91       	lpm	r27, Z
    13f4:	41 e0       	ldi	r20, 0x01	; 1
    13f6:	4d 0f       	add	r20, r29
    13f8:	2f 2d       	mov	r18, r15
    13fa:	6c 2f       	mov	r22, r28
    13fc:	8e 2d       	mov	r24, r14
    13fe:	fd 01       	movw	r30, r26
    1400:	09 95       	icall
        draw_vline (x1, y2, y1+1, s_r);     // Left vertical.
    1402:	e0 91 ef 02 	lds	r30, 0x02EF
    1406:	f0 91 f0 02 	lds	r31, 0x02F0
    140a:	3c 96       	adiw	r30, 0x0c	; 12
    140c:	a5 91       	lpm	r26, Z+
    140e:	b4 91       	lpm	r27, Z
    1410:	41 e0       	ldi	r20, 0x01	; 1
    1412:	41 0f       	add	r20, r17
    1414:	2f 2d       	mov	r18, r15
    1416:	6c 2f       	mov	r22, r28
    1418:	8d 2f       	mov	r24, r29
    141a:	fd 01       	movw	r30, r26
    }
}
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	ff 90       	pop	r15
    1426:	ef 90       	pop	r14

        // Draw a box in a clockwise direction and chain the lines.
        draw_hline (x1, y1, x2-1, s_r);     // Top horizontal.
        draw_vline (x2, y1, y2-1, s_r);     // Right vertical.
        draw_hline (x2, y2, x1+1, s_r);     // Bottom horizontal.
        draw_vline (x1, y2, y1+1, s_r);     // Left vertical.
    1428:	09 94       	ijmp

0000142a <erase_box>:
/////////////////////////////////////////////////////////////////////////////
// Erases a block from the screen. The box is described by a diagonal line
// from x, y1 to x2, y2. The block is filled according to the mode.
void
erase_box (uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
    142a:	0f 93       	push	r16
    fill_box (x1, y1, x2, y2, ~prefs_reverse & MODE_NORMAL_MASK);
    142c:	00 91 e6 02 	lds	r16, 0x02E6
    1430:	00 95       	com	r16
    1432:	01 70       	andi	r16, 0x01	; 1
    1434:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fill_box>
}
    1438:	0f 91       	pop	r16
    143a:	08 95       	ret

0000143c <draw_vbitblt>:
///
///             0x10 - MODE_FILL
///                    Interpret the data as a mask and fill.
void
draw_vbitblt (uint8_t x, uint8_t y, uint8_t s_r, uint8_t *data)
{
    143c:	af 92       	push	r10
    143e:	bf 92       	push	r11
    1440:	df 92       	push	r13
    1442:	ef 92       	push	r14
    1444:	ff 92       	push	r15
    1446:	0f 93       	push	r16
    1448:	1f 93       	push	r17
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	00 d0       	rcall	.+0      	; 0x1450 <draw_vbitblt+0x14>
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	d8 2e       	mov	r13, r24
    1456:	59 01       	movw	r10, r18
    uint8_t width;                      // Width of the bitmap
    uint8_t height;                     // Height of the bitmap

    s_r = ((~s_r ^ prefs_reverse) & MODE_NORMAL_MASK) | (s_r & ~(MODE_LINE_MASK|MODE_NORMAL_MASK));
    1458:	f0 90 e6 02 	lds	r15, 0x02E6

    // Get the width and the height from the data stream.
    if (data == NULL)
    145c:	21 15       	cp	r18, r1
    145e:	31 05       	cpc	r19, r1
    1460:	59 f4       	brne	.+22     	; 0x1478 <draw_vbitblt+0x3c>
    {
        width = serial_getc();
    1462:	4a 83       	std	Y+2, r20	; 0x02
    1464:	69 83       	std	Y+1, r22	; 0x01
    1466:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
    146a:	18 2f       	mov	r17, r24
        height = serial_getc();
    146c:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
    1470:	28 2f       	mov	r18, r24
    1472:	4a 81       	ldd	r20, Y+2	; 0x02
    1474:	69 81       	ldd	r22, Y+1	; 0x01
    1476:	06 c0       	rjmp	.+12     	; 0x1484 <draw_vbitblt+0x48>
    }
    else
    {
        width = *data++;
    1478:	f9 01       	movw	r30, r18
    147a:	10 81       	ld	r17, Z
        height = *data++;
    147c:	21 81       	ldd	r18, Z+1	; 0x01
    147e:	c5 01       	movw	r24, r10
    1480:	02 96       	adiw	r24, 0x02	; 2
    1482:	5c 01       	movw	r10, r24
    }

    // Make sure we have legal dimensions otherwise discard the data.
    if ((height < 1) || (height > y_dim) ||
    1484:	22 23       	and	r18, r18
    1486:	51 f0       	breq	.+20     	; 0x149c <draw_vbitblt+0x60>
    1488:	80 91 f1 02 	lds	r24, 0x02F1
    148c:	82 17       	cp	r24, r18
    148e:	30 f0       	brcs	.+12     	; 0x149c <draw_vbitblt+0x60>
    1490:	11 23       	and	r17, r17
    1492:	21 f0       	breq	.+8      	; 0x149c <draw_vbitblt+0x60>
        (width < 1) || (width > x_dim))
    1494:	80 91 02 03 	lds	r24, 0x0302
    1498:	81 17       	cp	r24, r17
    149a:	80 f4       	brcc	.+32     	; 0x14bc <draw_vbitblt+0x80>
    {
        // If we are reading from serial then consume all of the content from
        // the serial input.
        if (data == NULL)
    149c:	ab 28       	or	r10, r11
    149e:	01 f5       	brne	.+64     	; 0x14e0 <draw_vbitblt+0xa4>
    14a0:	f1 2c       	mov	r15, r1
        {
            uint8_t row, col;

            // Iterate over all of the data that's coming in.
            for (row = 0; row < height; row++)
    14a2:	f2 16       	cp	r15, r18
    14a4:	e9 f0       	breq	.+58     	; 0x14e0 <draw_vbitblt+0xa4>
    14a6:	00 e0       	ldi	r16, 0x00	; 0
                for (col = 0; col < width; col++)
    14a8:	01 17       	cp	r16, r17
    14aa:	31 f0       	breq	.+12     	; 0x14b8 <draw_vbitblt+0x7c>
                    serial_getc ();
    14ac:	29 83       	std	Y+1, r18	; 0x01
    14ae:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
        {
            uint8_t row, col;

            // Iterate over all of the data that's coming in.
            for (row = 0; row < height; row++)
                for (col = 0; col < width; col++)
    14b2:	0f 5f       	subi	r16, 0xFF	; 255
    14b4:	29 81       	ldd	r18, Y+1	; 0x01
    14b6:	f8 cf       	rjmp	.-16     	; 0x14a8 <draw_vbitblt+0x6c>
        if (data == NULL)
        {
            uint8_t row, col;

            // Iterate over all of the data that's coming in.
            for (row = 0; row < height; row++)
    14b8:	f3 94       	inc	r15
    14ba:	f3 cf       	rjmp	.-26     	; 0x14a2 <draw_vbitblt+0x66>
        // Quit the command there is an error.
        return;
    }

    // Invoke the screen driver to perform the bitblt operation.
    ((vfunc_iiiiip_t)(pgm_read_word(&functabP [F_DRV_VBITBLT])))(x, y, width, height, s_r, data);
    14bc:	e0 91 ef 02 	lds	r30, 0x02EF
    14c0:	f0 91 f0 02 	lds	r31, 0x02F0
    14c4:	3a 96       	adiw	r30, 0x0a	; 10
    14c6:	a5 91       	lpm	r26, Z+
    14c8:	b4 91       	lpm	r27, Z
draw_vbitblt (uint8_t x, uint8_t y, uint8_t s_r, uint8_t *data)
{
    uint8_t width;                      // Width of the bitmap
    uint8_t height;                     // Height of the bitmap

    s_r = ((~s_r ^ prefs_reverse) & MODE_NORMAL_MASK) | (s_r & ~(MODE_LINE_MASK|MODE_NORMAL_MASK));
    14ca:	04 2f       	mov	r16, r20
    14cc:	00 95       	com	r16
    14ce:	0f 25       	eor	r16, r15
    14d0:	01 70       	andi	r16, 0x01	; 1
    14d2:	4e 77       	andi	r20, 0x7E	; 126
    14d4:	04 2b       	or	r16, r20
        // Quit the command there is an error.
        return;
    }

    // Invoke the screen driver to perform the bitblt operation.
    ((vfunc_iiiiip_t)(pgm_read_word(&functabP [F_DRV_VBITBLT])))(x, y, width, height, s_r, data);
    14d6:	75 01       	movw	r14, r10
    14d8:	41 2f       	mov	r20, r17
    14da:	8d 2d       	mov	r24, r13
    14dc:	fd 01       	movw	r30, r26
    14de:	09 95       	icall
}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	bf 90       	pop	r11
    14f4:	af 90       	pop	r10
    14f6:	08 95       	ret

000014f8 <font_init>:
font_init (const char *fptr)
{
    uint8_t temp_w;
    
    // Use the default font if none specified
    if (fptr == NULL)
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	11 f4       	brne	.+4      	; 0x1500 <font_init+0x8>
        fptr = font_alt_5x8;
    14fc:	8c e8       	ldi	r24, 0x8C	; 140
    14fe:	92 e0       	ldi	r25, 0x02	; 2

    // Set up the default font
    font_ptr = fptr;
    1500:	90 93 06 01 	sts	0x0106, r25
    1504:	80 93 05 01 	sts	0x0105, r24
    temp_w = pgm_read_byte(fptr++);
    1508:	fc 01       	movw	r30, r24
    150a:	24 91       	lpm	r18, Z
    font_w = temp_w;
    150c:	20 93 0c 01 	sts	0x010C, r18
    font_h = pgm_read_byte(fptr++);
    1510:	31 96       	adiw	r30, 0x01	; 1
    1512:	34 91       	lpm	r19, Z
    1514:	30 93 0a 01 	sts	0x010A, r19
    font_bytes = (font_h + 7) / 8;      // 8 pixels/byte with partial rows
    font_space = pgm_read_byte(fptr++);
    1518:	31 96       	adiw	r30, 0x01	; 1
    151a:	e4 91       	lpm	r30, Z
    151c:	e0 93 09 01 	sts	0x0109, r30
    font_ws = temp_w + font_space;
    1520:	e2 0f       	add	r30, r18
    1522:	e0 93 0b 01 	sts	0x010B, r30
    font_first_char = pgm_read_byte(fptr++);
    1526:	fc 01       	movw	r30, r24
    1528:	33 96       	adiw	r30, 0x03	; 3
    152a:	e4 91       	lpm	r30, Z
    152c:	e0 93 08 01 	sts	0x0108, r30
    font_last_char = pgm_read_byte(fptr++);
    1530:	fc 01       	movw	r30, r24
    1532:	34 96       	adiw	r30, 0x04	; 4
    1534:	84 91       	lpm	r24, Z
    1536:	80 93 07 01 	sts	0x0107, r24
    // Set up the default font
    font_ptr = fptr;
    temp_w = pgm_read_byte(fptr++);
    font_w = temp_w;
    font_h = pgm_read_byte(fptr++);
    font_bytes = (font_h + 7) / 8;      // 8 pixels/byte with partial rows
    153a:	e3 2f       	mov	r30, r19
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	37 96       	adiw	r30, 0x07	; 7
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	f5 95       	asr	r31
    1544:	e7 95       	ror	r30
    1546:	8a 95       	dec	r24
    1548:	e1 f7       	brne	.-8      	; 0x1542 <font_init+0x4a>
    font_space = pgm_read_byte(fptr++);
    font_ws = temp_w + font_space;
    font_first_char = pgm_read_byte(fptr++);
    font_last_char = pgm_read_byte(fptr++);
    font_bytes *= temp_w;               // Need font_w stacks of rows
    154a:	2e 9f       	mul	r18, r30
    154c:	e0 2d       	mov	r30, r0
    154e:	11 24       	eor	r1, r1
    1550:	e0 93 0d 01 	sts	0x010D, r30

    // Reset the position
    font_xpos = ~0;
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	80 93 04 01 	sts	0x0104, r24
    font_ypos = ~0;
    155a:	80 93 03 01 	sts	0x0103, r24
    155e:	08 95       	ret

00001560 <font_set>:
///                  0 = Default font 5x8
///                  1 = Small font 3x6
/// @param [in] cmd  The command. 0x08=store, 0x48
void
font_set (uint8_t font, uint8_t cmd)
{
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	00 d0       	rcall	.+0      	; 0x1566 <font_set+0x6>
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    const char *fptr;
    
    // Determine the font
    font &= 1;
    if (font == 0)
    156a:	48 2f       	mov	r20, r24
    156c:	41 70       	andi	r20, 0x01	; 1
    156e:	80 fd       	sbrc	r24, 0
    1570:	03 c0       	rjmp	.+6      	; 0x1578 <font_set+0x18>
        fptr = font_alt_5x8;
    1572:	8c e8       	ldi	r24, 0x8C	; 140
    1574:	92 e0       	ldi	r25, 0x02	; 2
    1576:	02 c0       	rjmp	.+4      	; 0x157c <font_set+0x1c>
    else
        fptr = tom_thumb_3x6;
    1578:	8a e6       	ldi	r24, 0x6A	; 106
    157a:	91 e0       	ldi	r25, 0x01	; 1
    
    // Initialise the font.
    font_init(fptr);
    157c:	49 83       	std	Y+1, r20	; 0x01
    157e:	6a 83       	std	Y+2, r22	; 0x02
    1580:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <font_init>
    
    // Save the setting if required.
    if (cmd == CMD_FONT_SET)
    1584:	6a 81       	ldd	r22, Y+2	; 0x02
    1586:	49 81       	ldd	r20, Y+1	; 0x01
    1588:	68 30       	cpi	r22, 0x08	; 8
    158a:	41 f4       	brne	.+16     	; 0x159c <font_set+0x3c>
        lcd_set (LCD_SET_CHECKBYTE, EEPROM_ADDR_FONT, font);
    158c:	6b e0       	ldi	r22, 0x0B	; 11
    158e:	85 ec       	ldi	r24, 0xC5	; 197
}
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    // Initialise the font.
    font_init(fptr);
    
    // Save the setting if required.
    if (cmd == CMD_FONT_SET)
        lcd_set (LCD_SET_CHECKBYTE, EEPROM_ADDR_FONT, font);
    1598:	0c 94 3f 12 	jmp	0x247e	; 0x247e <lcd_set>
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	08 95       	ret

000015a6 <font_mode>:
/// Changes the drawing mode.
///
void
font_mode (uint8_t mode)
{
    font_draw_mode = mode;
    15a6:	80 93 10 01 	sts	0x0110, r24
    15aa:	08 95       	ret

000015ac <font_backspace>:
/// Deletes a full character space previous to the current location
/// (backspace).
///
void
font_backspace (void)
{
    15ac:	0f 93       	push	r16
    if (x_pos < font_ws)
    15ae:	40 91 0f 01 	lds	r20, 0x010F
    15b2:	60 91 0b 01 	lds	r22, 0x010B
    15b6:	20 91 0a 01 	lds	r18, 0x010A
    15ba:	46 17       	cp	r20, r22
    15bc:	20 f5       	brcc	.+72     	; 0x1606 <font_backspace+0x5a>
    {
        // If previous char wouldn't have fit
        x_pos = (x_dim - font_ws - ((x_dim - x_pos) % font_ws));
    15be:	80 91 02 03 	lds	r24, 0x0302
    15c2:	38 2f       	mov	r19, r24
    15c4:	36 1b       	sub	r19, r22
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	84 1b       	sub	r24, r20
    15ca:	91 09       	sbc	r25, r1
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__divmodhi4>
    15d2:	38 1b       	sub	r19, r24
    15d4:	30 93 0f 01 	sts	0x010F, r19

        if (y_pos < font_h)
    15d8:	40 91 0e 01 	lds	r20, 0x010E
    15dc:	42 17       	cp	r20, r18
    15de:	78 f4       	brcc	.+30     	; 0x15fe <font_backspace+0x52>
        {
            // If we run off the top of the screen
            y_pos = (y_dim - font_h - ((y_dim - y_pos) % font_h));
    15e0:	80 91 f1 02 	lds	r24, 0x02F1
    15e4:	38 2f       	mov	r19, r24
    15e6:	32 1b       	sub	r19, r18
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	84 1b       	sub	r24, r20
    15ec:	91 09       	sbc	r25, r1
    15ee:	62 2f       	mov	r22, r18
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__divmodhi4>
    15f6:	38 1b       	sub	r19, r24
    15f8:	30 93 0e 01 	sts	0x010E, r19
    15fc:	07 c0       	rjmp	.+14     	; 0x160c <font_backspace+0x60>
        }
        else
            y_pos -= font_h;
    15fe:	42 1b       	sub	r20, r18
    1600:	40 93 0e 01 	sts	0x010E, r20
    1604:	03 c0       	rjmp	.+6      	; 0x160c <font_backspace+0x60>
    }
    else
    {

        // Back x_pos up by the font width + 1 pixel space between characters
        x_pos -= font_ws;
    1606:	46 1b       	sub	r20, r22
    1608:	40 93 0f 01 	sts	0x010F, r20
    }

    // Erase the block
    fill_box (x_pos, y_pos,
    160c:	60 91 0e 01 	lds	r22, 0x010E
    1610:	80 91 0f 01 	lds	r24, 0x010F
              x_pos + font_w,
              y_pos + font_h - 1,
              ~prefs_reverse & MODE_NORMAL_MASK);
    1614:	00 91 e6 02 	lds	r16, 0x02E6
    1618:	00 95       	com	r16
    161a:	01 70       	andi	r16, 0x01	; 1
        // Back x_pos up by the font width + 1 pixel space between characters
        x_pos -= font_ws;
    }

    // Erase the block
    fill_box (x_pos, y_pos,
    161c:	26 0f       	add	r18, r22
    161e:	21 50       	subi	r18, 0x01	; 1
    1620:	40 91 0c 01 	lds	r20, 0x010C
    1624:	48 0f       	add	r20, r24
    1626:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fill_box>
              x_pos + font_w,
              y_pos + font_h - 1,
              ~prefs_reverse & MODE_NORMAL_MASK);
}
    162a:	0f 91       	pop	r16
    162c:	08 95       	ret

0000162e <font_cr>:
///
void
font_cr (void)
{
    // Perform a CR i.e. move the cursor back to the start of the line. 
    x_pos = font_start_xpos; /* %= font_ws */
    162e:	80 91 02 01 	lds	r24, 0x0102
    1632:	80 93 0f 01 	sts	0x010F, r24

    // Invalidate the previous position
    font_xpos = ~0;
    1636:	8f ef       	ldi	r24, 0xFF	; 255
    1638:	80 93 04 01 	sts	0x0104, r24
    font_ypos = ~0;
    163c:	80 93 03 01 	sts	0x0103, r24
    1640:	08 95       	ret

00001642 <font_lf>:
///
void
font_lf (void)
{
    // Handle a new line additional scroll, determine if we need to scroll.
    if (y_pos >= y_dim) 
    1642:	80 91 0e 01 	lds	r24, 0x010E
    1646:	90 91 f1 02 	lds	r25, 0x02F1
    164a:	89 17       	cp	r24, r25
    164c:	c0 f0       	brcs	.+48     	; 0x167e <font_lf+0x3c>
    {
        if (is_scroll())
    164e:	90 91 eb 02 	lds	r25, 0x02EB
    1652:	91 11       	cpse	r25, r1
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <font_lf+0x32>
        {
            // There is a scroll pending when we render the next character. To
            // provide an interactive feedback then perform a scroll now. Scroll
            // the screen up by 1 line. 
            lcd_vscroll (draw_buffer, -8, prefs_reverse);
    1656:	e0 91 ef 02 	lds	r30, 0x02EF
    165a:	f0 91 f0 02 	lds	r31, 0x02F0
    165e:	3e 96       	adiw	r30, 0x0e	; 14
    1660:	25 91       	lpm	r18, Z+
    1662:	34 91       	lpm	r19, Z
    1664:	40 91 e6 02 	lds	r20, 0x02E6
    1668:	68 ef       	ldi	r22, 0xF8	; 248
    166a:	84 e0       	ldi	r24, 0x04	; 4
    166c:	93 e0       	ldi	r25, 0x03	; 3
    166e:	f9 01       	movw	r30, r18
    1670:	09 95       	icall
    1672:	0a c0       	rjmp	.+20     	; 0x1688 <font_lf+0x46>
        }
        else
        {
            // Make sure that the line restarted at the top will overlap the
            // old one 
            y_pos %= font_h;
    1674:	60 91 0a 01 	lds	r22, 0x010A
    1678:	0e 94 8f 1b 	call	0x371e	; 0x371e <__udivmodqi4>
    167c:	03 c0       	rjmp	.+6      	; 0x1684 <font_lf+0x42>
    else
    {
        // Advance the line offset, note that this is not enacted until the next
        // character is draw so that we keep as much information on the screen as
        // possible in the case that we scroll.
        y_pos += font_h;
    167e:	90 91 0a 01 	lds	r25, 0x010A
    1682:	98 0f       	add	r25, r24
    1684:	90 93 0e 01 	sts	0x010E, r25
    }
    
    // If there is LF preference then enact.
    if (is_crlf())
    1688:	80 91 e8 02 	lds	r24, 0x02E8
    168c:	81 11       	cpse	r24, r1
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <font_lf+0x52>
        font_cr ();
    1690:	0e 94 17 0b 	call	0x162e	; 0x162e <font_cr>
    
    // Invalidate the previous position
    font_xpos = ~0;
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	80 93 04 01 	sts	0x0104, r24
    font_ypos = ~0;
    169a:	80 93 03 01 	sts	0x0103, r24
    169e:	08 95       	ret

000016a0 <font_draw>:
/// @param [in] txt The character to draw.
///                 If the character is not present we present a square box.
///
void
font_draw (char txt)
{
    16a0:	cf 92       	push	r12
    16a2:	df 92       	push	r13
    16a4:	ef 92       	push	r14
    16a6:	ff 92       	push	r15
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	1f 92       	push	r1
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	08 2f       	mov	r16, r24
    // y_pos counts pixels from the top of the screen
    // x_pos counts pixels from the left side of the screen
    
    // A delayed LF, if the character position is off screen then wrap the
    // position to the top of the screen or scroll the screen up. 
    if (y_pos > (y_dim - font_h))
    16b8:	80 91 0e 01 	lds	r24, 0x010E
    16bc:	60 91 0a 01 	lds	r22, 0x010A
    16c0:	48 2f       	mov	r20, r24
    16c2:	50 e0       	ldi	r21, 0x00	; 0
    16c4:	20 91 f1 02 	lds	r18, 0x02F1
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	26 1b       	sub	r18, r22
    16cc:	31 09       	sbc	r19, r1
    16ce:	24 17       	cp	r18, r20
    16d0:	35 07       	cpc	r19, r21
    16d2:	1c f5       	brge	.+70     	; 0x171a <font_draw+0x7a>
    {
        // See if we need to scroll
        if (is_scroll())
    16d4:	90 91 eb 02 	lds	r25, 0x02EB
    16d8:	91 11       	cpse	r25, r1
    16da:	16 c0       	rjmp	.+44     	; 0x1708 <font_draw+0x68>
        {
            // Scroll the screen up by 1 line.
            lcd_vscroll (draw_buffer, -8, prefs_reverse);
    16dc:	e0 91 ef 02 	lds	r30, 0x02EF
    16e0:	f0 91 f0 02 	lds	r31, 0x02F0
    16e4:	3e 96       	adiw	r30, 0x0e	; 14
    16e6:	25 91       	lpm	r18, Z+
    16e8:	34 91       	lpm	r19, Z
    16ea:	40 91 e6 02 	lds	r20, 0x02E6
    16ee:	68 ef       	ldi	r22, 0xF8	; 248
    16f0:	84 e0       	ldi	r24, 0x04	; 4
    16f2:	93 e0       	ldi	r25, 0x03	; 3
    16f4:	f9 01       	movw	r30, r18
    16f6:	09 95       	icall
            
            // Decrement the font position.
            y_pos -= font_h;
    16f8:	80 91 0e 01 	lds	r24, 0x010E
    16fc:	90 91 0a 01 	lds	r25, 0x010A
    1700:	89 1b       	sub	r24, r25
    1702:	80 93 0e 01 	sts	0x010E, r24
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <font_draw+0x70>
        }
        else
        {
            // Make sure that the line restarted at the top will overlap the
            // old one 
            y_pos = y_pos % font_h;
    1708:	0e 94 8f 1b 	call	0x371e	; 0x371e <__udivmodqi4>
    170c:	90 93 0e 01 	sts	0x010E, r25
        }
        
        // Invalidate the previous position
        font_xpos = ~0;
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    1712:	80 93 04 01 	sts	0x0104, r24
        font_ypos = ~0;
    1716:	80 93 03 01 	sts	0x0103, r24
    }

    // Compute the current mode based on the reverse preference.
    mode = (~font_draw_mode ^ prefs_reverse) & MODE_NORMAL_MASK;
    171a:	e0 91 10 01 	lds	r30, 0x0110
    171e:	8e 2f       	mov	r24, r30
    1720:	80 95       	com	r24
    1722:	90 91 e6 02 	lds	r25, 0x02E6
    1726:	89 27       	eor	r24, r25
    mode |= font_draw_mode & ~MODE_NORMAL_MASK;
    1728:	1e 2f       	mov	r17, r30
    172a:	80 fb       	bst	r24, 0
    172c:	10 f9       	bld	r17, 0

    // Make sure the text is in bounds otherwise print a question mark.
    if ((txt < font_first_char) || (txt > font_last_char))
    172e:	80 91 08 01 	lds	r24, 0x0108
    1732:	08 17       	cp	r16, r24
    1734:	20 f0       	brcs	.+8      	; 0x173e <font_draw+0x9e>
    1736:	90 91 07 01 	lds	r25, 0x0107
    173a:	90 17       	cp	r25, r16
    173c:	08 f4       	brcc	.+2      	; 0x1740 <font_draw+0xa0>
    173e:	08 2f       	mov	r16, r24
        txt = font_first_char;          // Correct out of bounds

    // Get data for character. Put in upper half of buffer, lower half is
    // used by bitblt
    bltpos = SCREEN_MAX_WIDTH - font_bytes;
    1740:	60 91 0d 01 	lds	r22, 0x010D
    1744:	90 ea       	ldi	r25, 0xA0	; 160
    1746:	c9 2e       	mov	r12, r25
    1748:	c6 1a       	sub	r12, r22
    jj = bltpos;

    // txt-32 is the ascii offset to 'space', font_bytes is the # of
    // bytes/character, and 5 for font width,height,space, first_char and
    // last_char which are stores at the beginning of the array
    offset = (txt - font_first_char) * font_bytes + FONT_FILE_HEADER_LEN;
    174a:	40 2f       	mov	r20, r16
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	48 1b       	sub	r20, r24
    1750:	51 09       	sbc	r21, r1
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	46 9f       	mul	r20, r22
    1756:	90 01       	movw	r18, r0
    1758:	47 9f       	mul	r20, r23
    175a:	30 0d       	add	r19, r0
    175c:	56 9f       	mul	r21, r22
    175e:	30 0d       	add	r19, r0
    1760:	11 24       	eor	r1, r1
    
    // loop for one character worth of bytes
    actual_width = 0;
    for (ii = offset; ii < offset + font_bytes; ii++)
    {
        uint8_t cc = pgm_read_byte (&font_ptr[ii]);
    1762:	80 91 05 01 	lds	r24, 0x0105
    1766:	90 91 06 01 	lds	r25, 0x0106
        
        // If the font is proportional then remove any blank verticals only
        // if the character is not a space and the font size is less than or
        // equal to 8 pixels. 
        if ((cc != 0) || (txt == 0x20) || ((font_draw_mode & MODE_PROP_FONT) == 0) || (font_h > 8))
    176a:	f0 90 0a 01 	lds	r15, 0x010A
        txt = font_first_char;          // Correct out of bounds

    // Get data for character. Put in upper half of buffer, lower half is
    // used by bitblt
    bltpos = SCREEN_MAX_WIDTH - font_bytes;
    jj = bltpos;
    176e:	4c 2d       	mov	r20, r12
    // last_char which are stores at the beginning of the array
    offset = (txt - font_first_char) * font_bytes + FONT_FILE_HEADER_LEN;
    
    // loop for one character worth of bytes
    actual_width = 0;
    for (ii = offset; ii < offset + font_bytes; ii++)
    1770:	2b 5f       	subi	r18, 0xFB	; 251
    1772:	3f 4f       	sbci	r19, 0xFF	; 255
    // bytes/character, and 5 for font width,height,space, first_char and
    // last_char which are stores at the beginning of the array
    offset = (txt - font_first_char) * font_bytes + FONT_FILE_HEADER_LEN;
    
    // loop for one character worth of bytes
    actual_width = 0;
    1774:	d1 2c       	mov	r13, r1
    for (ii = offset; ii < offset + font_bytes; ii++)
    1776:	62 0f       	add	r22, r18
    1778:	73 1f       	adc	r23, r19
        uint8_t cc = pgm_read_byte (&font_ptr[ii]);
        
        // If the font is proportional then remove any blank verticals only
        // if the character is not a space and the font size is less than or
        // equal to 8 pixels. 
        if ((cc != 0) || (txt == 0x20) || ((font_draw_mode & MODE_PROP_FONT) == 0) || (font_h > 8))
    177a:	e0 72       	andi	r30, 0x20	; 32
    177c:	ee 2e       	mov	r14, r30
    // last_char which are stores at the beginning of the array
    offset = (txt - font_first_char) * font_bytes + FONT_FILE_HEADER_LEN;
    
    // loop for one character worth of bytes
    actual_width = 0;
    for (ii = offset; ii < offset + font_bytes; ii++)
    177e:	26 17       	cp	r18, r22
    1780:	37 07       	cpc	r19, r23
    1782:	b8 f4       	brcc	.+46     	; 0x17b2 <font_draw+0x112>
    1784:	fc 01       	movw	r30, r24
    1786:	e2 0f       	add	r30, r18
    1788:	f3 1f       	adc	r31, r19
    {
        uint8_t cc = pgm_read_byte (&font_ptr[ii]);
    178a:	54 91       	lpm	r21, Z
        
        // If the font is proportional then remove any blank verticals only
        // if the character is not a space and the font size is less than or
        // equal to 8 pixels. 
        if ((cc != 0) || (txt == 0x20) || ((font_draw_mode & MODE_PROP_FONT) == 0) || (font_h > 8))
    178c:	51 11       	cpse	r21, r1
    178e:	07 c0       	rjmp	.+14     	; 0x179e <font_draw+0xfe>
    1790:	00 32       	cpi	r16, 0x20	; 32
    1792:	29 f0       	breq	.+10     	; 0x179e <font_draw+0xfe>
    1794:	ee 20       	and	r14, r14
    1796:	19 f0       	breq	.+6      	; 0x179e <font_draw+0xfe>
    1798:	f8 e0       	ldi	r31, 0x08	; 8
    179a:	ff 15       	cp	r31, r15
    179c:	38 f4       	brcc	.+14     	; 0x17ac <font_draw+0x10c>
        {
            font_buffer[jj++] = cc;
    179e:	a4 2f       	mov	r26, r20
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	ae 50       	subi	r26, 0x0E	; 14
    17a4:	bd 4f       	sbci	r27, 0xFD	; 253
    17a6:	5c 93       	st	X, r21
            actual_width++;
    17a8:	d3 94       	inc	r13
        // If the font is proportional then remove any blank verticals only
        // if the character is not a space and the font size is less than or
        // equal to 8 pixels. 
        if ((cc != 0) || (txt == 0x20) || ((font_draw_mode & MODE_PROP_FONT) == 0) || (font_h > 8))
        {
            font_buffer[jj++] = cc;
    17aa:	4f 5f       	subi	r20, 0xFF	; 255
    // last_char which are stores at the beginning of the array
    offset = (txt - font_first_char) * font_bytes + FONT_FILE_HEADER_LEN;
    
    // loop for one character worth of bytes
    actual_width = 0;
    for (ii = offset; ii < offset + font_bytes; ii++)
    17ac:	2f 5f       	subi	r18, 0xFF	; 255
    17ae:	3f 4f       	sbci	r19, 0xFF	; 255
    17b0:	e6 cf       	rjmp	.-52     	; 0x177e <font_draw+0xde>
            actual_width++;
        }
    }

    // See if we need to insert some space between the last character.
    if ((font_space > 0) && (x_pos > font_space) &&
    17b2:	90 91 09 01 	lds	r25, 0x0109
    17b6:	99 23       	and	r25, r25
    17b8:	11 f1       	breq	.+68     	; 0x17fe <font_draw+0x15e>
    17ba:	20 91 0f 01 	lds	r18, 0x010F
    17be:	92 17       	cp	r25, r18
    17c0:	f0 f4       	brcc	.+60     	; 0x17fe <font_draw+0x15e>
        (font_xpos == x_pos) && (font_ypos == y_pos))
    17c2:	80 91 04 01 	lds	r24, 0x0104
            actual_width++;
        }
    }

    // See if we need to insert some space between the last character.
    if ((font_space > 0) && (x_pos > font_space) &&
    17c6:	82 13       	cpse	r24, r18
    17c8:	1a c0       	rjmp	.+52     	; 0x17fe <font_draw+0x15e>
        (font_xpos == x_pos) && (font_ypos == y_pos))
    17ca:	60 91 03 01 	lds	r22, 0x0103
    17ce:	20 91 0e 01 	lds	r18, 0x010E
    17d2:	62 13       	cpse	r22, r18
    17d4:	14 c0       	rjmp	.+40     	; 0x17fe <font_draw+0x15e>
    {
        uint8_t data = 0x00;
    17d6:	19 82       	std	Y+1, r1	; 0x01
        lcd_vbitblt (x_pos - font_space, y_pos,
    17d8:	e0 91 ef 02 	lds	r30, 0x02EF
    17dc:	f0 91 f0 02 	lds	r31, 0x02F0
    17e0:	3a 96       	adiw	r30, 0x0a	; 10
    17e2:	a5 91       	lpm	r26, Z+
    17e4:	b4 91       	lpm	r27, Z
    17e6:	9e 01       	movw	r18, r28
    17e8:	2f 5f       	subi	r18, 0xFF	; 255
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	79 01       	movw	r14, r18
    17ee:	01 2f       	mov	r16, r17
    17f0:	08 60       	ori	r16, 0x08	; 8
    17f2:	20 91 0a 01 	lds	r18, 0x010A
    17f6:	49 2f       	mov	r20, r25
    17f8:	89 1b       	sub	r24, r25
    17fa:	fd 01       	movw	r30, r26
    17fc:	09 95       	icall
                     font_space, font_h, mode | MODE_FILL, &data);
    }

    // Render the character to the screen.
    lcd_vbitblt (x_pos, y_pos, actual_width, font_h, mode, &font_buffer[bltpos]);
    17fe:	e0 91 ef 02 	lds	r30, 0x02EF
    1802:	f0 91 f0 02 	lds	r31, 0x02F0
    1806:	3a 96       	adiw	r30, 0x0a	; 10
    1808:	a5 91       	lpm	r26, Z+
    180a:	b4 91       	lpm	r27, Z
    180c:	8c 2d       	mov	r24, r12
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	8e 50       	subi	r24, 0x0E	; 14
    1812:	9d 4f       	sbci	r25, 0xFD	; 253
    1814:	7c 01       	movw	r14, r24
    1816:	01 2f       	mov	r16, r17
    1818:	20 91 0a 01 	lds	r18, 0x010A
    181c:	4d 2d       	mov	r20, r13
    181e:	60 91 0e 01 	lds	r22, 0x010E
    1822:	80 91 0f 01 	lds	r24, 0x010F
    1826:	fd 01       	movw	r30, r26
    1828:	09 95       	icall

    // Advance the current cursor position.
    x_pos += actual_width + font_space;
    182a:	40 91 09 01 	lds	r20, 0x0109
    182e:	80 91 0f 01 	lds	r24, 0x010F
    1832:	48 0f       	add	r20, r24
    1834:	4d 0d       	add	r20, r13
    1836:	40 93 0f 01 	sts	0x010F, r20

    // Check x offset and do necessary wrapping
    if ((x_pos + font_w) > x_dim - 1)
    183a:	20 91 02 03 	lds	r18, 0x0302
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	80 91 0c 01 	lds	r24, 0x010C
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	84 0f       	add	r24, r20
    1848:	91 1d       	adc	r25, r1
    184a:	82 17       	cp	r24, r18
    184c:	93 07       	cpc	r25, r19
    184e:	3c f0       	brlt	.+14     	; 0x185e <font_draw+0x1be>
    {
        // Make sure text on the next line will line up with the previous
        // line and perform a line feed operation.
        x_pos = font_start_xpos; /*%= font_ws*/;
    1850:	80 91 02 01 	lds	r24, 0x0102
    1854:	80 93 0f 01 	sts	0x010F, r24
        font_lf ();
    1858:	0e 94 21 0b 	call	0x1642	; 0x1642 <font_lf>
    185c:	06 c0       	rjmp	.+12     	; 0x186a <font_draw+0x1ca>
    }
    else
    {
        // Save the last position.
        font_xpos = x_pos;
    185e:	40 93 04 01 	sts	0x0104, r20
        font_ypos = y_pos;
    1862:	80 91 0e 01 	lds	r24, 0x010E
    1866:	80 93 03 01 	sts	0x0103, r24
    }
}
    186a:	0f 90       	pop	r0
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	ef 90       	pop	r14
    1878:	df 90       	pop	r13
    187a:	cf 90       	pop	r12
    187c:	08 95       	ret

0000187e <font_draw_stringP>:
/// Draw a string on screen
/// 
/// @param [in] stringP Pointer to a PROGMEM string. 
void
font_draw_stringP (const char *stringP)
{
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
    1882:	fc 01       	movw	r30, r24
    char cc;
    
    while ((cc = pgm_read_byte (stringP++)) != '\0')
    1884:	84 91       	lpm	r24, Z
    1886:	ef 01       	movw	r28, r30
    1888:	21 96       	adiw	r28, 0x01	; 1
    188a:	88 23       	and	r24, r24
    188c:	21 f0       	breq	.+8      	; 0x1896 <font_draw_stringP+0x18>
        font_draw (cc);
    188e:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <font_draw>
    1892:	fe 01       	movw	r30, r28
    1894:	f7 cf       	rjmp	.-18     	; 0x1884 <font_draw_stringP+0x6>
}
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	08 95       	ret

0000189c <font_draw_on_off>:
font_draw_on_off (uint8_t value)
{
    static const char on [] PROGMEM = "on";
    static const char off [] PROGMEM = "off";    
    
    font_draw_stringP ((value == 0) ? off : on);
    189c:	81 11       	cpse	r24, r1
    189e:	03 c0       	rjmp	.+6      	; 0x18a6 <font_draw_on_off+0xa>
    18a0:	86 e6       	ldi	r24, 0x66	; 102
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <font_draw_on_off+0xe>
    18a6:	83 e6       	ldi	r24, 0x63	; 99
    18a8:	91 e0       	ldi	r25, 0x01	; 1
    18aa:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <font_draw_stringP>

000018ae <font_draw_number>:
/// Draw a string on screen
/// 
/// @param [in] value The value to render.
void
font_draw_number (int16_t value)
{
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <font_draw_number+0xa>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <font_draw_number+0xc>
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <font_draw_number+0xe>
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	8c 01       	movw	r16, r24
    char buf [6];                       // Draw buffer
    char *p = &buf[5];                  // Local pointer
    
    // Nil terminate the string
    *p = '\0';
    18c2:	1e 82       	std	Y+6, r1	; 0x06

    // Sort out the sign
    if (value < 0)
    18c4:	97 ff       	sbrs	r25, 7
    18c6:	06 c0       	rjmp	.+12     	; 0x18d4 <font_draw_number+0x26>
    {
        // Draw the sign and make positive
        font_draw ('-');
    18c8:	8d e2       	ldi	r24, 0x2D	; 45
    18ca:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <font_draw>
        value = -value;
    18ce:	11 95       	neg	r17
    18d0:	01 95       	neg	r16
    18d2:	11 09       	sbc	r17, r1
/// Draw a string on screen
/// 
/// @param [in] value The value to render.
void
font_draw_number (int16_t value)
{
    18d4:	fe 01       	movw	r30, r28
    18d6:	36 96       	adiw	r30, 0x06	; 6
    }

    // Convert to a ASCII decimal string representation.
    do
    {
        *--p = '0' + (uint8_t)(value % 10);
    18d8:	2a e0       	ldi	r18, 0x0A	; 10
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	c8 01       	movw	r24, r16
    18de:	b9 01       	movw	r22, r18
    18e0:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__divmodhi4>
    18e4:	80 5d       	subi	r24, 0xD0	; 208
    18e6:	82 93       	st	-Z, r24
        value /= 10;
    18e8:	8b 01       	movw	r16, r22
    }
    while (value > 0);
    18ea:	61 15       	cp	r22, r1
    18ec:	71 05       	cpc	r23, r1
    18ee:	b1 f7       	brne	.-20     	; 0x18dc <font_draw_number+0x2e>
    18f0:	8f 01       	movw	r16, r30
    
    // Display the output
    do
    {
        font_draw (*p++);
    18f2:	f8 01       	movw	r30, r16
    18f4:	81 91       	ld	r24, Z+
    18f6:	8f 01       	movw	r16, r30
    18f8:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <font_draw>
    }
    while (*p != '\0');
    18fc:	f8 01       	movw	r30, r16
    18fe:	80 81       	ld	r24, Z
    1900:	81 11       	cpse	r24, r1
    1902:	f7 cf       	rjmp	.-18     	; 0x18f2 <font_draw_number+0x44>
}
    1904:	26 96       	adiw	r28, 0x06	; 6
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	08 95       	ret

0000191a <font_position>:
/// Modify the x and y position
///
void
font_position (uint8_t arg1, uint8_t arg2, uint8_t cmd)
{
    if (cmd == CMD_SET_Y_OFFSET)
    191a:	49 31       	cpi	r20, 0x19	; 25
    191c:	19 f4       	brne	.+6      	; 0x1924 <font_position+0xa>
    {
        // Y offset change only
        y_pos = arg1;
    191e:	80 93 0e 01 	sts	0x010E, r24
    1922:	08 c0       	rjmp	.+16     	; 0x1934 <font_position+0x1a>
    }
    else
    {
        // Set the x position
        x_pos = arg1;
    1924:	80 93 0f 01 	sts	0x010F, r24
        font_start_xpos = arg1;
    1928:	80 93 02 01 	sts	0x0102, r24
        
        // If this is not an x offset only then set the y position with the
        // 2nd argument. 
        if (cmd != CMD_SET_X_OFFSET)
    192c:	48 31       	cpi	r20, 0x18	; 24
    192e:	11 f0       	breq	.+4      	; 0x1934 <font_position+0x1a>
            y_pos = arg2;
    1930:	60 93 0e 01 	sts	0x010E, r22
    }
    
    // Invalidate the previous position
    font_xpos = ~0;
    1934:	8f ef       	ldi	r24, 0xFF	; 255
    1936:	80 93 04 01 	sts	0x0104, r24
    font_ypos = ~0;
    193a:	80 93 03 01 	sts	0x0103, r24
    193e:	08 95       	ret

00001940 <font_layout>:
/// @param [in] x The x reference position
/// @param [in] y The y reference position
/// @param [in] justification The rendering position 0=centre, 1=right 
void
font_layout (uint8_t x, uint8_t y, uint8_t justification)
{
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ff 92       	push	r15
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	00 d0       	rcall	.+0      	; 0x1950 <font_layout+0x10>
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	f8 2e       	mov	r15, r24
    uint8_t length = 0;                 // Length of string in pixels
    uint8_t count = 0;                  // Length of string in chars
    1956:	00 e0       	ldi	r16, 0x00	; 0
/// @param [in] y The y reference position
/// @param [in] justification The rendering position 0=centre, 1=right 
void
font_layout (uint8_t x, uint8_t y, uint8_t justification)
{
    uint8_t length = 0;                 // Length of string in pixels
    1958:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t count = 0;                  // Length of string in chars
    uint8_t txt;                        // The current character
    
    // Iterate until the end of the string. Look ahead in the input buffer
    // and collect characters. 
    while ((txt = serial_peek(count)) != 0xff)
    195a:	80 2f       	mov	r24, r16
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	4a 83       	std	Y+2, r20	; 0x02
    1960:	69 83       	std	Y+1, r22	; 0x01
    1962:	0e 94 da 13 	call	0x27b4	; 0x27b4 <serial_peek>
    1966:	98 2f       	mov	r25, r24
    1968:	4a 81       	ldd	r20, Y+2	; 0x02
    196a:	69 81       	ldd	r22, Y+1	; 0x01
    196c:	8f 3f       	cpi	r24, 0xFF	; 255
    196e:	09 f4       	brne	.+2      	; 0x1972 <font_layout+0x32>
    1970:	3e c0       	rjmp	.+124    	; 0x19ee <font_layout+0xae>
    {
        uint16_t ii;
        uint16_t offset;
        
        // Make sure the text is in bounds otherwise print a question mark.
        if ((txt < font_first_char) || (txt > font_last_char))
    1972:	20 91 08 01 	lds	r18, 0x0108
    1976:	92 17       	cp	r25, r18
    1978:	20 f0       	brcs	.+8      	; 0x1982 <font_layout+0x42>
    197a:	80 91 07 01 	lds	r24, 0x0107
    197e:	89 17       	cp	r24, r25
    1980:	08 f4       	brcc	.+2      	; 0x1984 <font_layout+0x44>
    1982:	92 2f       	mov	r25, r18
            txt = font_first_char;      // Correct out of bounds
        
        // txt-32 is the ascii offset to 'space', font_bytes is the # of
        // bytes/character, and 5 for font width,height,space, first_char and
        // last_char which are stores at the beginning of the array
        offset = (txt - font_first_char) * font_bytes + FONT_FILE_HEADER_LEN;
    1984:	a0 91 0d 01 	lds	r26, 0x010D
    1988:	e9 2f       	mov	r30, r25
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	e2 1b       	sub	r30, r18
    198e:	f1 09       	sbc	r31, r1
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	ea 9f       	mul	r30, r26
    1994:	90 01       	movw	r18, r0
    1996:	eb 9f       	mul	r30, r27
    1998:	30 0d       	add	r19, r0
    199a:	fa 9f       	mul	r31, r26
    199c:	30 0d       	add	r19, r0
    199e:	11 24       	eor	r1, r1
        
        // Compute the width of the character.
        for (ii = offset; ii < offset + font_bytes; ii++)
        {
            uint8_t cc = pgm_read_byte (&font_ptr[ii]);
    19a0:	c0 90 05 01 	lds	r12, 0x0105
    19a4:	d0 90 06 01 	lds	r13, 0x0106
            
            // If the font is proportional then remove any blank verticals
            // only if the character is not a space and the font size is less
            // than or equal to 8 pixels. 
            if ((cc != 0) || (txt == 0x20) || ((font_draw_mode & MODE_PROP_FONT) == 0) || (font_h > 8))
    19a8:	50 91 10 01 	lds	r21, 0x0110
    19ac:	50 72       	andi	r21, 0x20	; 32
    19ae:	80 91 0a 01 	lds	r24, 0x010A
        // bytes/character, and 5 for font width,height,space, first_char and
        // last_char which are stores at the beginning of the array
        offset = (txt - font_first_char) * font_bytes + FONT_FILE_HEADER_LEN;
        
        // Compute the width of the character.
        for (ii = offset; ii < offset + font_bytes; ii++)
    19b2:	2b 5f       	subi	r18, 0xFB	; 251
    19b4:	3f 4f       	sbci	r19, 0xFF	; 255
    19b6:	a2 0f       	add	r26, r18
    19b8:	b3 1f       	adc	r27, r19
    19ba:	2a 17       	cp	r18, r26
    19bc:	3b 07       	cpc	r19, r27
    19be:	80 f4       	brcc	.+32     	; 0x19e0 <font_layout+0xa0>
    19c0:	f6 01       	movw	r30, r12
    19c2:	e2 0f       	add	r30, r18
    19c4:	f3 1f       	adc	r31, r19
        {
            uint8_t cc = pgm_read_byte (&font_ptr[ii]);
    19c6:	e4 91       	lpm	r30, Z
            
            // If the font is proportional then remove any blank verticals
            // only if the character is not a space and the font size is less
            // than or equal to 8 pixels. 
            if ((cc != 0) || (txt == 0x20) || ((font_draw_mode & MODE_PROP_FONT) == 0) || (font_h > 8))
    19c8:	e1 11       	cpse	r30, r1
    19ca:	06 c0       	rjmp	.+12     	; 0x19d8 <font_layout+0x98>
    19cc:	90 32       	cpi	r25, 0x20	; 32
    19ce:	21 f0       	breq	.+8      	; 0x19d8 <font_layout+0x98>
    19d0:	55 23       	and	r21, r21
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <font_layout+0x98>
    19d4:	89 30       	cpi	r24, 0x09	; 9
    19d6:	08 f0       	brcs	.+2      	; 0x19da <font_layout+0x9a>
            {
                length++;
    19d8:	1f 5f       	subi	r17, 0xFF	; 255
        // bytes/character, and 5 for font width,height,space, first_char and
        // last_char which are stores at the beginning of the array
        offset = (txt - font_first_char) * font_bytes + FONT_FILE_HEADER_LEN;
        
        // Compute the width of the character.
        for (ii = offset; ii < offset + font_bytes; ii++)
    19da:	2f 5f       	subi	r18, 0xFF	; 255
    19dc:	3f 4f       	sbci	r19, 0xFF	; 255
    19de:	ed cf       	rjmp	.-38     	; 0x19ba <font_layout+0x7a>
                length++;
            }
        }
        
        // Account for intercharacter space.
        if (count > 0)
    19e0:	00 23       	and	r16, r16
    19e2:	19 f0       	breq	.+6      	; 0x19ea <font_layout+0xaa>
            length += font_space;
    19e4:	80 91 09 01 	lds	r24, 0x0109
    19e8:	18 0f       	add	r17, r24
        
        // Another character processed.
        count++;
    19ea:	0f 5f       	subi	r16, 0xFF	; 255
    19ec:	b6 cf       	rjmp	.-148    	; 0x195a <font_layout+0x1a>
    }
    
    // Compute the position to render the string. Note we do not correct any
    // user mistakes this results in a rendering anomaly. 
    if (justification == FONT_ALIGN_CENTER)
    19ee:	41 11       	cpse	r20, r1
    19f0:	07 c0       	rjmp	.+14     	; 0x1a00 <font_layout+0xc0>
        length = (length + 1) >> 1;     // Divide by 2
    19f2:	21 2f       	mov	r18, r17
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	2f 5f       	subi	r18, 0xFF	; 255
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	35 95       	asr	r19
    19fc:	27 95       	ror	r18
    19fe:	12 2f       	mov	r17, r18
    x -= length;                        // Position x
    
    // Change the position 
    font_position (x, y, 0);
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	8f 2d       	mov	r24, r15
    1a04:	81 1b       	sub	r24, r17
    1a06:	0e 94 8d 0c 	call	0x191a	; 0x191a <font_position>
    
    // Explicitly turn off graphics mode.
    prefs_graphics = 0;
    1a0a:	10 92 ee 02 	sts	0x02EE, r1
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	ff 90       	pop	r15
    1a1c:	df 90       	pop	r13
    1a1e:	cf 90       	pop	r12
    1a20:	08 95       	ret

00001a22 <status_check>:
status_check (uint8_t portc_next)
{
    uint8_t portc;                      // Port c setting

    // Set up for status read. Chip select is already defined.
    portc = PORTC;
    1a22:	98 b1       	in	r25, 0x08	; 8
        uint8_t portc_en;               // Port c setting with EN

        // Set up PORTC for a status read. Note if we go round the loop again
        // then we need a 500ns strobe so do not fold the commands into the
        // nop's
        portc &= ~(1 << RS);
    1a24:	29 2f       	mov	r18, r25
    1a26:	2d 7f       	andi	r18, 0xFD	; 253
        portc |= (1 << RW);
    1a28:	92 2f       	mov	r25, r18
    1a2a:	94 60       	ori	r25, 0x04	; 4
        portc_en = portc | (1 << EN);
    1a2c:	25 60       	ori	r18, 0x05	; 5

        // Change the control lines.
        PORTC = portc;
    1a2e:	98 b9       	out	0x08, r25	; 8

        // Wait at least 140ns before we strobe EN (Tasu) after changing
        // RS+RW. Instead of doing NOPs then prepare the port ready for the
        // write.
        asm volatile ("nop");           //  62.5ns
    1a30:	00 00       	nop
        asm volatile ("nop");           // 125.0ns
    1a32:	00 00       	nop
        asm volatile ("nop");           // 187.5ns
    1a34:	00 00       	nop
        PORTC = portc_en;               //   0.0ns
    1a36:	28 b9       	out	0x08, r18	; 8
	...
        asm volatile ("nop");           // 375.0ns

        // With the chip enabled continually poll the status until it changes
        // to a ready state. We only pull in the bits we need and can ignore
        // the lower bits as we do not use them
        while ((PIND & 0x80) != 0)      // 437.5ns
    1a44:	4f 99       	sbic	0x09, 7	; 9
    1a46:	fe cf       	rjmp	.-4      	; 0x1a44 <status_check+0x22>
            /* Nothing */;
        PORTC = portc;                  // 500.0ns
    1a48:	98 b9       	out	0x08, r25	; 8

        // Check if the next portc is going to change the chip select, if it
        // is then we re-execute the loop.
        if (((portc ^ portc_next) & ((1 << CS1) | (1<< CS2))) == 0)
    1a4a:	98 27       	eor	r25, r24
    1a4c:	90 73       	andi	r25, 0x30	; 48
    1a4e:	11 f0       	breq	.+4      	; 0x1a54 <status_check+0x32>
            break;                      // Finished

        // Assign the new portc value to be processed, we will drop out of
        // the loop on the next iteration.
        portc = portc_next;
    1a50:	98 2f       	mov	r25, r24
    1a52:	e8 cf       	rjmp	.-48     	; 0x1a24 <status_check+0x2>
    1a54:	08 95       	ret

00001a56 <ks0108b_write>:
///                     The lower 8-bits contain the command.
///                     The upper 8-bits contain next status to be read.
///
static void
ks0108b_write (uint16_t data)
{
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	1f 92       	push	r1
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	18 2f       	mov	r17, r24
    // Prepare the portc ready for testing when the status check completes.
    portc = data >> 8;                  // Get the port data

    // Ensure the chip is ready for the operation. Send the new portc setting
    // so that the new chip select may be checked for readyness.
    status_check (portc);
    1a64:	89 2f       	mov	r24, r25
    1a66:	99 83       	std	Y+1, r25	; 0x01
    1a68:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <status_check>

    // Prepare the control lines.
    PORTC = portc;
    1a6c:	99 81       	ldd	r25, Y+1	; 0x01
    1a6e:	98 b9       	out	0x08, r25	; 8

    // Wait at least 140ns (tASU) before toggling the chip enable. Instead of
    // doing NOPs then prepare the port ready for the write.
    portc_en = portc | (1 << EN);       // 62.5ns
    1a70:	39 2f       	mov	r19, r25
    1a72:	31 60       	ori	r19, 0x01	; 1

    // Prepare the Port-B data
    PORTD = data & 0xfc;                // 125.0ns, 187.5ns,
    1a74:	81 2f       	mov	r24, r17
    1a76:	8c 7f       	andi	r24, 0xFC	; 252
    1a78:	8b b9       	out	0x0b, r24	; 11
    PORTB = (PORTB & ~0x03) | (data & 0x03);
    1a7a:	25 b1       	in	r18, 0x05	; 5
    1a7c:	81 2f       	mov	r24, r17
    1a7e:	83 70       	andi	r24, 0x03	; 3
    1a80:	2c 7f       	andi	r18, 0xFC	; 252
    1a82:	82 2b       	or	r24, r18
    1a84:	85 b9       	out	0x05, r24	; 5
    ddrb = DDRB | 0x03;
    1a86:	84 b1       	in	r24, 0x04	; 4
    1a88:	83 60       	ori	r24, 0x03	; 3

    // Enable the line the 500ns strobe starts from now.
    PORTC = portc_en;                   //   0.0ns
    1a8a:	38 b9       	out	0x08, r19	; 8

    // Wait 500ns before we toggle EN. The data must go on the bus by the
    // 300ns (Tdsu) mark.
    DDRB = ddrb;                        //  62.5ns,
    1a8c:	84 b9       	out	0x04, r24	; 4
    DDRD = 0xfc;                        // 125.0ns, 187.5ns
    1a8e:	8c ef       	ldi	r24, 0xFC	; 252
    1a90:	8a b9       	out	0x0a, r24	; 10
	...
    asm volatile ("nop");               // 250.0ns
    asm volatile ("nop");               // 312.5ns
    asm volatile ("nop");               // 375.0ns
    asm volatile ("nop");               // 437.5ns
    PORTC = portc;                      // 500.0ns
    1a9a:	98 b9       	out	0x08, r25	; 8
    // Wait 10ns - we do not need to do anything here.
    // Leave the data lines set to input
    DDRD = 0;
    1a9c:	1a b8       	out	0x0a, r1	; 10
    DDRB &= ~0x03;
    1a9e:	84 b1       	in	r24, 0x04	; 4
    1aa0:	8c 7f       	andi	r24, 0xFC	; 252
    1aa2:	84 b9       	out	0x04, r24	; 4
}
    1aa4:	0f 90       	pop	r0
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	08 95       	ret

00001aae <ks0108b_read>:
///
/// @return The screen data read.
/// /
static uint8_t
ks0108b_read (uint16_t command)
{
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	1f 92       	push	r1
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    // Set up the data lines. For data read we need RS=1 and RW=1
    portc = command >> 8;

    // Ensure the chip is ready for the operation. Send the new portc setting
    // so that the new chip select may be checked for readyness.
    status_check (portc);
    1ab8:	89 2f       	mov	r24, r25
    1aba:	99 83       	std	Y+1, r25	; 0x01
    1abc:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <status_check>

    // Wait 140ns (tASU) before toggling the chip enable. Instead of doing
    // NOPs then prepare the port ready for the read.
    PORTC = portc;                      //   0.0ns
    1ac0:	99 81       	ldd	r25, Y+1	; 0x01
    1ac2:	98 b9       	out	0x08, r25	; 8
    portc_en = portc | (1 << EN);       //  62.5ns, 125.0ns
    1ac4:	89 2f       	mov	r24, r25
    1ac6:	81 60       	ori	r24, 0x01	; 1
    asm volatile ("nop");               // 187.5ns
    1ac8:	00 00       	nop

    // Enable the command
    PORTC = portc_en;                   //   0.0ns
    1aca:	88 b9       	out	0x08, r24	; 8
	...
    asm volatile ("nop");               // 187.5ns
    asm volatile ("nop");               // 250.0ns
    asm volatile ("nop");               // 312.5ns
    asm volatile ("nop");               // 375.0ns
    // Pull the data in
    data = PINB & 0x03;                 // 437.5ns
    1ad8:	83 b1       	in	r24, 0x03	; 3
    data |= PIND & 0xfc;                // 500.0ns
    1ada:	29 b1       	in	r18, 0x09	; 9
    1adc:	2c 7f       	andi	r18, 0xFC	; 252
    asm volatile ("nop");               // 187.5ns
    asm volatile ("nop");               // 250.0ns
    asm volatile ("nop");               // 312.5ns
    asm volatile ("nop");               // 375.0ns
    // Pull the data in
    data = PINB & 0x03;                 // 437.5ns
    1ade:	83 70       	andi	r24, 0x03	; 3
    data |= PIND & 0xfc;                // 500.0ns
    PORTC = portc;                      // +500.0ns
    1ae0:	98 b9       	out	0x08, r25	; 8

    return data;
}
    1ae2:	82 2b       	or	r24, r18
    1ae4:	0f 90       	pop	r0
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	08 95       	ret

00001aec <set_y_position>:
///
static void
set_y_position (uint8_t y)
{
    // Ensure y is in the correct range.
    y &= 0x7;
    1aec:	87 70       	andi	r24, 0x07	; 7

    // If the row is already selected then skip the position command.
    if (y_row != y)
    1aee:	90 91 11 01 	lds	r25, 0x0111
    1af2:	98 17       	cp	r25, r24
    1af4:	39 f0       	breq	.+14     	; 0x1b04 <set_y_position+0x18>
    {
        // The row position has changed, move to the new row and update the
        // internal row position.
        y_row = y;                      // Update the cached row position.
    1af6:	80 93 11 01 	sts	0x0111, r24
        ks0108b_write (CMD_ROW|CMD_CS12|y); // Set the row on the display.
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	88 6b       	ori	r24, 0xB8	; 184
    1afe:	98 63       	ori	r25, 0x38	; 56
    1b00:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <ks0108b_write>
    1b04:	08 95       	ret

00001b06 <read_block>:
///                    buffer[x] = read_data & ~buffer[x]
///             0x81 - Merge - OR bits set in buffer
///                    buffer[x] |= read_data
static void
read_block (uint8_t x, uint8_t y_row, uint8_t length, uint8_t *buf, uint8_t mask, uint8_t mode)
{
    1b06:	4f 92       	push	r4
    1b08:	5f 92       	push	r5
    1b0a:	6f 92       	push	r6
    1b0c:	7f 92       	push	r7
    1b0e:	8f 92       	push	r8
    1b10:	9f 92       	push	r9
    1b12:	af 92       	push	r10
    1b14:	bf 92       	push	r11
    1b16:	cf 92       	push	r12
    1b18:	df 92       	push	r13
    1b1a:	ef 92       	push	r14
    1b1c:	ff 92       	push	r15
    1b1e:	0f 93       	push	r16
    1b20:	1f 93       	push	r17
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	1f 92       	push	r1
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	86 2f       	mov	r24, r22
    1b30:	84 2e       	mov	r8, r20
    1b32:	69 01       	movw	r12, r18
    uint8_t num_bytes2;                 // Side #2 number of bytes
    uint16_t cs_select;                 // The cs_select bits

    // Set the y-position enable the display, write to both chips/pages
    // concurrently.
    set_y_position (y_row);             // Set row
    1b34:	99 83       	std	Y+1, r25	; 0x01
    1b36:	0e 94 76 0d 	call	0x1aec	; 0x1aec <set_y_position>

    // See if we are writing to the 2nd side only accounting for x being
    // larger than 63
    if (x >= 64)
    1b3a:	99 81       	ldd	r25, Y+1	; 0x01
    1b3c:	90 34       	cpi	r25, 0x40	; 64
    1b3e:	28 f0       	brcs	.+10     	; 0x1b4a <read_block+0x44>
    {
        x -= 64;                        // Normalise for chip
    1b40:	90 54       	subi	r25, 0x40	; 64

        // We are on the 2nd chip first so swap the lcd_read value
        cs_select = CMD_CS1;
    1b42:	a1 2c       	mov	r10, r1
    1b44:	30 e1       	ldi	r19, 0x10	; 16
    1b46:	b3 2e       	mov	r11, r19
    1b48:	03 c0       	rjmp	.+6      	; 0x1b50 <read_block+0x4a>
    }
    else
    {
        // We are on the first chip.
        cs_select = CMD_CS2;
    1b4a:	a1 2c       	mov	r10, r1
    1b4c:	20 e2       	ldi	r18, 0x20	; 32
    1b4e:	b2 2e       	mov	r11, r18
    }

    s = 64 - x;                         // Distance to edge
    1b50:	80 e4       	ldi	r24, 0x40	; 64
    1b52:	89 1b       	sub	r24, r25
    if (length > s)
    1b54:	88 15       	cp	r24, r8
    1b56:	20 f4       	brcc	.+8      	; 0x1b60 <read_block+0x5a>
    {
        num_bytes1 = s;                 // How much to read in the first loop
        num_bytes2 = length - s;        // How much to read in the second loop
    1b58:	78 2c       	mov	r7, r8
    1b5a:	78 1a       	sub	r7, r24
    1b5c:	88 2e       	mov	r8, r24
    1b5e:	01 c0       	rjmp	.+2      	; 0x1b62 <read_block+0x5c>
    }
    else
    {
        num_bytes1 = length;
        num_bytes2 = 0;
    1b60:	71 2c       	mov	r7, r1
            screen_data = ks0108b_read (CMD_READ | cs_select);
            data = *buf;

            // Apply any reverse setting; if the reverse bit is set then
            // we negate the data
            if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    1b62:	4e 2d       	mov	r20, r14
    1b64:	41 70       	andi	r20, 0x01	; 1
    1b66:	f4 2e       	mov	r15, r20
                screen_data = ~screen_data;

            // Perform the merge
            if ((mode & MODE_OP_MASK) != 0)
    1b68:	1e 2d       	mov	r17, r14
    1b6a:	16 70       	andi	r17, 0x06	; 6
    mode &= MODE_OP_MASK;

    if (mode >= MODE_XOR)
    {
        // This is XOR or NAND */
        if ((mode & MODE_XOR) != 0)
    1b6c:	5e 2d       	mov	r21, r14
    1b6e:	54 70       	andi	r21, 0x04	; 4
    1b70:	e5 2e       	mov	r14, r21
            // Perform the merge
            if ((mode & MODE_OP_MASK) != 0)
                data = merge_column (data, screen_data, mode);

            // MODE_MERGE - Merge in the data in a copy mode
            data = (data & mask) | (screen_data & ~mask);
    1b72:	90 2e       	mov	r9, r16
    1b74:	90 94       	com	r9

    // Iterate over both sides, we compute the break condition in the loop.
    for (;;)
    {
        // Set the column position.
        ks0108b_write (CMD_COLUMN | cs_select | (x & 0x3f));
    1b76:	95 01       	movw	r18, r10
    1b78:	20 64       	ori	r18, 0x40	; 64
    1b7a:	38 60       	ori	r19, 0x08	; 8
    1b7c:	9f 73       	andi	r25, 0x3F	; 63
    1b7e:	f9 01       	movw	r30, r18
    1b80:	e9 2b       	or	r30, r25
    1b82:	cf 01       	movw	r24, r30
    1b84:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <ks0108b_write>

        // Perform a dummy read to transfer to register
        ks0108b_read (CMD_READ | cs_select);
    1b88:	fe e0       	ldi	r31, 0x0E	; 14
    1b8a:	bf 2a       	or	r11, r31
    1b8c:	c5 01       	movw	r24, r10
    1b8e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <ks0108b_read>
    1b92:	26 01       	movw	r4, r12
    1b94:	68 2c       	mov	r6, r8
    1b96:	6c 0c       	add	r6, r12
        {
            uint8_t data;
            uint8_t screen_data;

            // Read the data from the screen.
            screen_data = ks0108b_read (CMD_READ | cs_select);
    1b98:	c5 01       	movw	r24, r10
    1b9a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <ks0108b_read>
            data = *buf;
    1b9e:	f2 01       	movw	r30, r4
    1ba0:	90 81       	ld	r25, Z

            // Apply any reverse setting; if the reverse bit is set then
            // we negate the data
            if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    1ba2:	f1 10       	cpse	r15, r1
    1ba4:	01 c0       	rjmp	.+2      	; 0x1ba8 <read_block+0xa2>
                screen_data = ~screen_data;
    1ba6:	80 95       	com	r24

            // Perform the merge
            if ((mode & MODE_OP_MASK) != 0)
    1ba8:	11 23       	and	r17, r17
    1baa:	51 f0       	breq	.+20     	; 0x1bc0 <read_block+0xba>
merge_column (uint8_t new_column, uint8_t orig_column, uint8_t mode)
{
    // Normalise the mode to retrieve the operator.
    mode &= MODE_OP_MASK;

    if (mode >= MODE_XOR)
    1bac:	14 30       	cpi	r17, 0x04	; 4
    1bae:	38 f0       	brcs	.+14     	; 0x1bbe <read_block+0xb8>
    {
        // This is XOR or NAND */
        if ((mode & MODE_XOR) != 0)
    1bb0:	ee 20       	and	r14, r14
    1bb2:	11 f0       	breq	.+4      	; 0x1bb8 <read_block+0xb2>
        {
            // MODE_XOR - XOR the existing buffer data with read data.
            new_column ^= orig_column;
    1bb4:	98 27       	eor	r25, r24
    1bb6:	04 c0       	rjmp	.+8      	; 0x1bc0 <read_block+0xba>
        }
        else
        {
            // MODE_NAND - Clear bits according to buffer.
            new_column = ~new_column & orig_column;
    1bb8:	90 95       	com	r25
    1bba:	98 23       	and	r25, r24
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <read_block+0xba>
        }
    }
    else
    {
        // MODE_OR - Set bits according to buffer.
        new_column |= orig_column;
    1bbe:	98 2b       	or	r25, r24
            // Perform the merge
            if ((mode & MODE_OP_MASK) != 0)
                data = merge_column (data, screen_data, mode);

            // MODE_MERGE - Merge in the data in a copy mode
            data = (data & mask) | (screen_data & ~mask);
    1bc0:	90 23       	and	r25, r16
    1bc2:	89 21       	and	r24, r9
    1bc4:	98 2b       	or	r25, r24

            // Assign the data to the buffer.
            *buf++ = data;
    1bc6:	f2 01       	movw	r30, r4
    1bc8:	91 93       	st	Z+, r25
    1bca:	2f 01       	movw	r4, r30
        }
        while (--num_bytes1 > 0);
    1bcc:	6e 12       	cpse	r6, r30
    1bce:	e4 cf       	rjmp	.-56     	; 0x1b98 <read_block+0x92>
    1bd0:	8a 94       	dec	r8
    1bd2:	48 2d       	mov	r20, r8
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	4f 5f       	subi	r20, 0xFF	; 255
    1bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bda:	c4 0e       	add	r12, r20
    1bdc:	d5 1e       	adc	r13, r21

        // See if we have finished.
        if ((num_bytes1 = num_bytes2) == 0)
    1bde:	77 20       	and	r7, r7
    1be0:	39 f0       	breq	.+14     	; 0x1bf0 <read_block+0xea>
        // Select proper chip we move to the other one, this catches any
        // overrun from previous side.
        cs_select = CMD_CS1;

        // We have swapped chips so we will start from column 0.
        x = 0;
    1be2:	90 e0       	ldi	r25, 0x00	; 0
        num_bytes1 = num_bytes2;        // Set up for num_bytes1
        num_bytes2 = 0;                 // Terminate on next loop

        // Select proper chip we move to the other one, this catches any
        // overrun from previous side.
        cs_select = CMD_CS1;
    1be4:	a1 2c       	mov	r10, r1
    1be6:	80 e1       	ldi	r24, 0x10	; 16
    1be8:	b8 2e       	mov	r11, r24
        // See if we have finished.
        if ((num_bytes1 = num_bytes2) == 0)
            break;

        /* Set up for the next loop */
        num_bytes1 = num_bytes2;        // Set up for num_bytes1
    1bea:	87 2c       	mov	r8, r7
        num_bytes2 = 0;                 // Terminate on next loop
    1bec:	71 2c       	mov	r7, r1
    1bee:	c3 cf       	rjmp	.-122    	; 0x1b76 <read_block+0x70>
        cs_select = CMD_CS1;

        // We have swapped chips so we will start from column 0.
        x = 0;
    }
}
    1bf0:	0f 90       	pop	r0
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	bf 90       	pop	r11
    1c04:	af 90       	pop	r10
    1c06:	9f 90       	pop	r9
    1c08:	8f 90       	pop	r8
    1c0a:	7f 90       	pop	r7
    1c0c:	6f 90       	pop	r6
    1c0e:	5f 90       	pop	r5
    1c10:	4f 90       	pop	r4
    1c12:	08 95       	ret

00001c14 <write_block>:
/// @param [in] buf Location to write from.
/// @param [in] mode The merge mode required.
///
void
write_block (uint8_t x, uint8_t y_row, uint8_t length, uint8_t *buf, uint8_t mode)
{
    1c14:	8f 92       	push	r8
    1c16:	9f 92       	push	r9
    1c18:	af 92       	push	r10
    1c1a:	bf 92       	push	r11
    1c1c:	cf 92       	push	r12
    1c1e:	df 92       	push	r13
    1c20:	ef 92       	push	r14
    1c22:	ff 92       	push	r15
    1c24:	0f 93       	push	r16
    1c26:	1f 93       	push	r17
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	1f 92       	push	r1
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	98 2f       	mov	r25, r24
    1c34:	86 2f       	mov	r24, r22
    1c36:	d4 2e       	mov	r13, r20
    1c38:	49 01       	movw	r8, r18
    1c3a:	b0 2e       	mov	r11, r16
    uint8_t num_bytes2;                 // Side #2 number of bytes
    uint16_t cs_select;                 // The cs_select bits

    // Set the y-position enable the display, write to both chips/pages
    // concurrently.
    set_y_position (y_row);             // Set row
    1c3c:	99 83       	std	Y+1, r25	; 0x01
    1c3e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <set_y_position>

    // See if we are writing to the 2nd side only accounting for x being
    // larger than 63
    if (x >= 64)
    1c42:	99 81       	ldd	r25, Y+1	; 0x01
    1c44:	90 34       	cpi	r25, 0x40	; 64
    1c46:	20 f0       	brcs	.+8      	; 0x1c50 <write_block+0x3c>
    {
        x -= 64;                        // Normalise for chip
    1c48:	90 54       	subi	r25, 0x40	; 64

        // We are on the 2nd chip first so swap the lcd_read value
        cs_select = CMD_CS1;
    1c4a:	00 e0       	ldi	r16, 0x00	; 0
    1c4c:	10 e1       	ldi	r17, 0x10	; 16
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <write_block+0x40>
    }
    else
    {
        // We are on the first chip.
        cs_select = CMD_CS2;
    1c50:	00 e0       	ldi	r16, 0x00	; 0
    1c52:	10 e2       	ldi	r17, 0x20	; 32
    }

    s = 64 - x;                         // Distance to edge
    1c54:	80 e4       	ldi	r24, 0x40	; 64
    1c56:	89 1b       	sub	r24, r25
    if (length > s)
    1c58:	8d 15       	cp	r24, r13
    1c5a:	20 f4       	brcc	.+8      	; 0x1c64 <write_block+0x50>
    {
        num_bytes1 = s;                 // How much to read in the first loop
        num_bytes2 = length - s;        // How much to read in the second loop
    1c5c:	cd 2c       	mov	r12, r13
    1c5e:	c8 1a       	sub	r12, r24
    1c60:	d8 2e       	mov	r13, r24
    1c62:	01 c0       	rjmp	.+2      	; 0x1c66 <write_block+0x52>
    }
    else
    {
        num_bytes1 = length;
        num_bytes2 = 0;
    1c64:	c1 2c       	mov	r12, r1

            // Get the data from the buffer
            data = *buf++;

            // Perform a reverse if required.
            if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    1c66:	2b 2d       	mov	r18, r11
    1c68:	21 70       	andi	r18, 0x01	; 1
    1c6a:	b2 2e       	mov	r11, r18

    // Iterate over both sides, we compute the break condition in the loop.
    for (;;)
    {
        // Set the column position.
        ks0108b_write (CMD_COLUMN | cs_select | (x & 0x3f));
    1c6c:	98 01       	movw	r18, r16
    1c6e:	20 64       	ori	r18, 0x40	; 64
    1c70:	38 60       	ori	r19, 0x08	; 8
    1c72:	9f 73       	andi	r25, 0x3F	; 63
    1c74:	a9 01       	movw	r20, r18
    1c76:	49 2b       	or	r20, r25
    1c78:	ca 01       	movw	r24, r20
    1c7a:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <ks0108b_write>
    1c7e:	74 01       	movw	r14, r8
            // Perform a reverse if required.
            if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
                data = ~data;

            // Write the data to the screen.
            ks0108b_write (CMD_WRITE | cs_select | data);
    1c80:	1a 60       	ori	r17, 0x0A	; 10
    1c82:	a8 2c       	mov	r10, r8
    1c84:	ad 0c       	add	r10, r13
        do
        {
            uint8_t data;

            // Get the data from the buffer
            data = *buf++;
    1c86:	f7 01       	movw	r30, r14
    1c88:	81 91       	ld	r24, Z+
    1c8a:	7f 01       	movw	r14, r30

            // Perform a reverse if required.
            if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    1c8c:	b1 10       	cpse	r11, r1
    1c8e:	01 c0       	rjmp	.+2      	; 0x1c92 <write_block+0x7e>
                data = ~data;
    1c90:	80 95       	com	r24

            // Write the data to the screen.
            ks0108b_write (CMD_WRITE | cs_select | data);
    1c92:	98 01       	movw	r18, r16
    1c94:	28 2b       	or	r18, r24
    1c96:	c9 01       	movw	r24, r18
    1c98:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <ks0108b_write>
        }
        while (--num_bytes1 > 0);
    1c9c:	ae 10       	cpse	r10, r14
    1c9e:	f3 cf       	rjmp	.-26     	; 0x1c86 <write_block+0x72>
    1ca0:	da 94       	dec	r13
    1ca2:	4d 2d       	mov	r20, r13
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
    1ca6:	4f 5f       	subi	r20, 0xFF	; 255
    1ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    1caa:	84 0e       	add	r8, r20
    1cac:	95 1e       	adc	r9, r21

        // See if we have finished.
        if ((num_bytes1 = num_bytes2) == 0)
    1cae:	cc 20       	and	r12, r12
    1cb0:	31 f0       	breq	.+12     	; 0x1cbe <write_block+0xaa>
        // Select proper chip we move to the other one, this catches any
        // overrun from previous side.
        cs_select = CMD_CS1;

        // We have swapped chips so we will start from column 0.
        x = 0;
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
        num_bytes1 = num_bytes2;        // Set up for num_bytes1
        num_bytes2 = 0;                 // Terminate on next loop

        // Select proper chip we move to the other one, this catches any
        // overrun from previous side.
        cs_select = CMD_CS1;
    1cb4:	00 e0       	ldi	r16, 0x00	; 0
    1cb6:	10 e1       	ldi	r17, 0x10	; 16
        // See if we have finished.
        if ((num_bytes1 = num_bytes2) == 0)
            break;

        /* Set up for the next loop */
        num_bytes1 = num_bytes2;        // Set up for num_bytes1
    1cb8:	dc 2c       	mov	r13, r12
        num_bytes2 = 0;                 // Terminate on next loop
    1cba:	c1 2c       	mov	r12, r1
    1cbc:	d7 cf       	rjmp	.-82     	; 0x1c6c <write_block+0x58>
        cs_select = CMD_CS1;

        // We have swapped chips so we will start from column 0.
        x = 0;
    }
}
    1cbe:	0f 90       	pop	r0
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	1f 91       	pop	r17
    1cc6:	0f 91       	pop	r16
    1cc8:	ff 90       	pop	r15
    1cca:	ef 90       	pop	r14
    1ccc:	df 90       	pop	r13
    1cce:	cf 90       	pop	r12
    1cd0:	bf 90       	pop	r11
    1cd2:	af 90       	pop	r10
    1cd4:	9f 90       	pop	r9
    1cd6:	8f 90       	pop	r8
    1cd8:	08 95       	ret

00001cda <ks0108b_init>:
///
void
ks0108b_init (void)
{
    // Set up the screen size.
    x_dim = SCREEN_WIDTH;
    1cda:	80 e8       	ldi	r24, 0x80	; 128
    1cdc:	80 93 02 03 	sts	0x0302, r24
    y_dim = SCREEN_HEIGHT;
    1ce0:	80 e4       	ldi	r24, 0x40	; 64
    1ce2:	80 93 f1 02 	sts	0x02F1, r24

    // Perform a chip reset; with ^RESet low then the chip should reset.
    PORTC = (1 << RW);
    1ce6:	84 e0       	ldi	r24, 0x04	; 4
    1ce8:	88 b9       	out	0x08, r24	; 8
    // Enable the outputs
    DDRC = ((1 << EN) | (1 << RS) | (1 << RW) | (1 << RES) | (1 << CS1) | (1 << CS2));
    1cea:	8f e3       	ldi	r24, 0x3F	; 63
    1cec:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cee:	2f ef       	ldi	r18, 0xFF	; 255
    1cf0:	8d ee       	ldi	r24, 0xED	; 237
    1cf2:	92 e0       	ldi	r25, 0x02	; 2
    1cf4:	21 50       	subi	r18, 0x01	; 1
    1cf6:	80 40       	sbci	r24, 0x00	; 0
    1cf8:	90 40       	sbci	r25, 0x00	; 0
    1cfa:	e1 f7       	brne	.-8      	; 0x1cf4 <ks0108b_init+0x1a>
    1cfc:	00 c0       	rjmp	.+0      	; 0x1cfe <ks0108b_init+0x24>
    1cfe:	00 00       	nop
    _delay_ms (60);
    PORTC |= (1 << RES);
    1d00:	43 9a       	sbi	0x08, 3	; 8

    // Enable the display
    ks0108b_write (CMD_DISPLAY_ON);         // Set up data on lines
    1d02:	8f e3       	ldi	r24, 0x3F	; 63
    1d04:	98 e3       	ldi	r25, 0x38	; 56
    1d06:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <ks0108b_write>

    // Reset the column cache position.
    y_row = 0xff;
    1d0a:	8f ef       	ldi	r24, 0xFF	; 255
    1d0c:	80 93 11 01 	sts	0x0111, r24
    1d10:	08 95       	ret

00001d12 <ks0108b_screen_clear>:
/// @param [in] mode The mode to clear the screen
///                  0x00 MODE_REVERSE - clears with 1's
///                  0x01 MODE_NORMAL  - clears with 0's
void
ks0108b_screen_clear (uint8_t mode)
{
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    uint8_t data;                       // The data to write to screen.
    uint8_t yy;                         // The y coordinate.

    // Determine if the screen is reversed or not. In normal mode we write
    // 0x00 when reversed we write 0xff. Note: 0x00-0x01 = 0xff !!
    data = (mode & MODE_NORMAL_MASK) - 1;
    1d1a:	81 70       	andi	r24, 0x01	; 1
    1d1c:	81 50       	subi	r24, 0x01	; 1

    // Iterate over all of the rows.
    for (yy = 0; yy < SCREEN_ROWS; yy++)
    1d1e:	10 e0       	ldi	r17, 0x00	; 0
        set_y_position (yy);            // Set row
        ks0108b_write(CMD_COLUMN|CMD_CS12); // Set column

        // Write the data
        for (xx = 0; xx < SCREEN_PAGE; xx++)
            ks0108b_write (CMD_WRITE | CMD_CS12 | data);
    1d20:	c8 2f       	mov	r28, r24
    1d22:	d0 e0       	ldi	r29, 0x00	; 0
    1d24:	da 63       	ori	r29, 0x3A	; 58
    {
        uint8_t xx;                     // The x coordinate.

        // Set the row and column on both chips. We write to both chips at
        // the same time to speed up the screen clear
        set_y_position (yy);            // Set row
    1d26:	81 2f       	mov	r24, r17
    1d28:	0e 94 76 0d 	call	0x1aec	; 0x1aec <set_y_position>
        ks0108b_write(CMD_COLUMN|CMD_CS12); // Set column
    1d2c:	80 e4       	ldi	r24, 0x40	; 64
    1d2e:	98 e3       	ldi	r25, 0x38	; 56
    1d30:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <ks0108b_write>
    1d34:	00 e4       	ldi	r16, 0x40	; 64

        // Write the data
        for (xx = 0; xx < SCREEN_PAGE; xx++)
            ks0108b_write (CMD_WRITE | CMD_CS12 | data);
    1d36:	ce 01       	movw	r24, r28
    1d38:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <ks0108b_write>
    1d3c:	01 50       	subi	r16, 0x01	; 1
        // the same time to speed up the screen clear
        set_y_position (yy);            // Set row
        ks0108b_write(CMD_COLUMN|CMD_CS12); // Set column

        // Write the data
        for (xx = 0; xx < SCREEN_PAGE; xx++)
    1d3e:	d9 f7       	brne	.-10     	; 0x1d36 <ks0108b_screen_clear+0x24>
    // Determine if the screen is reversed or not. In normal mode we write
    // 0x00 when reversed we write 0xff. Note: 0x00-0x01 = 0xff !!
    data = (mode & MODE_NORMAL_MASK) - 1;

    // Iterate over all of the rows.
    for (yy = 0; yy < SCREEN_ROWS; yy++)
    1d40:	1f 5f       	subi	r17, 0xFF	; 255
    1d42:	18 30       	cpi	r17, 0x08	; 8
    1d44:	81 f7       	brne	.-32     	; 0x1d26 <ks0108b_screen_clear+0x14>

        // Write the data
        for (xx = 0; xx < SCREEN_PAGE; xx++)
            ks0108b_write (CMD_WRITE | CMD_CS12 | data);
    }
}
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	08 95       	ret

00001d50 <ks0108b_vscroll>:
/// @param [in] pixels The number of pixels to scroll where -ve is up
/// @param [in] mode The current mode.
///
void
ks0108b_vscroll (uint8_t *buf, int8_t pixels, uint8_t mode)
{
    1d50:	df 92       	push	r13
    1d52:	ef 92       	push	r14
    1d54:	ff 92       	push	r15
    1d56:	0f 93       	push	r16
    1d58:	1f 93       	push	r17
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	ec 01       	movw	r28, r24
    uint8_t yy;                         // The y coordinate.
    
    // TODO: Currently we ignore pixels and simple do -8.
    
    // Only use the normal and reverse mode
    mode &= MODE_NORMAL_MASK;
    1d60:	84 2f       	mov	r24, r20
    1d62:	81 70       	andi	r24, 0x01	; 1
    1d64:	f8 2e       	mov	r15, r24
    
    // Iterate over all of the rows.
    for (yy = 0; yy < SCREEN_ROWS; yy++)
    1d66:	10 e0       	ldi	r17, 0x00	; 0
    1d68:	dd 24       	eor	r13, r13
    1d6a:	d3 94       	inc	r13
    1d6c:	d1 0e       	add	r13, r17
    {
        // Read in display data or clear the line
        if (yy == (SCREEN_ROWS - 1))
    1d6e:	17 30       	cpi	r17, 0x07	; 7
    1d70:	31 f4       	brne	.+12     	; 0x1d7e <ks0108b_vscroll+0x2e>
            memset (buf, 0, SCREEN_WIDTH);
    1d72:	80 e8       	ldi	r24, 0x80	; 128
    1d74:	fe 01       	movw	r30, r28
    1d76:	11 92       	st	Z+, r1
    1d78:	8a 95       	dec	r24
    1d7a:	e9 f7       	brne	.-6      	; 0x1d76 <ks0108b_vscroll+0x26>
    1d7c:	08 c0       	rjmp	.+16     	; 0x1d8e <ks0108b_vscroll+0x3e>
        else
            read_block (0, yy + 1, SCREEN_WIDTH, buf, 0x00, mode);
    1d7e:	ef 2c       	mov	r14, r15
    1d80:	00 e0       	ldi	r16, 0x00	; 0
    1d82:	9e 01       	movw	r18, r28
    1d84:	40 e8       	ldi	r20, 0x80	; 128
    1d86:	6d 2d       	mov	r22, r13
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <read_block>
        
        // Write data back to screen
        write_block (0, yy, SCREEN_WIDTH, buf, mode);
    1d8e:	0f 2d       	mov	r16, r15
    1d90:	9e 01       	movw	r18, r28
    1d92:	40 e8       	ldi	r20, 0x80	; 128
    1d94:	61 2f       	mov	r22, r17
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <write_block>
    
    // Only use the normal and reverse mode
    mode &= MODE_NORMAL_MASK;
    
    // Iterate over all of the rows.
    for (yy = 0; yy < SCREEN_ROWS; yy++)
    1d9c:	1d 2d       	mov	r17, r13
    1d9e:	18 30       	cpi	r17, 0x08	; 8
    1da0:	19 f7       	brne	.-58     	; 0x1d68 <ks0108b_vscroll+0x18>
            read_block (0, yy + 1, SCREEN_WIDTH, buf, 0x00, mode);
        
        // Write data back to screen
        write_block (0, yy, SCREEN_WIDTH, buf, mode);
    }
}
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	0f 91       	pop	r16
    1daa:	ff 90       	pop	r15
    1dac:	ef 90       	pop	r14
    1dae:	df 90       	pop	r13
    1db0:	08 95       	ret

00001db2 <ks0108b_screen_reverse>:
///
/// @param [in] buffer A buffer to use for 8 lines of screen data.
///
void
ks0108b_screen_reverse (uint8_t *buf)
{
    1db2:	ef 92       	push	r14
    1db4:	0f 93       	push	r16
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	ec 01       	movw	r28, r24
    uint8_t yy;

    // This is a reverse mode switch, do a logical inversion of the screen.
    for (yy = 0; yy < 8; yy++)	//loop for each page
    1dbe:	10 e0       	ldi	r17, 0x00	; 0
    {
        // Read in display data and invert it
        read_block (0, yy, SCREEN_WIDTH, buf, 0x00, MODE_NORMAL);
    1dc0:	ee 24       	eor	r14, r14
    1dc2:	e3 94       	inc	r14
    1dc4:	00 e0       	ldi	r16, 0x00	; 0
    1dc6:	9e 01       	movw	r18, r28
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	61 2f       	mov	r22, r17
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <read_block>
        // Write inverted data back to screen
        write_block (0, yy, SCREEN_WIDTH, buf, MODE_REVERSE);
    1dd2:	9e 01       	movw	r18, r28
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	61 2f       	mov	r22, r17
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <write_block>
ks0108b_screen_reverse (uint8_t *buf)
{
    uint8_t yy;

    // This is a reverse mode switch, do a logical inversion of the screen.
    for (yy = 0; yy < 8; yy++)	//loop for each page
    1dde:	1f 5f       	subi	r17, 0xFF	; 255
    1de0:	18 30       	cpi	r17, 0x08	; 8
    1de2:	71 f7       	brne	.-36     	; 0x1dc0 <ks0108b_screen_reverse+0xe>
        // Read in display data and invert it
        read_block (0, yy, SCREEN_WIDTH, buf, 0x00, MODE_NORMAL);
        // Write inverted data back to screen
        write_block (0, yy, SCREEN_WIDTH, buf, MODE_REVERSE);
    }
}
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	1f 91       	pop	r17
    1dea:	0f 91       	pop	r16
    1dec:	ef 90       	pop	r14
    1dee:	08 95       	ret

00001df0 <ks0108b_set_column>:
///                    Merge required - NAND bits cleared in buffer
///                    buffer[x] = ~buffer[x] & read_data
///
void
ks0108b_set_column (uint8_t x, uint8_t y_row, uint8_t data, uint8_t mask, uint8_t mode)
{
    1df0:	af 92       	push	r10
    1df2:	bf 92       	push	r11
    1df4:	cf 92       	push	r12
    1df6:	df 92       	push	r13
    1df8:	ef 92       	push	r14
    1dfa:	ff 92       	push	r15
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	c8 2f       	mov	r28, r24
    1e06:	86 2f       	mov	r24, r22
    1e08:	d4 2e       	mov	r13, r20
    1e0a:	b2 2e       	mov	r11, r18
    1e0c:	c0 2e       	mov	r12, r16
    uint16_t cs_select;

    // Set the y-position enable the display, write to both chips/pages
    // concurrently.
    set_y_position (y_row);              // Set row
    1e0e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <set_y_position>

    // Set the x-position chip select.
    if (x < 64)
    1e12:	c0 34       	cpi	r28, 0x40	; 64
    1e14:	18 f4       	brcc	.+6      	; 0x1e1c <ks0108b_set_column+0x2c>
        cs_select = CMD_CS2;
    1e16:	00 e0       	ldi	r16, 0x00	; 0
    1e18:	10 e2       	ldi	r17, 0x20	; 32
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <ks0108b_set_column+0x30>
    else
        cs_select = CMD_CS1;
    1e1c:	00 e0       	ldi	r16, 0x00	; 0
    1e1e:	10 e1       	ldi	r17, 0x10	; 16

    // Set the column we are writing.
    ks0108b_write (CMD_COLUMN | cs_select | (x & 0x3f)); // Set column
    1e20:	cf 73       	andi	r28, 0x3F	; 63
    1e22:	d0 e0       	ldi	r29, 0x00	; 0
    1e24:	c0 64       	ori	r28, 0x40	; 64
    1e26:	d8 60       	ori	r29, 0x08	; 8
    1e28:	c0 2b       	or	r28, r16
    1e2a:	d1 2b       	or	r29, r17
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <ks0108b_write>
    1e32:	8c 2d       	mov	r24, r12
    1e34:	81 70       	andi	r24, 0x01	; 1
    1e36:	a8 2e       	mov	r10, r24

    // Handle any buffer merging on the read.
    if ((mode & MODE_MODIFIER) != 0)
    1e38:	8c 2d       	mov	r24, r12
    1e3a:	86 71       	andi	r24, 0x16	; 22
    1e3c:	09 f1       	breq	.+66     	; 0x1e80 <ks0108b_set_column+0x90>
    {
        uint8_t screen_data;

        // Perform a dummy read to transfer to register
        ks0108b_read (CMD_READ | cs_select);
    1e3e:	78 01       	movw	r14, r16
    1e40:	8e e0       	ldi	r24, 0x0E	; 14
    1e42:	f8 2a       	or	r15, r24
    1e44:	c7 01       	movw	r24, r14
    1e46:	0e 94 57 0d 	call	0x1aae	; 0x1aae <ks0108b_read>

        // We need to perform a merge. Get the data from controller
        screen_data = ks0108b_read (CMD_READ | cs_select);
    1e4a:	c7 01       	movw	r24, r14
    1e4c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <ks0108b_read>

        // Apply any reverse setting; if the reverse bit is set then we
        // negate the data
        if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    1e50:	a1 10       	cpse	r10, r1
    1e52:	01 c0       	rjmp	.+2      	; 0x1e56 <ks0108b_set_column+0x66>
            screen_data = ~screen_data;
    1e54:	80 95       	com	r24

        // Perform the merge
        if ((mode & MODE_OP_MASK) != 0)
    1e56:	9c 2d       	mov	r25, r12
    1e58:	96 70       	andi	r25, 0x06	; 6
    1e5a:	51 f0       	breq	.+20     	; 0x1e70 <ks0108b_set_column+0x80>
merge_column (uint8_t new_column, uint8_t orig_column, uint8_t mode)
{
    // Normalise the mode to retrieve the operator.
    mode &= MODE_OP_MASK;

    if (mode >= MODE_XOR)
    1e5c:	94 30       	cpi	r25, 0x04	; 4
    1e5e:	38 f0       	brcs	.+14     	; 0x1e6e <ks0108b_set_column+0x7e>
    {
        // This is XOR or NAND */
        if ((mode & MODE_XOR) != 0)
    1e60:	c2 fe       	sbrs	r12, 2
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <ks0108b_set_column+0x78>
        {
            // MODE_XOR - XOR the existing buffer data with read data.
            new_column ^= orig_column;
    1e64:	d8 26       	eor	r13, r24
    1e66:	04 c0       	rjmp	.+8      	; 0x1e70 <ks0108b_set_column+0x80>
        }
        else
        {
            // MODE_NAND - Clear bits according to buffer.
            new_column = ~new_column & orig_column;
    1e68:	d0 94       	com	r13
    1e6a:	d8 22       	and	r13, r24
    1e6c:	01 c0       	rjmp	.+2      	; 0x1e70 <ks0108b_set_column+0x80>
        }
    }
    else
    {
        // MODE_OR - Set bits according to buffer.
        new_column |= orig_column;
    1e6e:	d8 2a       	or	r13, r24
        // Perform the merge
        if ((mode & MODE_OP_MASK) != 0)
            data = merge_column (data, screen_data, mode);

        // MODE_MERGE - Merge in the data in a copy mode
        data = (data & mask) | (screen_data & ~mask);
    1e70:	db 20       	and	r13, r11
    1e72:	2b 2d       	mov	r18, r11
    1e74:	20 95       	com	r18
    1e76:	28 23       	and	r18, r24
    1e78:	d2 2a       	or	r13, r18

        // Reset the position ready to write the data.
        ks0108b_write (CMD_COLUMN | cs_select | (x & 0x3f));
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <ks0108b_write>
    }

    // Apply any reverse setting; if the reverse bit is set then we
    // negate the data
    if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    1e80:	a1 10       	cpse	r10, r1
    1e82:	01 c0       	rjmp	.+2      	; 0x1e86 <ks0108b_set_column+0x96>
        data = ~data;
    1e84:	d0 94       	com	r13

    // Write the data.
    ks0108b_write (CMD_WRITE | cs_select | data);
    1e86:	c8 01       	movw	r24, r16
    1e88:	9a 60       	ori	r25, 0x0A	; 10
    1e8a:	8d 29       	or	r24, r13
}
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	df 90       	pop	r13
    1e9a:	cf 90       	pop	r12
    1e9c:	bf 90       	pop	r11
    1e9e:	af 90       	pop	r10
    // negate the data
    if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
        data = ~data;

    // Write the data.
    ks0108b_write (CMD_WRITE | cs_select | data);
    1ea0:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <ks0108b_write>

00001ea4 <ks0108b_set_pixel>:
///                    Merge - XOR bits set in buffer
///                    buffer[x] = buffer[x] ^ read_data
///
void
ks0108b_set_pixel (uint8_t x, uint8_t y, uint8_t mode)
{
    1ea4:	0f 93       	push	r16
    1ea6:	04 2f       	mov	r16, r20
    //
    // Convert y to a row value.
    // Set data to pixel to write by bit shifting 0 to the top bit.
    // Pass the mode in the call
    // 1 << y & 0x7
    mask = pgm_read_byte (&bit_shift_single_maskP[y & 0x7]);
    1ea8:	e6 2f       	mov	r30, r22
    1eaa:	e7 70       	andi	r30, 0x07	; 7
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	e0 59       	subi	r30, 0x90	; 144
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	44 91       	lpm	r20, Z
    ks0108b_set_column (x, y >> 3, mask, mask, MODE_MERGE | mode);
    1eb4:	00 61       	ori	r16, 0x10	; 16
    1eb6:	66 95       	lsr	r22
    1eb8:	66 95       	lsr	r22
    1eba:	66 95       	lsr	r22
    1ebc:	24 2f       	mov	r18, r20
    1ebe:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <ks0108b_set_column>
}
    1ec2:	0f 91       	pop	r16
    1ec4:	08 95       	ret

00001ec6 <ks0108b_vbitblt>:
///
///             0x10 - MODE_FILL
///                    Interpret the data as a mask and fill.
void
ks0108b_vbitblt (uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t mode, uint8_t *data)
{
    1ec6:	2f 92       	push	r2
    1ec8:	3f 92       	push	r3
    1eca:	4f 92       	push	r4
    1ecc:	5f 92       	push	r5
    1ece:	6f 92       	push	r6
    1ed0:	7f 92       	push	r7
    1ed2:	8f 92       	push	r8
    1ed4:	9f 92       	push	r9
    1ed6:	af 92       	push	r10
    1ed8:	bf 92       	push	r11
    1eda:	cf 92       	push	r12
    1edc:	df 92       	push	r13
    1ede:	ef 92       	push	r14
    1ee0:	ff 92       	push	r15
    1ee2:	0f 93       	push	r16
    1ee4:	1f 93       	push	r17
    1ee6:	cf 93       	push	r28
    1ee8:	df 93       	push	r29
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	60 97       	sbiw	r28, 0x10	; 16
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	48 2e       	mov	r4, r24
    1efc:	64 2e       	mov	r6, r20
    1efe:	50 2f       	mov	r21, r16
    1f00:	f8 8a       	std	Y+16, r15	; 0x10
    1f02:	ef 86       	std	Y+15, r14	; 0x0f
    uint8_t mask_bot;                   // Bottom line mask
    int offset;                         // Offset into the data

    // Calculate how much to shift the data bytes to line them up with the
    // pages. Set up the row flag if the pages are aligned.
    shift_top = y & 0x7;
    1f04:	86 2f       	mov	r24, r22
    1f06:	87 70       	andi	r24, 0x07	; 7
    1f08:	58 2e       	mov	r5, r24
    shift_bot = 8 - shift_top;          // Bottom shift of opposite of top
    1f0a:	48 e0       	ldi	r20, 0x08	; 8
    1f0c:	f4 2e       	mov	r15, r20
    1f0e:	f8 1a       	sub	r15, r24

    // Number of pages(rows) the image occupies. We need to loop through all
    // of these, each gets pixels changed.
    page_rows = (uint8_t)(height + shift_top + 7) >> 3;      // Divide by 8
    1f10:	87 e0       	ldi	r24, 0x07	; 7
    1f12:	82 0f       	add	r24, r18
    1f14:	95 2c       	mov	r9, r5
    1f16:	98 0e       	add	r9, r24
    1f18:	96 94       	lsr	r9
    1f1a:	96 94       	lsr	r9
    1f1c:	96 94       	lsr	r9
    image_rows = (uint8_t)(height + 7) >> 3;                 // Divide by 8
    1f1e:	86 95       	lsr	r24
    1f20:	86 95       	lsr	r24
    1f22:	86 95       	lsr	r24
    1f24:	8f 83       	std	Y+7, r24	; 0x07

    if (height < 8)
    1f26:	28 30       	cpi	r18, 0x08	; 8
    1f28:	b8 f4       	brcc	.+46     	; 0x1f58 <ks0108b_vbitblt+0x92>
    {
        // Mask for the row bits.
        mask_top = (1 << height) - 1;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	01 c0       	rjmp	.+2      	; 0x1f32 <ks0108b_vbitblt+0x6c>
    1f30:	88 0f       	add	r24, r24
    1f32:	2a 95       	dec	r18
    1f34:	ea f7       	brpl	.-6      	; 0x1f30 <ks0108b_vbitblt+0x6a>
    1f36:	81 50       	subi	r24, 0x01	; 1
        // mask_bot needs to have 0's for each pixel in the bottom row NOT
        // occupied by new image data
        mask_bot = mask_top >> shift_bot;
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	9c 01       	movw	r18, r24
    1f3c:	0f 2c       	mov	r0, r15
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <ks0108b_vbitblt+0x7e>
    1f40:	35 95       	asr	r19
    1f42:	27 95       	ror	r18
    1f44:	0a 94       	dec	r0
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <ks0108b_vbitblt+0x7a>
    1f48:	72 2e       	mov	r7, r18
        // mask_top needs to have 0's for each pixel in the top row NOT occupied
        // by new image data
        mask_top = mask_top << shift_top;
    1f4a:	88 2e       	mov	r8, r24
    1f4c:	05 2c       	mov	r0, r5
    1f4e:	01 c0       	rjmp	.+2      	; 0x1f52 <ks0108b_vbitblt+0x8c>
    1f50:	88 0c       	add	r8, r8
    1f52:	0a 94       	dec	r0
    1f54:	ea f7       	brpl	.-6      	; 0x1f50 <ks0108b_vbitblt+0x8a>
    1f56:	1e c0       	rjmp	.+60     	; 0x1f94 <ks0108b_vbitblt+0xce>
    else
    {
        mask_bot = 0xff;
        // mask_top needs to have 0's for each pixel in the top row NOT occupied
        // by new image data
        mask_top = mask_bot << shift_top;
    1f58:	ef ef       	ldi	r30, 0xFF	; 255
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	8e 2e       	mov	r8, r30
    1f5e:	05 2c       	mov	r0, r5
    1f60:	01 c0       	rjmp	.+2      	; 0x1f64 <ks0108b_vbitblt+0x9e>
    1f62:	88 0c       	add	r8, r8
    1f64:	0a 94       	dec	r0
    1f66:	ea f7       	brpl	.-6      	; 0x1f62 <ks0108b_vbitblt+0x9c>
        if (((height+y) & 7) != 0)
    1f68:	86 2f       	mov	r24, r22
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	82 0f       	add	r24, r18
    1f6e:	91 1d       	adc	r25, r1
    1f70:	87 70       	andi	r24, 0x07	; 7
    1f72:	99 27       	eor	r25, r25
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	61 f0       	breq	.+24     	; 0x1f90 <ks0108b_vbitblt+0xca>
        {
            // mask_bot needs to have 0's for each pixel in the bottom row NOT
            // occupied by new image data
            mask_bot >>= (8 - ((height + y) & 7));
    1f78:	28 e0       	ldi	r18, 0x08	; 8
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	28 1b       	sub	r18, r24
    1f7e:	39 0b       	sbc	r19, r25
    1f80:	df 01       	movw	r26, r30
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <ks0108b_vbitblt+0xc2>
    1f84:	b5 95       	asr	r27
    1f86:	a7 95       	ror	r26
    1f88:	2a 95       	dec	r18
    1f8a:	e2 f7       	brpl	.-8      	; 0x1f84 <ks0108b_vbitblt+0xbe>
    1f8c:	7a 2e       	mov	r7, r26
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <ks0108b_vbitblt+0xce>
        // by new image data
        mask_top = mask_top << shift_top;
    }
    else
    {
        mask_bot = 0xff;
    1f90:	77 24       	eor	r7, r7
    1f92:	7a 94       	dec	r7
            mask_bot >>= (8 - ((height + y) & 7));
        }
    }

    // Determine the source of the data
    if (mode & MODE_FILL)
    1f94:	53 ff       	sbrs	r21, 3
    1f96:	15 c0       	rjmp	.+42     	; 0x1fc2 <ks0108b_vbitblt+0xfc>
    {
        // Knock off the fill mode. 
        mode &= ~MODE_FILL;
    1f98:	57 7f       	andi	r21, 0xF7	; 247
        
        // Re-form the data that was passed. This would be better taken out
        // of the loop as it is static.
        data[0] = (data[0] << shift_top) | (data[0] >> shift_bot);
    1f9a:	ef 85       	ldd	r30, Y+15	; 0x0f
    1f9c:	f8 89       	ldd	r31, Y+16	; 0x10
    1f9e:	80 81       	ld	r24, Z
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9c 01       	movw	r18, r24
    1fa4:	0f 2c       	mov	r0, r15
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <ks0108b_vbitblt+0xe6>
    1fa8:	35 95       	asr	r19
    1faa:	27 95       	ror	r18
    1fac:	0a 94       	dec	r0
    1fae:	e2 f7       	brpl	.-8      	; 0x1fa8 <ks0108b_vbitblt+0xe2>
    1fb0:	05 2c       	mov	r0, r5
    1fb2:	01 c0       	rjmp	.+2      	; 0x1fb6 <ks0108b_vbitblt+0xf0>
    1fb4:	88 0f       	add	r24, r24
    1fb6:	0a 94       	dec	r0
    1fb8:	ea f7       	brpl	.-6      	; 0x1fb4 <ks0108b_vbitblt+0xee>
    1fba:	82 2b       	or	r24, r18
    1fbc:	80 83       	st	Z, r24
        source = SOURCE_DATA_BYTE;
    1fbe:	19 82       	std	Y+1, r1	; 0x01
    1fc0:	09 c0       	rjmp	.+18     	; 0x1fd4 <ks0108b_vbitblt+0x10e>
    }
    // Source is the data pointer
    else if (data != NULL)
    1fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc4:	98 89       	ldd	r25, Y+16	; 0x10
    1fc6:	89 2b       	or	r24, r25
    1fc8:	19 f4       	brne	.+6      	; 0x1fd0 <ks0108b_vbitblt+0x10a>
    const uint8_t OPERATION_ALIGNED = 0x00;  // The merge is aligned
    const uint8_t OPERATION_TOP     = 0x01;  // The top line 
    const uint8_t OPERATION_MIDDLE  = 0x02;  // The bottom line
    const uint8_t OPERATION_BOTTOM  = 0x03;  // The middle line
    
    uint8_t source = SOURCE_SERIAL;     // Source of the data
    1fca:	92 e0       	ldi	r25, 0x02	; 2
    1fcc:	99 83       	std	Y+1, r25	; 0x01
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <ks0108b_vbitblt+0x10e>
        data[0] = (data[0] << shift_top) | (data[0] >> shift_bot);
        source = SOURCE_DATA_BYTE;
    }
    // Source is the data pointer
    else if (data != NULL)
        source = SOURCE_DATA_PTR;
    1fd0:	a1 e0       	ldi	r26, 0x01	; 1
    1fd2:	a9 83       	std	Y+1, r26	; 0x01
    
    // Loop through all page rows
    offset = 0;                         // Start at the beginning of the data.
    y >>= 3;
    1fd4:	66 95       	lsr	r22
    1fd6:	66 95       	lsr	r22
    1fd8:	66 95       	lsr	r22
    1fda:	68 87       	std	Y+8, r22	; 0x08
    for (row = 0; row < page_rows; row++)
    1fdc:	c1 2c       	mov	r12, r1
    1fde:	d1 2c       	mov	r13, r1
    // Source is the data pointer
    else if (data != NULL)
        source = SOURCE_DATA_PTR;
    
    // Loop through all page rows
    offset = 0;                         // Start at the beginning of the data.
    1fe0:	a1 2c       	mov	r10, r1
    1fe2:	b1 2c       	mov	r11, r1
    const uint8_t OPERATION_TOP     = 0x01;  // The top line 
    const uint8_t OPERATION_MIDDLE  = 0x02;  // The bottom line
    const uint8_t OPERATION_BOTTOM  = 0x03;  // The middle line
    
    uint8_t source = SOURCE_SERIAL;     // Source of the data
    uint8_t operation = 0;              // The operation required.
    1fe4:	10 e0       	ldi	r17, 0x00	; 0
            {
                operation = OPERATION_BOTTOM;
                mode |= MODE_MERGE;
            }
        }
        else if (row == (uint8_t)(page_rows - 1))
    1fe6:	bf ef       	ldi	r27, 0xFF	; 255
    1fe8:	b9 0d       	add	r27, r9
    1fea:	b9 87       	std	Y+9, r27	; 0x09
                        if (operation == OPERATION_MIDDLE)
                        {
                            // Read the value of the data ahead of us and
                            // shift into the correct position. 
                            temp >>= shift_bot;
                            temp |= serial_peek (width - 1) << shift_top;
    1fec:	e6 2d       	mov	r30, r6
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	fe 83       	std	Y+6, r31	; 0x06
    1ff2:	ed 83       	std	Y+5, r30	; 0x05
    1ff4:	31 97       	sbiw	r30, 0x01	; 1
    1ff6:	fb 87       	std	Y+11, r31	; 0x0b
    1ff8:	ea 87       	std	Y+10, r30	; 0x0a
    1ffa:	8c 2d       	mov	r24, r12
    1ffc:	98 85       	ldd	r25, Y+8	; 0x08
    1ffe:	9c 0d       	add	r25, r12
    2000:	9a 83       	std	Y+2, r25	; 0x02
        source = SOURCE_DATA_PTR;
    
    // Loop through all page rows
    offset = 0;                         // Start at the beginning of the data.
    y >>= 3;
    for (row = 0; row < page_rows; row++)
    2002:	c9 14       	cp	r12, r9
    2004:	08 f0       	brcs	.+2      	; 0x2008 <ks0108b_vbitblt+0x142>
    2006:	df c0       	rjmp	.+446    	; 0x21c6 <ks0108b_vbitblt+0x300>

        // The basic operation is zero so use the shift_top to initialise.
        operation = shift_top;
            
        // Set up the operation.
        if (row == 0)
    2008:	81 11       	cpse	r24, r1
    200a:	13 c0       	rjmp	.+38     	; 0x2032 <ks0108b_vbitblt+0x16c>
            // TOP: If this is the first row, we need to mask off the blank
            // pixels at the top of the row (these pix have random data).
            // mask_top has shift blank pixels starting from LSB (LSB is the
            // top of the stripe) 
            mask = mask_top;
            if (operation != OPERATION_ALIGNED)
    200c:	55 20       	and	r5, r5
    200e:	49 f0       	breq	.+18     	; 0x2022 <ks0108b_vbitblt+0x15c>
            {
                // Special case of height < 8 then we render as a bottom line
                // rather than top. 
                if (page_rows == 1)
    2010:	f1 e0       	ldi	r31, 0x01	; 1
    2012:	9f 12       	cpse	r9, r31
    2014:	02 c0       	rjmp	.+4      	; 0x201a <ks0108b_vbitblt+0x154>
                    operation = OPERATION_BOTTOM;
    2016:	13 e0       	ldi	r17, 0x03	; 3
    2018:	01 c0       	rjmp	.+2      	; 0x201c <ks0108b_vbitblt+0x156>
                else
                    operation = OPERATION_TOP;
    201a:	11 e0       	ldi	r17, 0x01	; 1
                // This is a partial row so merge.
                mode |= MODE_MERGE;
    201c:	50 61       	ori	r21, 0x10	; 16
    201e:	08 2d       	mov	r16, r8
    2020:	24 c0       	rjmp	.+72     	; 0x206a <ks0108b_vbitblt+0x1a4>
            }
            // Special case of height < 8 then render as bottom line. 
            else if ((page_rows == 1) && ((mask & 0x80) == 0))
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	98 12       	cpse	r9, r24
    2026:	1b c0       	rjmp	.+54     	; 0x205e <ks0108b_vbitblt+0x198>
    2028:	87 fc       	sbrc	r8, 7
    202a:	19 c0       	rjmp	.+50     	; 0x205e <ks0108b_vbitblt+0x198>
            {
                operation = OPERATION_BOTTOM;
                mode |= MODE_MERGE;
    202c:	50 61       	ori	r21, 0x10	; 16
    202e:	08 2d       	mov	r16, r8
    2030:	1b c0       	rjmp	.+54     	; 0x2068 <ks0108b_vbitblt+0x1a2>
            }
        }
        else if (row == (uint8_t)(page_rows - 1))
    2032:	99 85       	ldd	r25, Y+9	; 0x09
    2034:	89 13       	cpse	r24, r25
    2036:	0b c0       	rjmp	.+22     	; 0x204e <ks0108b_vbitblt+0x188>
            // starting at MSB (MSB is the bottom of the stripe) 
            mask = mask_bot;
            
            // If the bottom mask does not extend to the bottom line then a
            // merge is required. 
            if ((mask & 0x80) == 0)
    2038:	af ef       	ldi	r26, 0xFF	; 255
    203a:	7a 12       	cpse	r7, r26
                mode |= MODE_MERGE;
    203c:	50 61       	ori	r21, 0x10	; 16
            
            // If this is not aligned then determine the type of operation
            // required. 
            if (operation != OPERATION_ALIGNED)
    203e:	55 20       	and	r5, r5
    2040:	81 f0       	breq	.+32     	; 0x2062 <ks0108b_vbitblt+0x19c>
            {
                // If we have an exact match of image rows to pages rows then
                // treat as a middle line. The other condition we have more
                // page rows than image rows so we perform a bottom line
                // operation. 
                if ((row != 0) && (image_rows == page_rows))
    2042:	bf 81       	ldd	r27, Y+7	; 0x07
    2044:	07 2d       	mov	r16, r7
    2046:	b9 11       	cpse	r27, r9
    2048:	0f c0       	rjmp	.+30     	; 0x2068 <ks0108b_vbitblt+0x1a2>
                    operation = OPERATION_MIDDLE;
    204a:	12 e0       	ldi	r17, 0x02	; 2
    204c:	0e c0       	rjmp	.+28     	; 0x206a <ks0108b_vbitblt+0x1a4>
        }
        else  
        {
            // MIDDLE: Accept the whole image stripe
            mask = 0xff;
            if (operation != OPERATION_ALIGNED)
    204e:	51 10       	cpse	r5, r1
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <ks0108b_vbitblt+0x190>
    2052:	10 e0       	ldi	r17, 0x00	; 0
    2054:	01 c0       	rjmp	.+2      	; 0x2058 <ks0108b_vbitblt+0x192>
                operation = OPERATION_MIDDLE;
    2056:	12 e0       	ldi	r17, 0x02	; 2
            // Do not need to force a merge in the middle of the line.
            mode &= ~MODE_MERGE;
    2058:	5f 7e       	andi	r21, 0xEF	; 239
            }
        }
        else  
        {
            // MIDDLE: Accept the whole image stripe
            mask = 0xff;
    205a:	0f ef       	ldi	r16, 0xFF	; 255
    205c:	06 c0       	rjmp	.+12     	; 0x206a <ks0108b_vbitblt+0x1a4>
    205e:	08 2d       	mov	r16, r8
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <ks0108b_vbitblt+0x19e>
    2062:	07 2d       	mov	r16, r7
    2064:	10 e0       	ldi	r17, 0x00	; 0
    2066:	01 c0       	rjmp	.+2      	; 0x206a <ks0108b_vbitblt+0x1a4>
                // page rows than image rows so we perform a bottom line
                // operation. 
                if ((row != 0) && (image_rows == page_rows))
                    operation = OPERATION_MIDDLE;
                else
                    operation = OPERATION_BOTTOM;
    2068:	13 e0       	ldi	r17, 0x03	; 3
    206a:	e4 e0       	ldi	r30, 0x04	; 4
    206c:	f3 e0       	ldi	r31, 0x03	; 3
    206e:	fc 83       	std	Y+4, r31	; 0x04
    2070:	eb 83       	std	Y+3, r30	; 0x03
            // Do not need to force a merge in the middle of the line.
            mode &= ~MODE_MERGE;
        }
        
        // Loop for columns
        for (col = 0; col < width; col++)
    2072:	21 2c       	mov	r2, r1
    2074:	31 2c       	mov	r3, r1
    2076:	26 14       	cp	r2, r6
    2078:	08 f0       	brcs	.+2      	; 0x207c <ks0108b_vbitblt+0x1b6>
    207a:	89 c0       	rjmp	.+274    	; 0x218e <ks0108b_vbitblt+0x2c8>
        {
            uint8_t temp;               // The currently process column data
            
            if (source < SOURCE_DATA_PTR)
    207c:	f9 81       	ldd	r31, Y+1	; 0x01
    207e:	f1 11       	cpse	r31, r1
    2080:	04 c0       	rjmp	.+8      	; 0x208a <ks0108b_vbitblt+0x1c4>
            {
                // Use the static data that was passed.
                temp = *data;
    2082:	af 85       	ldd	r26, Y+15	; 0x0f
    2084:	b8 89       	ldd	r27, Y+16	; 0x10
    2086:	8c 91       	ld	r24, X
    2088:	79 c0       	rjmp	.+242    	; 0x217c <ks0108b_vbitblt+0x2b6>
            }
            else if (source == SOURCE_DATA_PTR)
    208a:	b9 81       	ldd	r27, Y+1	; 0x01
    208c:	b1 30       	cpi	r27, 0x01	; 1
    208e:	e1 f5       	brne	.+120    	; 0x2108 <ks0108b_vbitblt+0x242>
            {
                // Handle the data passed in 
                
                // Operation 1: Not aligned, process the top row only.
                if (operation == OPERATION_TOP)
    2090:	11 30       	cpi	r17, 0x01	; 1
    2092:	59 f4       	brne	.+22     	; 0x20aa <ks0108b_vbitblt+0x1e4>
    2094:	ef 85       	ldd	r30, Y+15	; 0x0f
    2096:	f8 89       	ldd	r31, Y+16	; 0x10
    2098:	e2 0d       	add	r30, r2
    209a:	f3 1d       	adc	r31, r3
                {
                    // Get the data for the first row for the bottom of the
                    // page. 
                    temp = data[col] << shift_top;
    209c:	80 81       	ld	r24, Z
    209e:	05 2c       	mov	r0, r5
    20a0:	01 c0       	rjmp	.+2      	; 0x20a4 <ks0108b_vbitblt+0x1de>
    20a2:	88 0f       	add	r24, r24
    20a4:	0a 94       	dec	r0
    20a6:	ea f7       	brpl	.-6      	; 0x20a2 <ks0108b_vbitblt+0x1dc>
    20a8:	69 c0       	rjmp	.+210    	; 0x217c <ks0108b_vbitblt+0x2b6>
                }
                else
                {
                    // Get the data from the current position for the top of
                    // the page. 
                    temp = data[offset];
    20aa:	2f 85       	ldd	r18, Y+15	; 0x0f
    20ac:	38 89       	ldd	r19, Y+16	; 0x10
    20ae:	2a 0d       	add	r18, r10
    20b0:	3b 1d       	adc	r19, r11
    20b2:	f9 01       	movw	r30, r18
    20b4:	80 81       	ld	r24, Z
                    
                    if (operation > OPERATION_ALIGNED)
    20b6:	11 23       	and	r17, r17
    20b8:	19 f1       	breq	.+70     	; 0x2100 <ks0108b_vbitblt+0x23a>
    20ba:	e8 2f       	mov	r30, r24
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
                        // Operation 2: Not aligned, look ahead. If we are
                        // mid row (not first or last) and non-aligned then
                        // look ahead and get the bottom of the column from
                        // the next byte that is in the RX buffer. This will
                        // be exactly 'width' bytes ahead. 
                        if (operation == OPERATION_MIDDLE)
    20be:	12 30       	cpi	r17, 0x02	; 2
    20c0:	91 f4       	brne	.+36     	; 0x20e6 <ks0108b_vbitblt+0x220>
                        {
                            // Get the data for the bottom from the next row.
                            temp >>= shift_bot;
                            temp |= data[offset + width] << shift_top;
    20c2:	8d 81       	ldd	r24, Y+5	; 0x05
    20c4:	9e 81       	ldd	r25, Y+6	; 0x06
    20c6:	28 0f       	add	r18, r24
    20c8:	39 1f       	adc	r19, r25
    20ca:	d9 01       	movw	r26, r18
    20cc:	8c 91       	ld	r24, X
    20ce:	05 2c       	mov	r0, r5
    20d0:	01 c0       	rjmp	.+2      	; 0x20d4 <ks0108b_vbitblt+0x20e>
    20d2:	88 0f       	add	r24, r24
    20d4:	0a 94       	dec	r0
    20d6:	ea f7       	brpl	.-6      	; 0x20d2 <ks0108b_vbitblt+0x20c>
                        // the next byte that is in the RX buffer. This will
                        // be exactly 'width' bytes ahead. 
                        if (operation == OPERATION_MIDDLE)
                        {
                            // Get the data for the bottom from the next row.
                            temp >>= shift_bot;
    20d8:	0f 2c       	mov	r0, r15
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <ks0108b_vbitblt+0x21a>
    20dc:	f5 95       	asr	r31
    20de:	e7 95       	ror	r30
    20e0:	0a 94       	dec	r0
    20e2:	e2 f7       	brpl	.-8      	; 0x20dc <ks0108b_vbitblt+0x216>
    20e4:	0c c0       	rjmp	.+24     	; 0x20fe <ks0108b_vbitblt+0x238>
                            temp |= data[offset + width] << shift_top;
                        }
                        // Operation 1: Not aligned. 
                        else
                            temp = (temp << shift_top) | (temp >> shift_bot);
    20e6:	cf 01       	movw	r24, r30
    20e8:	0f 2c       	mov	r0, r15
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <ks0108b_vbitblt+0x22a>
    20ec:	95 95       	asr	r25
    20ee:	87 95       	ror	r24
    20f0:	0a 94       	dec	r0
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <ks0108b_vbitblt+0x226>
    20f4:	05 2c       	mov	r0, r5
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <ks0108b_vbitblt+0x234>
    20f8:	ee 0f       	add	r30, r30
    20fa:	0a 94       	dec	r0
    20fc:	ea f7       	brpl	.-6      	; 0x20f8 <ks0108b_vbitblt+0x232>
    20fe:	8e 2b       	or	r24, r30
                    }
                    
                    // Operation 3: Aligned data pass through without relocating.
                    // Move to the next.
                    offset++;
    2100:	bf ef       	ldi	r27, 0xFF	; 255
    2102:	ab 1a       	sub	r10, r27
    2104:	bb 0a       	sbc	r11, r27
    2106:	3a c0       	rjmp	.+116    	; 0x217c <ks0108b_vbitblt+0x2b6>
            else
            {
                // Handle the passed from the serial.
                
                // Operation 1: Not aligned, process the top row only.
                if (operation == OPERATION_TOP)
    2108:	11 30       	cpi	r17, 0x01	; 1
    210a:	51 f4       	brne	.+20     	; 0x2120 <ks0108b_vbitblt+0x25a>
                {
                    temp = serial_peek (col) << shift_top;
    210c:	c1 01       	movw	r24, r2
    210e:	5e 87       	std	Y+14, r21	; 0x0e
    2110:	0e 94 da 13 	call	0x27b4	; 0x27b4 <serial_peek>
    2114:	05 2c       	mov	r0, r5
    2116:	01 c0       	rjmp	.+2      	; 0x211a <ks0108b_vbitblt+0x254>
    2118:	88 0f       	add	r24, r24
    211a:	0a 94       	dec	r0
    211c:	ea f7       	brpl	.-6      	; 0x2118 <ks0108b_vbitblt+0x252>
    211e:	1e c0       	rjmp	.+60     	; 0x215c <ks0108b_vbitblt+0x296>
                }
                else
                {
                    // Read a byte from the serial and align with the page
                    // boundary.
                    temp = serial_getc ();
    2120:	5e 87       	std	Y+14, r21	; 0x0e
    2122:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>

                    if (operation > OPERATION_ALIGNED)
    2126:	5e 85       	ldd	r21, Y+14	; 0x0e
    2128:	11 23       	and	r17, r17
    212a:	41 f1       	breq	.+80     	; 0x217c <ks0108b_vbitblt+0x2b6>
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
                        // Operation 2: Not aligned, look ahead. If we are
                        // mid row (not first or last) and non-aligned then
                        // look ahead and get the bottom of the column from
                        // the next byte that is in the RX buffer. This will
                        // be exactly 'width' bytes ahead. 
                        if (operation == OPERATION_MIDDLE)
    2130:	12 30       	cpi	r17, 0x02	; 2
    2132:	b1 f4       	brne	.+44     	; 0x2160 <ks0108b_vbitblt+0x29a>
                        {
                            // Read the value of the data ahead of us and
                            // shift into the correct position. 
                            temp >>= shift_bot;
                            temp |= serial_peek (width - 1) << shift_top;
    2134:	8a 85       	ldd	r24, Y+10	; 0x0a
    2136:	9b 85       	ldd	r25, Y+11	; 0x0b
    2138:	2c 87       	std	Y+12, r18	; 0x0c
    213a:	3d 87       	std	Y+13, r19	; 0x0d
    213c:	0e 94 da 13 	call	0x27b4	; 0x27b4 <serial_peek>
    2140:	05 2c       	mov	r0, r5
    2142:	01 c0       	rjmp	.+2      	; 0x2146 <ks0108b_vbitblt+0x280>
    2144:	88 0f       	add	r24, r24
    2146:	0a 94       	dec	r0
    2148:	ea f7       	brpl	.-6      	; 0x2144 <ks0108b_vbitblt+0x27e>
                        // be exactly 'width' bytes ahead. 
                        if (operation == OPERATION_MIDDLE)
                        {
                            // Read the value of the data ahead of us and
                            // shift into the correct position. 
                            temp >>= shift_bot;
    214a:	2c 85       	ldd	r18, Y+12	; 0x0c
    214c:	3d 85       	ldd	r19, Y+13	; 0x0d
    214e:	0f 2c       	mov	r0, r15
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <ks0108b_vbitblt+0x290>
    2152:	35 95       	asr	r19
    2154:	27 95       	ror	r18
    2156:	0a 94       	dec	r0
    2158:	e2 f7       	brpl	.-8      	; 0x2152 <ks0108b_vbitblt+0x28c>
                            temp |= serial_peek (width - 1) << shift_top;
    215a:	82 2b       	or	r24, r18
    215c:	5e 85       	ldd	r21, Y+14	; 0x0e
    215e:	0e c0       	rjmp	.+28     	; 0x217c <ks0108b_vbitblt+0x2b6>
                        }
                        else
                        {
                            // Bottom line.
                            temp = (temp << shift_top) | (temp >> shift_bot);
    2160:	f9 01       	movw	r30, r18
    2162:	0f 2c       	mov	r0, r15
    2164:	02 c0       	rjmp	.+4      	; 0x216a <ks0108b_vbitblt+0x2a4>
    2166:	f5 95       	asr	r31
    2168:	e7 95       	ror	r30
    216a:	0a 94       	dec	r0
    216c:	e2 f7       	brpl	.-8      	; 0x2166 <ks0108b_vbitblt+0x2a0>
    216e:	05 2c       	mov	r0, r5
    2170:	01 c0       	rjmp	.+2      	; 0x2174 <ks0108b_vbitblt+0x2ae>
    2172:	22 0f       	add	r18, r18
    2174:	0a 94       	dec	r0
    2176:	ea f7       	brpl	.-6      	; 0x2172 <ks0108b_vbitblt+0x2ac>
    2178:	8e 2f       	mov	r24, r30
    217a:	82 2b       	or	r24, r18
                        }
                    }
                }
            }
            // Write the data to the buffer
            draw_buffer[col] = temp;
    217c:	eb 81       	ldd	r30, Y+3	; 0x03
    217e:	fc 81       	ldd	r31, Y+4	; 0x04
    2180:	81 93       	st	Z+, r24
    2182:	fc 83       	std	Y+4, r31	; 0x04
    2184:	eb 83       	std	Y+3, r30	; 0x03
    2186:	ff ef       	ldi	r31, 0xFF	; 255
    2188:	2f 1a       	sub	r2, r31
    218a:	3f 0a       	sbc	r3, r31
    218c:	74 cf       	rjmp	.-280    	; 0x2076 <ks0108b_vbitblt+0x1b0>
        //
        // Read the row in (background image data). Skip the read if we are
        // writing a complete row and we are not mxing in any pixels. We
        // perform the read when (merge mode) || (first row shifted) || (last
        // row shifted).
        if ((mode & (MODE_OP_MASK|MODE_MERGE)) != 0)
    218e:	85 2f       	mov	r24, r21
    2190:	86 71       	andi	r24, 0x16	; 22
    2192:	51 f0       	breq	.+20     	; 0x21a8 <ks0108b_vbitblt+0x2e2>
        {
            // We need to perfom some mixing so read the data.
            read_block (x, y, width, draw_buffer, mask, mode);
    2194:	e5 2e       	mov	r14, r21
    2196:	24 e0       	ldi	r18, 0x04	; 4
    2198:	33 e0       	ldi	r19, 0x03	; 3
    219a:	46 2d       	mov	r20, r6
    219c:	6a 81       	ldd	r22, Y+2	; 0x02
    219e:	84 2d       	mov	r24, r4
    21a0:	5e 87       	std	Y+14, r21	; 0x0e
    21a2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <read_block>
    21a6:	5e 85       	ldd	r21, Y+14	; 0x0e
        }
        // Write the data back.
        write_block (x, y, width, draw_buffer, mode & (MODE_OP_MASK | MODE_NORMAL));
    21a8:	05 2f       	mov	r16, r21
    21aa:	07 70       	andi	r16, 0x07	; 7
    21ac:	24 e0       	ldi	r18, 0x04	; 4
    21ae:	33 e0       	ldi	r19, 0x03	; 3
    21b0:	46 2d       	mov	r20, r6
    21b2:	6a 81       	ldd	r22, Y+2	; 0x02
    21b4:	84 2d       	mov	r24, r4
    21b6:	5e 87       	std	Y+14, r21	; 0x0e
    21b8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <write_block>
    21bc:	8f ef       	ldi	r24, 0xFF	; 255
    21be:	c8 1a       	sub	r12, r24
    21c0:	d8 0a       	sbc	r13, r24
    21c2:	5e 85       	ldd	r21, Y+14	; 0x0e
    21c4:	1a cf       	rjmp	.-460    	; 0x1ffa <ks0108b_vbitblt+0x134>
        y++;
    }//row loop
    
    // Clean the serial if there is any pending data not consumed.
    if ((source == SOURCE_SERIAL) && (operation == OPERATION_MIDDLE))
    21c6:	a9 81       	ldd	r26, Y+1	; 0x01
    21c8:	a2 30       	cpi	r26, 0x02	; 2
    21ca:	e9 f4       	brne	.+58     	; 0x2206 <ks0108b_vbitblt+0x340>
    21cc:	12 30       	cpi	r17, 0x02	; 2
    21ce:	d9 f4       	brne	.+54     	; 0x2206 <ks0108b_vbitblt+0x340>
        serial_flushc (width);
    21d0:	86 2d       	mov	r24, r6
}
    21d2:	60 96       	adiw	r28, 0x10	; 16
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	0f 91       	pop	r16
    21e6:	ff 90       	pop	r15
    21e8:	ef 90       	pop	r14
    21ea:	df 90       	pop	r13
    21ec:	cf 90       	pop	r12
    21ee:	bf 90       	pop	r11
    21f0:	af 90       	pop	r10
    21f2:	9f 90       	pop	r9
    21f4:	8f 90       	pop	r8
    21f6:	7f 90       	pop	r7
    21f8:	6f 90       	pop	r6
    21fa:	5f 90       	pop	r5
    21fc:	4f 90       	pop	r4
    21fe:	3f 90       	pop	r3
    2200:	2f 90       	pop	r2
        y++;
    }//row loop
    
    // Clean the serial if there is any pending data not consumed.
    if ((source == SOURCE_SERIAL) && (operation == OPERATION_MIDDLE))
        serial_flushc (width);
    2202:	0c 94 2e 14 	jmp	0x285c	; 0x285c <serial_flushc>
}
    2206:	60 96       	adiw	r28, 0x10	; 16
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ff 90       	pop	r15
    221c:	ef 90       	pop	r14
    221e:	df 90       	pop	r13
    2220:	cf 90       	pop	r12
    2222:	bf 90       	pop	r11
    2224:	af 90       	pop	r10
    2226:	9f 90       	pop	r9
    2228:	8f 90       	pop	r8
    222a:	7f 90       	pop	r7
    222c:	6f 90       	pop	r6
    222e:	5f 90       	pop	r5
    2230:	4f 90       	pop	r4
    2232:	3f 90       	pop	r3
    2234:	2f 90       	pop	r2
    2236:	08 95       	ret

00002238 <ks0108b_hline>:
/// @param [in] x1 The 2nd x-coordinate.
/// @param [in] mode The drawing mode.
///
void
ks0108b_hline (uint8_t x, uint8_t y, uint8_t x1, uint8_t mode)
{
    2238:	af 92       	push	r10
    223a:	bf 92       	push	r11
    223c:	cf 92       	push	r12
    223e:	df 92       	push	r13
    2240:	ef 92       	push	r14
    2242:	ff 92       	push	r15
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	f8 2e       	mov	r15, r24
    uint8_t pixel_mask;
    uint8_t width;
    uint8_t width2;

    // Swap the bytes so that we can iterate
    if (x > x1)
    224e:	48 17       	cp	r20, r24
    2250:	18 f4       	brcc	.+6      	; 0x2258 <ks0108b_hline+0x20>
        swap_bytes (x, x1);
    2252:	f4 26       	eor	r15, r20
    2254:	4f 25       	eor	r20, r15
    2256:	f4 26       	eor	r15, r20
    return;
#endif

    // Calculate the pixel mask to use.
    //pixel_mask = 1 << (y & 7);          // Get pixel mask
    pixel_mask = pgm_read_byte (&bit_shift_single_maskP[y & 7]);
    2258:	e6 2f       	mov	r30, r22
    225a:	e7 70       	andi	r30, 0x07	; 7
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	e0 59       	subi	r30, 0x90	; 144
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	a4 90       	lpm	r10, Z
    y >>= 3;                            // Convert to column address
    2264:	c6 2e       	mov	r12, r22
    2266:	c6 94       	lsr	r12
    2268:	c6 94       	lsr	r12
    226a:	c6 94       	lsr	r12

    // Write in 64 byte chunks as we do not have enough memory to do a
    // complete line. The limit is set by polygon fill which uses 64 bytes of
    // the draw buffer.
    width = (x1 - x) + 1;               // Calculate the width
    226c:	11 e0       	ldi	r17, 0x01	; 1
    226e:	14 0f       	add	r17, r20
    2270:	1f 19       	sub	r17, r15
    if (width > 64)
    2272:	11 34       	cpi	r17, 0x41	; 65
    2274:	30 f0       	brcs	.+12     	; 0x2282 <ks0108b_hline+0x4a>
    {
        x1 = 64 - x;
    2276:	80 e4       	ldi	r24, 0x40	; 64
    2278:	8f 19       	sub	r24, r15
        width2 = width - x1;
    227a:	d1 2e       	mov	r13, r17
    227c:	d8 1a       	sub	r13, r24
        width = x1;
    227e:	18 2f       	mov	r17, r24
    2280:	01 c0       	rjmp	.+2      	; 0x2284 <ks0108b_hline+0x4c>
    }
    else
        width2 = 0;
    2282:	d1 2c       	mov	r13, r1
    2284:	c4 e4       	ldi	r28, 0x44	; 68
    2286:	d3 e0       	ldi	r29, 0x03	; 3
        // Set up the buffer for a merge.
        for (ii = 0; ii < width; ii++)
            draw_buffer [SCREEN_HEIGHT + ii] = pixel_mask;

        // Read the block in with a modification and then write it back.
        read_block (x, y, width, &draw_buffer [SCREEN_HEIGHT], pixel_mask, mode | MODE_MERGE);
    2288:	20 61       	ori	r18, 0x10	; 16
    228a:	b2 2e       	mov	r11, r18

    // Iterate over both widths if defined.
    for (;;)
    {
        // Set up the buffer for a merge.
        for (ii = 0; ii < width; ii++)
    228c:	a4 e4       	ldi	r26, 0x44	; 68
    228e:	b3 e0       	ldi	r27, 0x03	; 3
    2290:	8a 2f       	mov	r24, r26
    2292:	8c 1b       	sub	r24, r28
    2294:	81 17       	cp	r24, r17
    2296:	10 f4       	brcc	.+4      	; 0x229c <ks0108b_hline+0x64>
            draw_buffer [SCREEN_HEIGHT + ii] = pixel_mask;
    2298:	ad 92       	st	X+, r10
    229a:	fa cf       	rjmp	.-12     	; 0x2290 <ks0108b_hline+0x58>

        // Read the block in with a modification and then write it back.
        read_block (x, y, width, &draw_buffer [SCREEN_HEIGHT], pixel_mask, mode | MODE_MERGE);
    229c:	eb 2c       	mov	r14, r11
    229e:	0a 2d       	mov	r16, r10
    22a0:	24 e4       	ldi	r18, 0x44	; 68
    22a2:	33 e0       	ldi	r19, 0x03	; 3
    22a4:	41 2f       	mov	r20, r17
    22a6:	6c 2d       	mov	r22, r12
    22a8:	8f 2d       	mov	r24, r15
    22aa:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <read_block>
        write_block (x, y, width, &draw_buffer [SCREEN_HEIGHT], mode | MODE_MERGE);
    22ae:	0b 2d       	mov	r16, r11
    22b0:	24 e4       	ldi	r18, 0x44	; 68
    22b2:	33 e0       	ldi	r19, 0x03	; 3
    22b4:	41 2f       	mov	r20, r17
    22b6:	6c 2d       	mov	r22, r12
    22b8:	8f 2d       	mov	r24, r15
    22ba:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <write_block>

        // See if there is another block to do.
        if (width2 == 0)
    22be:	dd 20       	and	r13, r13
    22c0:	21 f0       	breq	.+8      	; 0x22ca <ks0108b_hline+0x92>
            break;

        // Another iteration to be performed. Adjust the width ready for the
        // next loop.
        x += width;                     // Change the x position.
    22c2:	f1 0e       	add	r15, r17
        width = width2;                 // Assume new width.
    22c4:	1d 2d       	mov	r17, r13
        width2 = 0;                     // Reset width2 so we do not loop again.
    22c6:	d1 2c       	mov	r13, r1
    }
    22c8:	e1 cf       	rjmp	.-62     	; 0x228c <ks0108b_hline+0x54>
}
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	1f 91       	pop	r17
    22d0:	0f 91       	pop	r16
    22d2:	ff 90       	pop	r15
    22d4:	ef 90       	pop	r14
    22d6:	df 90       	pop	r13
    22d8:	cf 90       	pop	r12
    22da:	bf 90       	pop	r11
    22dc:	af 90       	pop	r10
    22de:	08 95       	ret

000022e0 <ks0108b_vline>:
/// @param [in] y1 The 2nd y-coordinate.
/// @param [in] mode The drawing mode.
///
void
ks0108b_vline (uint8_t x, uint8_t y, uint8_t y1, uint8_t mode)
{
    22e0:	ef 92       	push	r14
    22e2:	ff 92       	push	r15
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	18 2f       	mov	r17, r24
    22ee:	f2 2e       	mov	r15, r18
    uint8_t height;                     // Height of the line

    // Swap the bytes so that we can iterate
    if (y > y1)
    22f0:	46 17       	cp	r20, r22
    22f2:	18 f4       	brcc	.+6      	; 0x22fa <ks0108b_vline+0x1a>
        swap_bytes (y, y1);
    22f4:	64 27       	eor	r22, r20
    22f6:	46 27       	eor	r20, r22
    22f8:	64 27       	eor	r22, r20
        ks0108b_set_pixel (x, y++, mode);
    }
    return;
#endif

    height = (y1 - y) + 1;              // Calculate the height
    22fa:	d1 e0       	ldi	r29, 0x01	; 1
    22fc:	d4 0f       	add	r29, r20
    22fe:	d6 1b       	sub	r29, r22
    y1 = y & 7;                         // Get offset to start of block
    2300:	86 2f       	mov	r24, r22
    2302:	87 70       	andi	r24, 0x07	; 7
    y >>= 3;                            // Get the column index
    2304:	c6 2f       	mov	r28, r22
    2306:	c6 95       	lsr	r28
    2308:	c6 95       	lsr	r28
    230a:	c6 95       	lsr	r28

    if (y1 != 0)                        // Not on boundary??
    230c:	88 23       	and	r24, r24
    230e:	e1 f0       	breq	.+56     	; 0x2348 <ks0108b_vline+0x68>
    {
        uint8_t valid_mask;             // Mask for the valid bits to write.

        // Compute the valid mask i.e. 0xff << x1
        valid_mask = ~pgm_read_byte (&bit_shift_maskP[(uint8_t)(8 - y1)]);
    2310:	e8 e0       	ldi	r30, 0x08	; 8
    2312:	e8 1b       	sub	r30, r24
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	e8 58       	subi	r30, 0x88	; 136
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	44 91       	lpm	r20, Z
    231c:	40 95       	com	r20
        height += y1;                    // Add the sub-block start to width
    231e:	d8 0f       	add	r29, r24

        // Add any bottom mask if we have a short block
        if (height < 8)
    2320:	d8 30       	cpi	r29, 0x08	; 8
    2322:	38 f4       	brcc	.+14     	; 0x2332 <ks0108b_vline+0x52>
        {
            // This is a short block, the data does not occupy the block.
            // Modify the mask to handle the right of the data.
            // i.e. valid_mask &= ~((1 << (8 - height)) - 1);
            valid_mask &= pgm_read_byte (&bit_shift_maskP[(uint8_t)(8 - height)]);
    2324:	e8 e0       	ldi	r30, 0x08	; 8
    2326:	ed 1b       	sub	r30, r29
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	e8 58       	subi	r30, 0x88	; 136
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	e4 91       	lpm	r30, Z
    2330:	4e 23       	and	r20, r30
        }

        ks0108b_set_column (x, y++, valid_mask, valid_mask, mode | MODE_MERGE);
    2332:	0f 2d       	mov	r16, r15
    2334:	00 61       	ori	r16, 0x10	; 16
    2336:	24 2f       	mov	r18, r20
    2338:	6c 2f       	mov	r22, r28
    233a:	81 2f       	mov	r24, r17
    233c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <ks0108b_set_column>

        // Adust the height now a column has been written.
        if (height <= 8)
    2340:	d9 30       	cpi	r29, 0x09	; 9
    2342:	30 f1       	brcs	.+76     	; 0x2390 <ks0108b_vline+0xb0>
            // Modify the mask to handle the right of the data.
            // i.e. valid_mask &= ~((1 << (8 - height)) - 1);
            valid_mask &= pgm_read_byte (&bit_shift_maskP[(uint8_t)(8 - height)]);
        }

        ks0108b_set_column (x, y++, valid_mask, valid_mask, mode | MODE_MERGE);
    2344:	cf 5f       	subi	r28, 0xFF	; 255

        // Adust the height now a column has been written.
        if (height <= 8)
            return;                     // Quit - nothing left to do
        height -= 8;
    2346:	d8 50       	subi	r29, 0x08	; 8
    }

    // Proecess the complete vertical blocks
    if ((y1 = (height >> 3)) > 0)
    2348:	8d 2f       	mov	r24, r29
    234a:	86 95       	lsr	r24
    234c:	86 95       	lsr	r24
    234e:	86 95       	lsr	r24
    2350:	81 f0       	breq	.+32     	; 0x2372 <ks0108b_vline+0x92>
    2352:	6c 2f       	mov	r22, r28
    2354:	c8 2f       	mov	r28, r24
    2356:	c6 0f       	add	r28, r22
    {
        do
        {
            ks0108b_set_column (x, y++, 0xff, 0xff, mode);
    2358:	ee 24       	eor	r14, r14
    235a:	e3 94       	inc	r14
    235c:	e6 0e       	add	r14, r22
    235e:	0f 2d       	mov	r16, r15
    2360:	2f ef       	ldi	r18, 0xFF	; 255
    2362:	4f ef       	ldi	r20, 0xFF	; 255
    2364:	81 2f       	mov	r24, r17
    2366:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <ks0108b_set_column>
        }
        while (--y1 > 0);
    236a:	ce 15       	cp	r28, r14
    236c:	11 f0       	breq	.+4      	; 0x2372 <ks0108b_vline+0x92>
    // Proecess the complete vertical blocks
    if ((y1 = (height >> 3)) > 0)
    {
        do
        {
            ks0108b_set_column (x, y++, 0xff, 0xff, mode);
    236e:	6e 2d       	mov	r22, r14
    2370:	f3 cf       	rjmp	.-26     	; 0x2358 <ks0108b_vline+0x78>
        }
        while (--y1 > 0);
    }

    // Process any remaining block
    height &= 0x07;
    2372:	d7 70       	andi	r29, 0x07	; 7
    if (height > 0)
    2374:	69 f0       	breq	.+26     	; 0x2390 <ks0108b_vline+0xb0>
    {
        uint8_t valid_mask;             // Mask for the valid bits to write.

        // Create the mask of valid bits.
        valid_mask = pgm_read_byte (&bit_shift_maskP[(uint8_t)(8 - height)]);
    2376:	e8 e0       	ldi	r30, 0x08	; 8
    2378:	ed 1b       	sub	r30, r29
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	e8 58       	subi	r30, 0x88	; 136
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	44 91       	lpm	r20, Z
        ks0108b_set_column (x, y, valid_mask, valid_mask, mode | MODE_MERGE);
    2382:	0f 2d       	mov	r16, r15
    2384:	00 61       	ori	r16, 0x10	; 16
    2386:	24 2f       	mov	r18, r20
    2388:	6c 2f       	mov	r22, r28
    238a:	81 2f       	mov	r24, r17
    238c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <ks0108b_set_column>
    }
}
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	ff 90       	pop	r15
    239a:	ef 90       	pop	r14
    239c:	08 95       	ret

0000239e <lcd_reset>:
void
lcd_reset (void)
{
    // Change the watchdog timer for a short period and then allow the
    // processor to reset.
    cli();                              // Disable interrupts
    239e:	f8 94       	cli
     * |  1  |  0  |  0  |  1  |  8000        |
     * +-----+-----+-----+-----+--------------+
     */

    // Enter Watchdog Configuration mode
    WDTCSR |= (1 << WDCE) | (1 << WDE);
    23a0:	80 91 60 00 	lds	r24, 0x0060
    23a4:	88 61       	ori	r24, 0x18	; 24
    23a6:	80 93 60 00 	sts	0x0060, r24
    // Set Watchdog settings
    WDTCSR = ((1 << WDIE)|(1 << WDE)|(0 << WDP3)|(0 << WDP2)|(1 << WDP1)|(0 << WDP0));
    23aa:	8a e4       	ldi	r24, 0x4A	; 74
    23ac:	80 93 60 00 	sts	0x0060, r24
    // Enable interrupts
    sei();
    23b0:	78 94       	sei
    23b2:	ff cf       	rjmp	.-2      	; 0x23b2 <lcd_reset+0x14>

000023b4 <lcd_screen_clear>:
void
lcd_screen_clear (void)
{
    // Invoke the screen driver to clear the screen with the reverse
    // preference which will redraw the screen in the normal/reverse mode.
    ((vfunc_i_t)(pgm_read_word(&functabP [F_DRV_SCREEN_CLEAR])))(prefs_reverse);
    23b4:	e0 91 ef 02 	lds	r30, 0x02EF
    23b8:	f0 91 f0 02 	lds	r31, 0x02F0
    23bc:	34 96       	adiw	r30, 0x04	; 4
    23be:	25 91       	lpm	r18, Z+
    23c0:	34 91       	lpm	r19, Z
    23c2:	80 91 e6 02 	lds	r24, 0x02E6
    23c6:	f9 01       	movw	r30, r18
    23c8:	09 95       	icall
    font_position (0, 0, 0);
    23ca:	40 e0       	ldi	r20, 0x00	; 0
    23cc:	60 e0       	ldi	r22, 0x00	; 0
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <font_position>

000023d4 <lcd_factory_reset>:
//////////////////////////////////////////////////////////////////////////////
/// Perform a factory reset on EEPROM.
///
void
lcd_factory_reset (void)
{
    23d4:	0f 93       	push	r16
    23d6:	1f 93       	push	r17
    23d8:	cf 93       	push	r28
    23da:	df 93       	push	r29
        0x80,0xc0,0x40,0x0c,0x3e,0xfe,0xf2,0xe0,0xf0,0xe0,
        0xff,0x7f,0x3f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,0x03
    };

    // Reset the EEPROM to its factory default setting.
    memset (prefs, 0, sizeof (prefs));  // Reset everything to zero.
    23dc:	8d e0       	ldi	r24, 0x0D	; 13
    23de:	e2 ee       	ldi	r30, 0xE2	; 226
    23e0:	f2 e0       	ldi	r31, 0x02	; 2
    23e2:	df 01       	movw	r26, r30
    23e4:	1d 92       	st	X+, r1
    23e6:	8a 95       	dec	r24
    23e8:	e9 f7       	brne	.-6      	; 0x23e4 <lcd_factory_reset+0x10>

    // Set magic number to indicate we have written memory
    prefs [EEPROM_ADDR_MAGIC] = EEPROM_MAGIC;
    23ea:	85 ed       	ldi	r24, 0xD5	; 213
    23ec:	80 93 e2 02 	sts	0x02E2, r24
    // Set default baud rate.
    prefs_baudrate = BAUD_RATE_DEFAULT;
    23f0:	86 e0       	ldi	r24, 0x06	; 6
    23f2:	80 93 e3 02 	sts	0x02E3, r24
    // Assume normal mode operation.
    prefs_reverse = MODE_NORMAL;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	80 93 e6 02 	sts	0x02E6, r24
    // Set the backlight to full
    prefs_backlight = 100;
    23fc:	94 e6       	ldi	r25, 0x64	; 100
    23fe:	90 93 e4 02 	sts	0x02E4, r25
    // Set the splash screen on
    prefs_splash = 1;
    2402:	80 93 e5 02 	sts	0x02E5, r24
    // Set the XON/XOFF preferences
    prefs_xon = RX_BUFFER_XON;
    2406:	84 e1       	ldi	r24, 0x14	; 20
    2408:	80 93 e9 02 	sts	0x02E9, r24
    prefs_xoff = RX_BUFFER_XOFF;
    240c:	86 ea       	ldi	r24, 0xA6	; 166
    240e:	80 93 ea 02 	sts	0x02EA, r24
    // change the configuration if it is a small display.
    // 
    // The line needs some time to settle once we have enabled it. We enable
    // the line now and then do some work while it settles and then come back
    // and read it. 
    PORTB |= 0x08;                      // Enable the pull-up on PB3.
    2412:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2414:	ba e1       	ldi	r27, 0x1A	; 26
    2416:	ba 95       	dec	r27
    2418:	f1 f7       	brne	.-4      	; 0x2416 <lcd_factory_reset+0x42>
    241a:	00 c0       	rjmp	.+0      	; 0x241c <lcd_factory_reset+0x48>
    _delay_us (5);
    prefs_large = PINB & 0x08;
    241c:	83 b1       	in	r24, 0x03	; 3
    241e:	88 70       	andi	r24, 0x08	; 8
    2420:	80 93 ec 02 	sts	0x02EC, r24
    PORTB &= ~0x08;    
    2424:	2b 98       	cbi	0x05, 3	; 5
    2426:	8f 01       	movw	r16, r30
    // set the screen size you are using and then the issue will be resolved. 
    // prefs_large = 0x08;              // Large 160x128 screen.
    // prefs_large = 0x00;              // Small 128x64 screen.
    
    // Write back the correct values for factory default.
    for (ii = EEPROM_ADDR_MAGIC; ii < EEPROM_ADDR_MAX; ii++)
    2428:	c0 e0       	ldi	r28, 0x00	; 0
    242a:	d0 e0       	ldi	r29, 0x00	; 0
        eeprom_write_byte ((uint8_t *)(ii), prefs [ii]);
    242c:	f8 01       	movw	r30, r16
    242e:	61 91       	ld	r22, Z+
    2430:	8f 01       	movw	r16, r30
    2432:	ce 01       	movw	r24, r28
    2434:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <__eewr_byte_m168>
    // set the screen size you are using and then the issue will be resolved. 
    // prefs_large = 0x08;              // Large 160x128 screen.
    // prefs_large = 0x00;              // Small 128x64 screen.
    
    // Write back the correct values for factory default.
    for (ii = EEPROM_ADDR_MAGIC; ii < EEPROM_ADDR_MAX; ii++)
    2438:	21 96       	adiw	r28, 0x01	; 1
    243a:	cc 30       	cpi	r28, 0x0C	; 12
    243c:	d1 05       	cpc	r29, r1
    243e:	b1 f7       	brne	.-20     	; 0x242c <lcd_factory_reset+0x58>
    2440:	c0 e2       	ldi	r28, 0x20	; 32
    2442:	d0 e0       	ldi	r29, 0x00	; 0
    2444:	fe 01       	movw	r30, r28
    2446:	ef 54       	subi	r30, 0x4F	; 79
    2448:	fb 4f       	sbci	r31, 0xFB	; 251
    // Write the sparkfun logo into EEPROM
    ptr = (uint8_t *)(sparkfun_logo);
    for (ii = 0; ii < sizeof (sparkfun_logo); ii++)
    {
        eeprom_write_byte ((uint8_t *)(EEPROM_ADDR_SPRITE_START + ii),
                           pgm_read_byte (ptr++));
    244a:	64 91       	lpm	r22, Z

    // Write the sparkfun logo into EEPROM
    ptr = (uint8_t *)(sparkfun_logo);
    for (ii = 0; ii < sizeof (sparkfun_logo); ii++)
    {
        eeprom_write_byte ((uint8_t *)(EEPROM_ADDR_SPRITE_START + ii),
    244c:	ce 01       	movw	r24, r28
    244e:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <__eewr_byte_m168>
    2452:	21 96       	adiw	r28, 0x01	; 1
    for (ii = EEPROM_ADDR_MAGIC; ii < EEPROM_ADDR_MAX; ii++)
        eeprom_write_byte ((uint8_t *)(ii), prefs [ii]);

    // Write the sparkfun logo into EEPROM
    ptr = (uint8_t *)(sparkfun_logo);
    for (ii = 0; ii < sizeof (sparkfun_logo); ii++)
    2454:	c6 33       	cpi	r28, 0x36	; 54
    2456:	d1 05       	cpc	r29, r1
    2458:	a9 f7       	brne	.-22     	; 0x2444 <lcd_factory_reset+0x70>
    245a:	82 e4       	ldi	r24, 0x42	; 66
    245c:	90 e0       	ldi	r25, 0x00	; 0
    // Clear the remaining EEPROM sprite memory skipping over the sparkfun
    // logo we have just written.
    ptr = (uint8_t *)(EEPROM_ADDR_SPRITE_START + EEPROM_SPRITE_SIZE);
    for (ii = 0; ii < ((EEPROM_SPRITE_NUM - 1) * EEPROM_SPRITE_SIZE); ii++)
    {
        eeprom_write_byte (ptr++, 0);
    245e:	ec 01       	movw	r28, r24
    2460:	21 96       	adiw	r28, 0x01	; 1
    2462:	60 e0       	ldi	r22, 0x00	; 0
    2464:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <__eewr_byte_m168>
    }

    // Clear the remaining EEPROM sprite memory skipping over the sparkfun
    // logo we have just written.
    ptr = (uint8_t *)(EEPROM_ADDR_SPRITE_START + EEPROM_SPRITE_SIZE);
    for (ii = 0; ii < ((EEPROM_SPRITE_NUM - 1) * EEPROM_SPRITE_SIZE); ii++)
    2468:	cc 3f       	cpi	r28, 0xFC	; 252
    246a:	f1 e0       	ldi	r31, 0x01	; 1
    246c:	df 07       	cpc	r29, r31
    246e:	11 f0       	breq	.+4      	; 0x2474 <lcd_factory_reset+0xa0>
    {
        eeprom_write_byte (ptr++, 0);
    2470:	ce 01       	movw	r24, r28
    2472:	f5 cf       	rjmp	.-22     	; 0x245e <lcd_factory_reset+0x8a>
    }
}
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	08 95       	ret

0000247e <lcd_set>:
/// @param [in] id The identiy of the EEPROM location to change.
/// @param [in] value The value to assign to the EEPROM location.
///
void
lcd_set (uint8_t check, uint8_t id, uint8_t value)
{
    247e:	0f 93       	push	r16
    2480:	1f 93       	push	r17
    2482:	cf 93       	push	r28
    2484:	df 93       	push	r29
    2486:	1f 92       	push	r1
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    // Basic check to ensure that the first byte is the check byte.
    if (check != LCD_SET_CHECKBYTE)
    248c:	85 3c       	cpi	r24, 0xC5	; 197
    248e:	c1 f4       	brne	.+48     	; 0x24c0 <lcd_set+0x42>
        return;                         // Do not set anything.
    // Check the range of the identity.
    if (id > EEPROM_ADDR_MAX)
    2490:	6d 30       	cpi	r22, 0x0D	; 13
    2492:	b0 f4       	brcc	.+44     	; 0x24c0 <lcd_set+0x42>
        return;                         // Do not set anything.Out of range
    // Set the value, there is no checking of the value used. 
    prefs[id] = value;
    2494:	06 2f       	mov	r16, r22
    2496:	10 e0       	ldi	r17, 0x00	; 0
    2498:	f8 01       	movw	r30, r16
    249a:	ee 51       	subi	r30, 0x1E	; 30
    249c:	fd 4f       	sbci	r31, 0xFD	; 253
    249e:	40 83       	st	Z, r20
    // Read the value from EEPROM, if it is different then write the new
    // value. Keep the compiler quiet by casting twice to the correct size.
    if (eeprom_read_byte ((uint8_t *)((uint16_t)(id))) != value)
    24a0:	c8 01       	movw	r24, r16
    24a2:	49 83       	std	Y+1, r20	; 0x01
    24a4:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__eerd_byte_m168>
    24a8:	49 81       	ldd	r20, Y+1	; 0x01
    24aa:	84 17       	cp	r24, r20
    24ac:	49 f0       	breq	.+18     	; 0x24c0 <lcd_set+0x42>
        eeprom_write_byte ((uint8_t *)((uint16_t)(id)), value);
    24ae:	64 2f       	mov	r22, r20
    24b0:	c8 01       	movw	r24, r16
}
    24b2:	0f 90       	pop	r0
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	1f 91       	pop	r17
    24ba:	0f 91       	pop	r16
    // Set the value, there is no checking of the value used. 
    prefs[id] = value;
    // Read the value from EEPROM, if it is different then write the new
    // value. Keep the compiler quiet by casting twice to the correct size.
    if (eeprom_read_byte ((uint8_t *)((uint16_t)(id))) != value)
        eeprom_write_byte ((uint8_t *)((uint16_t)(id)), value);
    24bc:	0c 94 d2 1b 	jmp	0x37a4	; 0x37a4 <__eewr_byte_m168>
}
    24c0:	0f 90       	pop	r0
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	1f 91       	pop	r17
    24c8:	0f 91       	pop	r16
    24ca:	08 95       	ret

000024cc <lcd_query>:
/// byte[0]  = count
/// byte[1..count] = EEPROM width
///
void
lcd_query (uint8_t info)
{
    24cc:	1f 93       	push	r17
    24ce:	cf 93       	push	r28
    24d0:	df 93       	push	r29
    24d2:	18 2f       	mov	r17, r24
    uint8_t cc = 0xff;
    
    // Put the X andy dimensions.
    serial_putc ('Q');
    24d4:	81 e5       	ldi	r24, 0x51	; 81
    24d6:	0e 94 c6 13 	call	0x278c	; 0x278c <serial_putc>
    // EEPROM locations.
    if (info < EEPROM_ADDR_MAX)
    24da:	1c 30       	cpi	r17, 0x0C	; 12
    24dc:	30 f4       	brcc	.+12     	; 0x24ea <lcd_query+0x1e>
        cc = prefs[info];
    24de:	e1 2f       	mov	r30, r17
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	ee 51       	subi	r30, 0x1E	; 30
    24e4:	fd 4f       	sbci	r31, 0xFD	; 253
    24e6:	80 81       	ld	r24, Z
    24e8:	2b c0       	rjmp	.+86     	; 0x2540 <lcd_query+0x74>
    // Constant locations
    else if (info & 0x20)
    24ea:	15 ff       	sbrs	r17, 5
    24ec:	09 c0       	rjmp	.+18     	; 0x2500 <lcd_query+0x34>
    {
        info &= ~0x20;
    24ee:	1f 7d       	andi	r17, 0xDF	; 223
        if (info < sizeof (consts))
    24f0:	16 30       	cpi	r17, 0x06	; 6
    24f2:	28 f5       	brcc	.+74     	; 0x253e <lcd_query+0x72>
            cc = pgm_read_byte (&consts[info]);
    24f4:	e1 2f       	mov	r30, r17
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	e3 5a       	subi	r30, 0xA3	; 163
    24fa:	fe 4f       	sbci	r31, 0xFE	; 254
    24fc:	84 91       	lpm	r24, Z
    24fe:	20 c0       	rjmp	.+64     	; 0x2540 <lcd_query+0x74>
    }
    // x & y dimensions
    else if (info & 0x40)
    2500:	16 ff       	sbrs	r17, 6
    2502:	08 c0       	rjmp	.+16     	; 0x2514 <lcd_query+0x48>
    {
        if (info & 1)
    2504:	10 ff       	sbrs	r17, 0
    2506:	03 c0       	rjmp	.+6      	; 0x250e <lcd_query+0x42>
            cc = y_dim;
    2508:	80 91 f1 02 	lds	r24, 0x02F1
    250c:	19 c0       	rjmp	.+50     	; 0x2540 <lcd_query+0x74>
        else
            cc = x_dim;
    250e:	80 91 02 03 	lds	r24, 0x0302
    2512:	16 c0       	rjmp	.+44     	; 0x2540 <lcd_query+0x74>
    }
    // The sprite EEPROM widths
    else if (info & 0x80)
    2514:	17 ff       	sbrs	r17, 7
    2516:	13 c0       	rjmp	.+38     	; 0x253e <lcd_query+0x72>
    {
        const uint8_t *eeprom_addr = (uint8_t *) EEPROM_ADDR_SPRITE_START; // Address in EEPROM
        uint8_t height_offset;
        
        height_offset = info & 1;
        info &= ~0x80;
    2518:	81 2f       	mov	r24, r17
    251a:	8f 77       	andi	r24, 0x7F	; 127
        info >>= 1;                     // Divide by 2;
    251c:	86 95       	lsr	r24
        if (info < EEPROM_SPRITE_NUM)
    251e:	8e 30       	cpi	r24, 0x0E	; 14
    2520:	70 f4       	brcc	.+28     	; 0x253e <lcd_query+0x72>
        {
            cc = eeprom_read_byte (&eeprom_addr[(EEPROM_SPRITE_SIZE * info) + height_offset]);
    2522:	11 70       	andi	r17, 0x01	; 1
    2524:	c1 2f       	mov	r28, r17
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	d9 2f       	mov	r29, r25
    252a:	92 e2       	ldi	r25, 0x22	; 34
    252c:	89 9f       	mul	r24, r25
    252e:	c0 0d       	add	r28, r0
    2530:	d1 1d       	adc	r29, r1
    2532:	11 24       	eor	r1, r1
    2534:	ce 01       	movw	r24, r28
    2536:	80 96       	adiw	r24, 0x20	; 32
    2538:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__eerd_byte_m168>
    253c:	01 c0       	rjmp	.+2      	; 0x2540 <lcd_query+0x74>
/// byte[1..count] = EEPROM width
///
void
lcd_query (uint8_t info)
{
    uint8_t cc = 0xff;
    253e:	8f ef       	ldi	r24, 0xFF	; 255
        {
            cc = eeprom_read_byte (&eeprom_addr[(EEPROM_SPRITE_SIZE * info) + height_offset]);
        }
    }
    serial_putc (cc);        
}
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	1f 91       	pop	r17
        if (info < EEPROM_SPRITE_NUM)
        {
            cc = eeprom_read_byte (&eeprom_addr[(EEPROM_SPRITE_SIZE * info) + height_offset]);
        }
    }
    serial_putc (cc);        
    2546:	0c 94 c6 13 	jmp	0x278c	; 0x278c <serial_putc>

0000254a <lcd_screen_reverse>:
///                   CMD_REVERSE_MODE then save to EEPROM.
void
lcd_screen_reverse (uint8_t mode, uint8_t cmd)
{
    // Save the user preference if this is a persistent command.
    if (cmd == CMD_REVERSE_MODE)
    254a:	62 31       	cpi	r22, 0x12	; 18
    254c:	51 f4       	brne	.+20     	; 0x2562 <lcd_screen_reverse+0x18>
    {
        // Determine which way round the screen is.
        if (is_reverse())
    254e:	41 e0       	ldi	r20, 0x01	; 1
    2550:	80 91 e6 02 	lds	r24, 0x02E6
    2554:	81 11       	cpse	r24, r1
    2556:	40 e0       	ldi	r20, 0x00	; 0
            mode = MODE_NORMAL;
        else
            mode = MODE_REVERSE;
        
        // Set the EEPROM values
        lcd_set (LCD_SET_CHECKBYTE, EEPROM_ADDR_REVERSE, mode);
    2558:	64 e0       	ldi	r22, 0x04	; 4
    255a:	85 ec       	ldi	r24, 0xC5	; 197
    255c:	0e 94 3f 12 	call	0x247e	; 0x247e <lcd_set>
    2560:	03 c0       	rjmp	.+6      	; 0x2568 <lcd_screen_reverse+0x1e>
    }
    else
        prefs_reverse = mode & MODE_NORMAL_MASK;
    2562:	81 70       	andi	r24, 0x01	; 1
    2564:	80 93 e6 02 	sts	0x02E6, r24

    // Reverse the screen.
    ((vfunc_p_t)(pgm_read_word(&functabP [F_DRV_SCREEN_REVERSE])))(draw_buffer);
    2568:	e0 91 ef 02 	lds	r30, 0x02EF
    256c:	f0 91 f0 02 	lds	r31, 0x02F0
    2570:	36 96       	adiw	r30, 0x06	; 6
    2572:	25 91       	lpm	r18, Z+
    2574:	34 91       	lpm	r19, Z
    2576:	84 e0       	ldi	r24, 0x04	; 4
    2578:	93 e0       	ldi	r25, 0x03	; 3
    257a:	f9 01       	movw	r30, r18
    257c:	09 94       	ijmp

0000257e <lcd_demo>:

/////////////////////////////////////////////////////////////////////////////
/// Demonstration
void
lcd_demo (uint8_t cmd)
{
    257e:	ef 92       	push	r14
    2580:	ff 92       	push	r15
    2582:	0f 93       	push	r16
    2584:	1f 93       	push	r17
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	1f 92       	push	r1
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    // Clear the screen
    lcd_screen_clear ();
    2590:	89 83       	std	Y+1, r24	; 0x01
    2592:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_screen_clear>
    2596:	60 91 f1 02 	lds	r22, 0x02F1

    // Only draw the single sprite when the demo is not invoked.
    if ((cmd != CMD_DEMO) && (prefs_splash == 2))
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	84 30       	cpi	r24, 0x04	; 4
    259e:	69 f0       	breq	.+26     	; 0x25ba <lcd_demo+0x3c>
    25a0:	80 91 e5 02 	lds	r24, 0x02E5
    25a4:	82 30       	cpi	r24, 0x02	; 2
    25a6:	49 f4       	brne	.+18     	; 0x25ba <lcd_demo+0x3c>
    {
        // XOR'ing the sprite works in normal and reverse modes
        sprite_draw (x_dim/2, y_dim/2, 0x80, MODE_XOR|MODE_SPRITE_CENTER|MODE_NORMAL);
    25a8:	66 95       	lsr	r22
    25aa:	80 91 02 03 	lds	r24, 0x0302
    25ae:	2d e0       	ldi	r18, 0x0D	; 13
    25b0:	40 e8       	ldi	r20, 0x80	; 128
    25b2:	86 95       	lsr	r24
    25b4:	0e 94 a6 14 	call	0x294c	; 0x294c <sprite_draw>
    25b8:	93 c0       	rjmp	.+294    	; 0x26e0 <lcd_demo+0x162>
        {
            label_0, label_1, label_2, label_3, label_4, label_5, label_6
        };
        static const char slash[] PROGMEM = "/";
        static const char zero2[] PROGMEM = "00";
        uint8_t yy = (y_dim/2) - 32;
    25ba:	16 2f       	mov	r17, r22
    25bc:	16 95       	lsr	r17
        uint8_t xx;
        uint8_t ii;
        
        // Set the font to the 6x8.
        font_set (0, CMDX_FONT_SET);
    25be:	68 e4       	ldi	r22, 0x48	; 72
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <font_set>
        
        // XOR'ing the sprite works in normal and reverse modes
        sprite_draw (100 + (x_dim - 100) / 2, y_dim/2, 0x80, MODE_XOR|MODE_SPRITE_CENTER|MODE_NORMAL);
    25c6:	60 91 f1 02 	lds	r22, 0x02F1
    25ca:	66 95       	lsr	r22
    25cc:	80 91 02 03 	lds	r24, 0x0302
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	84 56       	subi	r24, 0x64	; 100
    25d4:	91 09       	sbc	r25, r1
    25d6:	97 fd       	sbrc	r25, 7
    25d8:	01 96       	adiw	r24, 0x01	; 1
    25da:	95 95       	asr	r25
    25dc:	87 95       	ror	r24
    25de:	2d e0       	ldi	r18, 0x0D	; 13
    25e0:	40 e8       	ldi	r20, 0x80	; 128
    25e2:	8c 59       	subi	r24, 0x9C	; 156
    25e4:	0e 94 a6 14 	call	0x294c	; 0x294c <sprite_draw>

        draw_rbox (0, yy, 100, yy + 63, 8, MODE_XOR|MODE_NORMAL);
    25e8:	2f e1       	ldi	r18, 0x1F	; 31
    25ea:	21 0f       	add	r18, r17
        {
            label_0, label_1, label_2, label_3, label_4, label_5, label_6
        };
        static const char slash[] PROGMEM = "/";
        static const char zero2[] PROGMEM = "00";
        uint8_t yy = (y_dim/2) - 32;
    25ec:	60 ee       	ldi	r22, 0xE0	; 224
    25ee:	61 0f       	add	r22, r17
        font_set (0, CMDX_FONT_SET);
        
        // XOR'ing the sprite works in normal and reverse modes
        sprite_draw (100 + (x_dim - 100) / 2, y_dim/2, 0x80, MODE_XOR|MODE_SPRITE_CENTER|MODE_NORMAL);

        draw_rbox (0, yy, 100, yy + 63, 8, MODE_XOR|MODE_NORMAL);
    25f0:	35 e0       	ldi	r19, 0x05	; 5
    25f2:	e3 2e       	mov	r14, r19
    25f4:	08 e0       	ldi	r16, 0x08	; 8
    25f6:	44 e6       	ldi	r20, 0x64	; 100
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	0e 94 0d 07 	call	0xe1a	; 0xe1a <draw_rbox>

        xx = 4;
        yy += xx;
    25fe:	04 ee       	ldi	r16, 0xE4	; 228
    2600:	01 0f       	add	r16, r17
    2602:	43 ec       	ldi	r20, 0xC3	; 195
    2604:	e4 2e       	mov	r14, r20
    2606:	44 e0       	ldi	r20, 0x04	; 4
    2608:	f4 2e       	mov	r15, r20
        for (ii = 0; ii < 7; ii++)
    260a:	10 e0       	ldi	r17, 0x00	; 0
        {
            font_position (xx, yy, 0);
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	60 2f       	mov	r22, r16
    2610:	84 e0       	ldi	r24, 0x04	; 4
    2612:	0e 94 8d 0c 	call	0x191a	; 0x191a <font_position>
            font_draw_stringP ((char *)(pgm_read_word(&labels[ii])));
    2616:	f7 01       	movw	r30, r14
    2618:	85 91       	lpm	r24, Z+
    261a:	94 91       	lpm	r25, Z
    261c:	0e 94 3f 0c 	call	0x187e	; 0x187e <font_draw_stringP>

            switch (ii)
    2620:	13 30       	cpi	r17, 0x03	; 3
    2622:	99 f1       	breq	.+102    	; 0x268a <lcd_demo+0x10c>
    2624:	28 f4       	brcc	.+10     	; 0x2630 <lcd_demo+0xb2>
    2626:	11 30       	cpi	r17, 0x01	; 1
    2628:	c9 f0       	breq	.+50     	; 0x265c <lcd_demo+0xde>
    262a:	12 30       	cpi	r17, 0x02	; 2
    262c:	51 f1       	breq	.+84     	; 0x2682 <lcd_demo+0x104>
    262e:	06 c0       	rjmp	.+12     	; 0x263c <lcd_demo+0xbe>
    2630:	15 30       	cpi	r17, 0x05	; 5
    2632:	b1 f1       	breq	.+108    	; 0x26a0 <lcd_demo+0x122>
    2634:	90 f1       	brcs	.+100    	; 0x269a <lcd_demo+0x11c>
    2636:	16 30       	cpi	r17, 0x06	; 6
    2638:	09 f4       	brne	.+2      	; 0x263c <lcd_demo+0xbe>
    263a:	3f c0       	rjmp	.+126    	; 0x26ba <lcd_demo+0x13c>
            {
                // Baudrate: <value>
            case 0:
                font_draw_number (pgm_read_word (&baudrates[prefs_baudrate-1]));
    263c:	e0 91 e3 02 	lds	r30, 0x02E3
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	ee 0f       	add	r30, r30
    2644:	ff 1f       	adc	r31, r31
    2646:	eb 54       	subi	r30, 0x4B	; 75
    2648:	fb 4f       	sbci	r31, 0xFB	; 251
    264a:	85 91       	lpm	r24, Z+
    264c:	94 91       	lpm	r25, Z
    264e:	0e 94 57 0c 	call	0x18ae	; 0x18ae <font_draw_number>
                font_draw_stringP (zero2);
    2652:	84 eb       	ldi	r24, 0xB4	; 180
    2654:	94 e0       	ldi	r25, 0x04	; 4
    2656:	0e 94 3f 0c 	call	0x187e	; 0x187e <font_draw_stringP>
                break;
    265a:	3a c0       	rjmp	.+116    	; 0x26d0 <lcd_demo+0x152>

                // Splash  : <on>/<off>
            case 1:
                font_draw_on_off (is_splash());
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 91 e5 02 	lds	r25, 0x02E5
    2662:	91 11       	cpse	r25, r1
    2664:	01 c0       	rjmp	.+2      	; 0x2668 <lcd_demo+0xea>
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	0e 94 4e 0c 	call	0x189c	; 0x189c <font_draw_on_off>
                if (is_splash())
    266c:	80 91 e5 02 	lds	r24, 0x02E5
    2670:	88 23       	and	r24, r24
    2672:	71 f1       	breq	.+92     	; 0x26d0 <lcd_demo+0x152>
                {
                    font_draw_stringP (slash);
    2674:	82 eb       	ldi	r24, 0xB2	; 178
    2676:	94 e0       	ldi	r25, 0x04	; 4
    2678:	0e 94 3f 0c 	call	0x187e	; 0x187e <font_draw_stringP>
                    font_draw_number (prefs_splash);
    267c:	80 91 e5 02 	lds	r24, 0x02E5
    2680:	1a c0       	rjmp	.+52     	; 0x26b6 <lcd_demo+0x138>
                }
                break;

                // CRLF    : <on>/<off>
            case 2:
                font_draw_on_off (is_crlf());
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 91 e8 02 	lds	r25, 0x02E8
    2688:	03 c0       	rjmp	.+6      	; 0x2690 <lcd_demo+0x112>
                break;

                // Scroll  : <on>/<off>
            case 3:
                font_draw_on_off (is_scroll());
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	90 91 eb 02 	lds	r25, 0x02EB
    2690:	91 11       	cpse	r25, r1
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	0e 94 4e 0c 	call	0x189c	; 0x189c <font_draw_on_off>
                break;
    2698:	1b c0       	rjmp	.+54     	; 0x26d0 <lcd_demo+0x152>

                // B'Light : <value>
            case 4:
                font_draw_number (prefs_backlight);
    269a:	80 91 e4 02 	lds	r24, 0x02E4
    269e:	0b c0       	rjmp	.+22     	; 0x26b6 <lcd_demo+0x138>
                break;

                // xon/xoff: <xon>/<xoff>
            case 5:
                font_draw_number (prefs_xon);
    26a0:	80 91 e9 02 	lds	r24, 0x02E9
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <font_draw_number>
                font_draw_stringP (slash);
    26aa:	82 eb       	ldi	r24, 0xB2	; 178
    26ac:	94 e0       	ldi	r25, 0x04	; 4
    26ae:	0e 94 3f 0c 	call	0x187e	; 0x187e <font_draw_stringP>
                font_draw_number (prefs_xoff);
    26b2:	80 91 ea 02 	lds	r24, 0x02EA
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	09 c0       	rjmp	.+18     	; 0x26cc <lcd_demo+0x14e>
                break;

                // Version : <major>.<minor>
            case 6:
                font_draw_number (VERSION_MAJOR);
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 57 0c 	call	0x18ae	; 0x18ae <font_draw_number>
                font_draw ('.');
    26c2:	8e e2       	ldi	r24, 0x2E	; 46
    26c4:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <font_draw>
                font_draw_number (VERSION_MINOR);
    26c8:	86 e2       	ldi	r24, 0x26	; 38
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	0e 94 57 0c 	call	0x18ae	; 0x18ae <font_draw_number>
                break;
            }
            yy += 8;
    26d0:	08 5f       	subi	r16, 0xF8	; 248

        draw_rbox (0, yy, 100, yy + 63, 8, MODE_XOR|MODE_NORMAL);

        xx = 4;
        yy += xx;
        for (ii = 0; ii < 7; ii++)
    26d2:	1f 5f       	subi	r17, 0xFF	; 255
    26d4:	82 e0       	ldi	r24, 0x02	; 2
    26d6:	e8 0e       	add	r14, r24
    26d8:	f1 1c       	adc	r15, r1
    26da:	17 30       	cpi	r17, 0x07	; 7
    26dc:	09 f0       	breq	.+2      	; 0x26e0 <lcd_demo+0x162>
    26de:	96 cf       	rjmp	.-212    	; 0x260c <lcd_demo+0x8e>
            yy += 8;
        }
    }

    // Stay on this page until we get a character.
    serial_peek (0);
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	0e 94 da 13 	call	0x27b4	; 0x27b4 <serial_peek>
    // Set the font to the 6x8.
    font_set (prefs_font, CMDX_FONT_SET);
    26e8:	68 e4       	ldi	r22, 0x48	; 72
    26ea:	80 91 ed 02 	lds	r24, 0x02ED
    26ee:	0e 94 b0 0a 	call	0x1560	; 0x1560 <font_set>
    lcd_screen_clear ();
}
    26f2:	0f 90       	pop	r0
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	ff 90       	pop	r15
    26fe:	ef 90       	pop	r14

    // Stay on this page until we get a character.
    serial_peek (0);
    // Set the font to the 6x8.
    font_set (prefs_font, CMDX_FONT_SET);
    lcd_screen_clear ();
    2700:	0c 94 da 11 	jmp	0x23b4	; 0x23b4 <lcd_screen_clear>

00002704 <serial_baudrate>:
///
/// @return The value of baud that the system is using.
///
uint8_t
serial_baudrate (uint8_t baud)
{
    2704:	cf 93       	push	r28
    2706:	c8 2f       	mov	r28, r24
    uint16_t rate;

    // Allow ASCII characters; convert from ASCII to interger. Binary
    // characters are processed un-modified.
    if (baud >= '1')
    2708:	81 33       	cpi	r24, 0x31	; 49
    270a:	08 f0       	brcs	.+2      	; 0x270e <serial_baudrate+0xa>
        baud -= '0';
    270c:	c0 53       	subi	r28, 0x30	; 48

    // Ensure that the baud rate is valid, otherwise use the default.
    if (baud_rate_invalid (baud))
    270e:	8f ef       	ldi	r24, 0xFF	; 255
    2710:	8c 0f       	add	r24, r28
    2712:	86 30       	cpi	r24, 0x06	; 6
    2714:	20 f0       	brcs	.+8      	; 0x271e <serial_baudrate+0x1a>
        rate = (uint16_t)(1000000L / 19200L - 1);
    else if (baud == BAUD_RATE_57600)
        rate = (uint16_t)(1000000L / 28800L - 1);
    else // Default to 115200 if nothing is valid.
    {
        rate = (uint16_t)(1000000L / 57600L - 1);
    2716:	80 e1       	ldi	r24, 0x10	; 16
    2718:	90 e0       	ldi	r25, 0x00	; 0
        baud = BAUD_RATE_115200;
    271a:	c6 e0       	ldi	r28, 0x06	; 6
    271c:	15 c0       	rjmp	.+42     	; 0x2748 <serial_baudrate+0x44>
    // Ensure that the baud rate is valid, otherwise use the default.
    if (baud_rate_invalid (baud))
        baud = BAUD_RATE_DEFAULT;

    // Get the appropriate setting for the hardware.
    if (baud == BAUD_RATE_4800)
    271e:	c1 30       	cpi	r28, 0x01	; 1
    2720:	51 f0       	breq	.+20     	; 0x2736 <serial_baudrate+0x32>
        rate = (uint16_t)(1000000L / 2400L - 1);
    else if (baud == BAUD_RATE_9600)
    2722:	c2 30       	cpi	r28, 0x02	; 2
    2724:	59 f0       	breq	.+22     	; 0x273c <serial_baudrate+0x38>
        rate = (uint16_t)(1000000L / 4800L - 1);
    else if (baud == BAUD_RATE_19200)
    2726:	c3 30       	cpi	r28, 0x03	; 3
    2728:	59 f0       	breq	.+22     	; 0x2740 <serial_baudrate+0x3c>
        rate = (uint16_t)(1000000L / 9600L - 1);
    else if (baud == BAUD_RATE_38400)
    272a:	c4 30       	cpi	r28, 0x04	; 4
    272c:	59 f0       	breq	.+22     	; 0x2744 <serial_baudrate+0x40>
        rate = (uint16_t)(1000000L / 19200L - 1);
    else if (baud == BAUD_RATE_57600)
    272e:	c5 30       	cpi	r28, 0x05	; 5
    2730:	91 f7       	brne	.-28     	; 0x2716 <serial_baudrate+0x12>
        rate = (uint16_t)(1000000L / 28800L - 1);
    2732:	81 e2       	ldi	r24, 0x21	; 33
    2734:	08 c0       	rjmp	.+16     	; 0x2746 <serial_baudrate+0x42>
    if (baud_rate_invalid (baud))
        baud = BAUD_RATE_DEFAULT;

    // Get the appropriate setting for the hardware.
    if (baud == BAUD_RATE_4800)
        rate = (uint16_t)(1000000L / 2400L - 1);
    2736:	8f e9       	ldi	r24, 0x9F	; 159
    2738:	91 e0       	ldi	r25, 0x01	; 1
    273a:	06 c0       	rjmp	.+12     	; 0x2748 <serial_baudrate+0x44>
    else if (baud == BAUD_RATE_9600)
        rate = (uint16_t)(1000000L / 4800L - 1);
    273c:	8f ec       	ldi	r24, 0xCF	; 207
    273e:	03 c0       	rjmp	.+6      	; 0x2746 <serial_baudrate+0x42>
    else if (baud == BAUD_RATE_19200)
        rate = (uint16_t)(1000000L / 9600L - 1);
    2740:	87 e6       	ldi	r24, 0x67	; 103
    2742:	01 c0       	rjmp	.+2      	; 0x2746 <serial_baudrate+0x42>
    else if (baud == BAUD_RATE_38400)
        rate = (uint16_t)(1000000L / 19200L - 1);
    2744:	83 e3       	ldi	r24, 0x33	; 51
    2746:	90 e0       	ldi	r25, 0x00	; 0
    {
        rate = (uint16_t)(1000000L / 57600L - 1);
        baud = BAUD_RATE_115200;
    }

    cli();
    2748:	f8 94       	cli
    // Set baud rate
    UBRR0H = (uint8_t) (rate >> 8);
    274a:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (uint8_t) (rate & 0xff);
    274e:	80 93 c4 00 	sts	0x00C4, r24

    // Enable receiver and transmitter
    UCSR0A = (1 << U2X0);
    2752:	82 e0       	ldi	r24, 0x02	; 2
    2754:	80 93 c0 00 	sts	0x00C0, r24

    // Enable Interrupts on receive character
    UCSR0B = (1 << RXCIE0)|(1 << RXEN0)|(1 << TXEN0);
    2758:	88 e9       	ldi	r24, 0x98	; 152
    275a:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = (1 << UCSZ00)|(1 << UCSZ01);
    275e:	86 e0       	ldi	r24, 0x06	; 6
    2760:	80 93 c2 00 	sts	0x00C2, r24
    sei();
    2764:	78 94       	sei

    // Save the baud rate in EEPROM
    lcd_set (LCD_SET_CHECKBYTE, EEPROM_ADDR_BAUDRATE, baud);
    2766:	4c 2f       	mov	r20, r28
    2768:	61 e0       	ldi	r22, 0x01	; 1
    276a:	85 ec       	ldi	r24, 0xC5	; 197
    276c:	0e 94 3f 12 	call	0x247e	; 0x247e <lcd_set>

    // Return the rate that we are using.
    return baud;
}
    2770:	8c 2f       	mov	r24, r28
    2772:	cf 91       	pop	r28
    2774:	08 95       	ret

00002776 <serial_init>:
///
void
serial_init (void)
{
    // Set up the ring buffer.
    rx_count = 0;
    2776:	10 92 13 02 	sts	0x0213, r1
    rx_head = 0;
    277a:	10 92 15 02 	sts	0x0215, r1
    rx_tail = 0;
    277e:	10 92 14 02 	sts	0x0214, r1
    rx_pause = 0;
    2782:	10 92 12 02 	sts	0x0212, r1

    // Configure the serial port.
    serial_baudrate (BAUD_RATE_DEFAULT);
    2786:	86 e0       	ldi	r24, 0x06	; 6
    2788:	0c 94 82 13 	jmp	0x2704	; 0x2704 <serial_baudrate>

0000278c <serial_putc>:
///
void
serial_putc (char cc)
{
    // Wait for empty transmit buffer.
    while (!( UCSR0A & (1 << UDRE0)))
    278c:	90 91 c0 00 	lds	r25, 0x00C0
    2790:	95 ff       	sbrs	r25, 5
    2792:	fc cf       	rjmp	.-8      	; 0x278c <serial_putc>
        /* Do nothing */ ;

    // Put data into buffer, sends the data
    UDR0 = cc;
    2794:	80 93 c6 00 	sts	0x00C6, r24
    2798:	08 95       	ret

0000279a <serial_flush>:
///
void
serial_flush (void)
{
    // Disable interrupts and reset the ring buffer variables.
    cli();
    279a:	f8 94       	cli
    rx_head = 0;
    279c:	10 92 15 02 	sts	0x0215, r1
    rx_tail = 0;
    27a0:	10 92 14 02 	sts	0x0214, r1
    rx_count = 0;
    27a4:	10 92 13 02 	sts	0x0213, r1
    rx_pause = 0;
    27a8:	10 92 12 02 	sts	0x0212, r1
    sei();
    27ac:	78 94       	sei

    // Send a XON to tell the host to resume sending and re-enable
    // reception
    serial_putc (CHAR_XON);
    27ae:	81 e1       	ldi	r24, 0x11	; 17
    27b0:	0c 94 c6 13 	jmp	0x278c	; 0x278c <serial_putc>

000027b4 <serial_peek>:
///
/// @return The character at the peek position.
///
char
serial_peek (uint16_t offset)
{
    27b4:	cf 93       	push	r28
    27b6:	df 93       	push	r29
    27b8:	ec 01       	movw	r28, r24
    // Wait for the the character to enter the RX_buffer.
    while (rx_count <= offset)
    27ba:	80 91 13 02 	lds	r24, 0x0213
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	c8 17       	cp	r28, r24
    27c2:	d9 07       	cpc	r29, r25
    27c4:	58 f0       	brcs	.+22     	; 0x27dc <serial_peek+0x28>
    {
        // Reset the watchdog so it does not fire
        wdt_reset(); 
    27c6:	a8 95       	wdr

        // We do not have enough characters. If we are blocking then initiate
        // an unblock. Because the peek is requested in internally then we
        // assume that the buffer is large enough for the peek that we
        // require so we do not need to check the XON threshold.
        if (rx_pause != 0)
    27c8:	80 91 12 02 	lds	r24, 0x0212
    27cc:	88 23       	and	r24, r24
    27ce:	a9 f3       	breq	.-22     	; 0x27ba <serial_peek+0x6>
        {
            // Send a XON to tell the host to resume sending and re-enable
            // reception
            serial_putc (CHAR_XON);
    27d0:	81 e1       	ldi	r24, 0x11	; 17
    27d2:	0e 94 c6 13 	call	0x278c	; 0x278c <serial_putc>
            rx_pause = 0;
    27d6:	10 92 12 02 	sts	0x0212, r1
    27da:	ef cf       	rjmp	.-34     	; 0x27ba <serial_peek+0x6>
        }
    }

    // The byte has arrived in the rx_buffer, calculate the position to read
    // the buffer.
    offset += rx_tail;
    27dc:	80 91 14 02 	lds	r24, 0x0214
    27e0:	9e 01       	movw	r18, r28
    27e2:	28 0f       	add	r18, r24
    27e4:	31 1d       	adc	r19, r1
    27e6:	c9 01       	movw	r24, r18
    if (offset >= RX_BUFFER_SIZE)
    27e8:	2f 3f       	cpi	r18, 0xFF	; 255
    27ea:	31 05       	cpc	r19, r1
    27ec:	11 f0       	breq	.+4      	; 0x27f2 <serial_peek+0x3e>
    27ee:	08 f0       	brcs	.+2      	; 0x27f2 <serial_peek+0x3e>
        offset -= RX_BUFFER_SIZE;
    27f0:	9a 95       	dec	r25

    // Reset the watchdog so it does not fire
    wdt_reset(); 
    27f2:	a8 95       	wdr
    
    // Return the character.
    return rx_buffer [offset];
    27f4:	fc 01       	movw	r30, r24
    27f6:	ee 5e       	subi	r30, 0xEE	; 238
    27f8:	fe 4f       	sbci	r31, 0xFE	; 254
}
    27fa:	80 81       	ld	r24, Z
    27fc:	df 91       	pop	r29
    27fe:	cf 91       	pop	r28
    2800:	08 95       	ret

00002802 <serial_getc>:
///
/// @return The character at the read position.
///
char
serial_getc (void)
{
    2802:	cf 93       	push	r28
    char cc;

    // Wait for data to be available
    while (rx_count == 0)
    2804:	80 91 13 02 	lds	r24, 0x0213
    2808:	81 11       	cpse	r24, r1
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <serial_getc+0xe>
    {
        // Reset the watchdog so it does not fire
        wdt_reset(); 
    280c:	a8 95       	wdr
    280e:	fa cf       	rjmp	.-12     	; 0x2804 <serial_getc+0x2>
    }
        
    // Get char from buffer and increment read pointer. If the read pointer
    // reaches the end of the buffer, wrap back to the beginning.
    cc = rx_buffer [rx_tail++];
    2810:	e0 91 14 02 	lds	r30, 0x0214
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	8e 0f       	add	r24, r30
    2818:	80 93 14 02 	sts	0x0214, r24
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	ee 5e       	subi	r30, 0xEE	; 238
    2820:	fe 4f       	sbci	r31, 0xFE	; 254
    2822:	c0 81       	ld	r28, Z
#if RX_BUFFER_SIZE != 265
    if (rx_tail >= RX_BUFFER_SIZE)
    2824:	80 91 14 02 	lds	r24, 0x0214
        rx_tail = 0;
#endif
    // Interrupts must be disabled when changing rx_count, since it can be
    // changed here and in the ISR.
    cli();
    2828:	f8 94       	cli
    rx_count--;
    282a:	90 91 13 02 	lds	r25, 0x0213
    282e:	91 50       	subi	r25, 0x01	; 1
    2830:	90 93 13 02 	sts	0x0213, r25
    sei();
    2834:	78 94       	sei

    // Check to see if we need to re-enable reception
    if (rx_pause != 0)
    2836:	80 91 12 02 	lds	r24, 0x0212
    283a:	88 23       	and	r24, r24
    283c:	59 f0       	breq	.+22     	; 0x2854 <serial_getc+0x52>
    {
        // USART reception is currently suspended re-enable reception if the
        // RX_buffer is suitably empty
        if (rx_count < prefs_xon)
    283e:	90 91 13 02 	lds	r25, 0x0213
    2842:	80 91 e9 02 	lds	r24, 0x02E9
    2846:	98 17       	cp	r25, r24
    2848:	28 f4       	brcc	.+10     	; 0x2854 <serial_getc+0x52>
        {
            // Send a XON to tell the host to resume sending and re-enable
            // reception
            serial_putc (CHAR_XON);
    284a:	81 e1       	ldi	r24, 0x11	; 17
    284c:	0e 94 c6 13 	call	0x278c	; 0x278c <serial_putc>
            rx_pause = 0;
    2850:	10 92 12 02 	sts	0x0212, r1
        }
    }

    // Reset the watchdog so it does not fire
    wdt_reset(); 
    2854:	a8 95       	wdr
    
    // Return the character to the caller.
    return cc;
}
    2856:	8c 2f       	mov	r24, r28
    2858:	cf 91       	pop	r28
    285a:	08 95       	ret

0000285c <serial_flushc>:
///
/// @return the number of bytes flushed.
///
uint8_t 
serial_flushc (uint8_t bytes)
{
    285c:	cf 93       	push	r28
    285e:	c8 2f       	mov	r28, r24
    // Interrupts must be disabled when changing rx_count, since it can be
    // changed here and in the ISR. 
    cli();
    2860:	f8 94       	cli
    if (rx_count >= bytes)
    2862:	80 91 13 02 	lds	r24, 0x0213
    2866:	8c 17       	cp	r24, r28
    2868:	30 f0       	brcs	.+12     	; 0x2876 <serial_flushc+0x1a>
        rx_count -= bytes;
    286a:	80 91 13 02 	lds	r24, 0x0213
    286e:	8c 1b       	sub	r24, r28
    2870:	80 93 13 02 	sts	0x0213, r24
    2874:	04 c0       	rjmp	.+8      	; 0x287e <serial_flushc+0x22>
    else
    {
        bytes = rx_count;
    2876:	c0 91 13 02 	lds	r28, 0x0213
        rx_count = 0;
    287a:	10 92 13 02 	sts	0x0213, r1
    }
    sei();
    287e:	78 94       	sei
    
    // Adjust the tail to match
    rx_tail += bytes;
    2880:	80 91 14 02 	lds	r24, 0x0214
    2884:	8c 0f       	add	r24, r28
    2886:	80 93 14 02 	sts	0x0214, r24
#if RX_BUFFER_SIZE != 265
    if (rx_tail >= RX_BUFFER_SIZE)
    288a:	80 91 14 02 	lds	r24, 0x0214
        rx_tail -= RX_BUFFER_SIZE;
#endif
    // Check to see if we need to re-enable reception
    if (rx_pause != 0)
    288e:	80 91 12 02 	lds	r24, 0x0212
    2892:	88 23       	and	r24, r24
    2894:	59 f0       	breq	.+22     	; 0x28ac <serial_flushc+0x50>
    {
        // USART reception is currently suspended re-enable reception if the
        // RX_buffer is suitably empty
        if (rx_count < prefs_xon)
    2896:	90 91 13 02 	lds	r25, 0x0213
    289a:	80 91 e9 02 	lds	r24, 0x02E9
    289e:	98 17       	cp	r25, r24
    28a0:	28 f4       	brcc	.+10     	; 0x28ac <serial_flushc+0x50>
        {
            // Send a XON to tell the host to resume sending and re-enable
            // reception
            serial_putc (CHAR_XON);
    28a2:	81 e1       	ldi	r24, 0x11	; 17
    28a4:	0e 94 c6 13 	call	0x278c	; 0x278c <serial_putc>
            rx_pause = 0;
    28a8:	10 92 12 02 	sts	0x0212, r1
        }
    }

    // Return the number of bytes removed to the caller.
    return bytes;
}
    28ac:	8c 2f       	mov	r24, r28
    28ae:	cf 91       	pop	r28
    28b0:	08 95       	ret

000028b2 <__vector_18>:
/// USART interrupt handler.
///
/// Read the data from the serial port and add to the rx_buffer.
///
ISR (USART_RX_vect)
{
    28b2:	1f 92       	push	r1
    28b4:	0f 92       	push	r0
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	0f 92       	push	r0
    28ba:	11 24       	eor	r1, r1
    28bc:	2f 93       	push	r18
    28be:	3f 93       	push	r19
    28c0:	4f 93       	push	r20
    28c2:	5f 93       	push	r21
    28c4:	6f 93       	push	r22
    28c6:	7f 93       	push	r23
    28c8:	8f 93       	push	r24
    28ca:	9f 93       	push	r25
    28cc:	af 93       	push	r26
    28ce:	bf 93       	push	r27
    28d0:	ef 93       	push	r30
    28d2:	ff 93       	push	r31
    cli();                              // Disable Interrupts
    28d4:	f8 94       	cli

    rx_buffer [rx_head++] = UDR0;       // Get recieved byte
    28d6:	e0 91 15 02 	lds	r30, 0x0215
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	8e 0f       	add	r24, r30
    28de:	80 93 15 02 	sts	0x0215, r24
    28e2:	80 91 c6 00 	lds	r24, 0x00C6
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	ee 5e       	subi	r30, 0xEE	; 238
    28ea:	fe 4f       	sbci	r31, 0xFE	; 254
    28ec:	80 83       	st	Z, r24
#if RX_BUFFER_SIZE != 265
    if (rx_head >= RX_BUFFER_SIZE)
    28ee:	80 91 15 02 	lds	r24, 0x0215
        rx_head = 0;                    // Wrap to start of buffer
#endif
    if (rx_count == 255)
    28f2:	80 91 13 02 	lds	r24, 0x0213
    28f6:	8f 3f       	cpi	r24, 0xFF	; 255
    28f8:	11 f4       	brne	.+4      	; 0x28fe <__vector_18+0x4c>
        serial_putc (0xff);
    28fa:	0e 94 c6 13 	call	0x278c	; 0x278c <serial_putc>

    rx_count++;                         // Keep count of bytes in buffer
    28fe:	80 91 13 02 	lds	r24, 0x0213
    2902:	8f 5f       	subi	r24, 0xFF	; 255
    2904:	80 93 13 02 	sts	0x0213, r24

    // Test for the receive buffer close to full, if we can transmit without
    // blocking the ISR then send an XOFF .
    if (rx_count > prefs_xoff)
    2908:	90 91 13 02 	lds	r25, 0x0213
    290c:	80 91 ea 02 	lds	r24, 0x02EA
    2910:	89 17       	cp	r24, r25
    2912:	50 f4       	brcc	.+20     	; 0x2928 <__vector_18+0x76>
    {
        if ((UCSR0A & (1 << UDRE0)))
    2914:	80 91 c0 00 	lds	r24, 0x00C0
    2918:	85 ff       	sbrs	r24, 5
    291a:	06 c0       	rjmp	.+12     	; 0x2928 <__vector_18+0x76>
        {
            UDR0 = CHAR_XOFF;           // Send XOFF
    291c:	83 e1       	ldi	r24, 0x13	; 19
    291e:	80 93 c6 00 	sts	0x00C6, r24
            rx_pause = 1;               // Flag reception suspended
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	80 93 12 02 	sts	0x0212, r24
        }
    }

    sei();                              // Enable Interrupts
    2928:	78 94       	sei
}
    292a:	ff 91       	pop	r31
    292c:	ef 91       	pop	r30
    292e:	bf 91       	pop	r27
    2930:	af 91       	pop	r26
    2932:	9f 91       	pop	r25
    2934:	8f 91       	pop	r24
    2936:	7f 91       	pop	r23
    2938:	6f 91       	pop	r22
    293a:	5f 91       	pop	r21
    293c:	4f 91       	pop	r20
    293e:	3f 91       	pop	r19
    2940:	2f 91       	pop	r18
    2942:	0f 90       	pop	r0
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	0f 90       	pop	r0
    2948:	1f 90       	pop	r1
    294a:	18 95       	reti

0000294c <sprite_draw>:
/// @param [in] sprite_id identifies the sprite to draw.
/// @param [in] s_r The drawing mask.
///
void
sprite_draw (uint8_t x, uint8_t y, uint8_t sprite_id, uint8_t mode)
{
    294c:	9f 92       	push	r9
    294e:	af 92       	push	r10
    2950:	bf 92       	push	r11
    2952:	cf 92       	push	r12
    2954:	df 92       	push	r13
    2956:	ef 92       	push	r14
    2958:	ff 92       	push	r15
    295a:	0f 93       	push	r16
    295c:	1f 93       	push	r17
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	00 d0       	rcall	.+0      	; 0x2964 <sprite_draw+0x18>
    2964:	1f 92       	push	r1
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	b8 2e       	mov	r11, r24
    296c:	a2 2e       	mov	r10, r18
    uint8_t *sprite_ptr;                // Pointer to sprite
    uint8_t width;                      // Sprite width
    uint8_t height;                     // Sprite height

    // See what kind of sprite we are dealing with.
    if (sprite_id & 0x80)
    296e:	47 ff       	sbrs	r20, 7
    2970:	43 c0       	rjmp	.+134    	; 0x29f8 <sprite_draw+0xac>
        uint8_t *eeprom_addr;           // Address in EEPROM
        uint8_t num_bytes;              // The number of bytes in sprite
        uint8_t offset;                 // Offset to write buffer

        // Ensure that the sprite_id is valid
        sprite_id &= ~0x80;
    2972:	4f 77       	andi	r20, 0x7F	; 127
        if (sprite_id >= EEPROM_SPRITE_NUM)
    2974:	4e 30       	cpi	r20, 0x0E	; 14
    2976:	08 f0       	brcs	.+2      	; 0x297a <sprite_draw+0x2e>
    2978:	6a c0       	rjmp	.+212    	; 0x2a4e <sprite_draw+0x102>
            return;

        // Get the EEPROM start address of the sprite
        eeprom_addr = (uint8_t *)(((int)(sprite_id) * EEPROM_SPRITE_SIZE) + EEPROM_ADDR_SPRITE_START);
    297a:	82 e2       	ldi	r24, 0x22	; 34
    297c:	48 9f       	mul	r20, r24
    297e:	60 01       	movw	r12, r0
    2980:	11 24       	eor	r1, r1

        // Read the sprite into a buffer.
        width = eeprom_read_byte ((const uint8_t *)(eeprom_addr++));
    2982:	c6 01       	movw	r24, r12
    2984:	80 96       	adiw	r24, 0x20	; 32
    2986:	6b 83       	std	Y+3, r22	; 0x03
    2988:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__eerd_byte_m168>
    298c:	f8 2e       	mov	r15, r24
        height = eeprom_read_byte ((const uint8_t *)(eeprom_addr++));
    298e:	86 01       	movw	r16, r12
    2990:	0e 5d       	subi	r16, 0xDE	; 222
    2992:	1f 4f       	sbci	r17, 0xFF	; 255
    2994:	c6 01       	movw	r24, r12
    2996:	81 96       	adiw	r24, 0x21	; 33
    2998:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__eerd_byte_m168>

        // Copy the sprite data into the end of the draw_buffer, this should
        // not be used by the bitblt operation.
        num_bytes = width * ((height + 7) >> 3);
    299c:	e8 2f       	mov	r30, r24
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	37 96       	adiw	r30, 0x07	; 7
    29a2:	93 e0       	ldi	r25, 0x03	; 3
    29a4:	f5 95       	asr	r31
    29a6:	e7 95       	ror	r30
    29a8:	9a 95       	dec	r25
    29aa:	e1 f7       	brne	.-8      	; 0x29a4 <sprite_draw+0x58>
    29ac:	fe 9e       	mul	r15, r30
    29ae:	90 2c       	mov	r9, r0
    29b0:	11 24       	eor	r1, r1
        offset = (sizeof(draw_buffer) - 2) - num_bytes;
    29b2:	2e e9       	ldi	r18, 0x9E	; 158
    29b4:	29 19       	sub	r18, r9
        sprite_ptr = &draw_buffer [offset];
    29b6:	30 e0       	ldi	r19, 0x00	; 0

        // Copy in the data from EEPROM
        *sprite_ptr++ = width;
    29b8:	2c 5f       	subi	r18, 0xFC	; 252
    29ba:	3c 4f       	sbci	r19, 0xFC	; 252
    29bc:	f9 01       	movw	r30, r18
    29be:	f0 82       	st	Z, r15
        *sprite_ptr++ = height;
    29c0:	81 83       	std	Z+1, r24	; 0x01
    29c2:	79 01       	movw	r14, r18
    29c4:	f2 e0       	ldi	r31, 0x02	; 2
    29c6:	ef 0e       	add	r14, r31
    29c8:	f1 1c       	adc	r15, r1
        while (num_bytes-- > 0)
    29ca:	6b 81       	ldd	r22, Y+3	; 0x03
    29cc:	9a 94       	dec	r9
    29ce:	ff ef       	ldi	r31, 0xFF	; 255
    29d0:	9f 16       	cp	r9, r31
    29d2:	d1 f0       	breq	.+52     	; 0x2a08 <sprite_draw+0xbc>
        {
            *sprite_ptr++ = eeprom_read_byte ((const uint8_t *)(eeprom_addr++));
    29d4:	68 01       	movw	r12, r16
    29d6:	8f ef       	ldi	r24, 0xFF	; 255
    29d8:	c8 1a       	sub	r12, r24
    29da:	d8 0a       	sbc	r13, r24
    29dc:	c8 01       	movw	r24, r16
    29de:	29 83       	std	Y+1, r18	; 0x01
    29e0:	3a 83       	std	Y+2, r19	; 0x02
    29e2:	6b 83       	std	Y+3, r22	; 0x03
    29e4:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__eerd_byte_m168>
    29e8:	f7 01       	movw	r30, r14
    29ea:	81 93       	st	Z+, r24
    29ec:	7f 01       	movw	r14, r30
    29ee:	86 01       	movw	r16, r12
    29f0:	6b 81       	ldd	r22, Y+3	; 0x03
    29f2:	3a 81       	ldd	r19, Y+2	; 0x02
    29f4:	29 81       	ldd	r18, Y+1	; 0x01
    29f6:	ea cf       	rjmp	.-44     	; 0x29cc <sprite_draw+0x80>
        sprite_ptr = &draw_buffer [offset];
    }
    else
    {
        // Ensure that the sprite_id is valid
        if (sprite_id >= NUM_SPRITES)
    29f8:	46 30       	cpi	r20, 0x06	; 6
    29fa:	48 f5       	brcc	.+82     	; 0x2a4e <sprite_draw+0x102>
            return;

        // Point to the sprite
        sprite_ptr = &sprite [sprite_id * SPRITE_SIZE];
    29fc:	82 e2       	ldi	r24, 0x22	; 34
    29fe:	48 9f       	mul	r20, r24
    2a00:	90 01       	movw	r18, r0
    2a02:	11 24       	eor	r1, r1
    2a04:	2a 5e       	subi	r18, 0xEA	; 234
    2a06:	3d 4f       	sbci	r19, 0xFD	; 253
    }

    // If the mode is centre then centre the sprite at the x,y corrdinates.
    if (mode & MODE_SPRITE_CENTER)
    2a08:	a3 fe       	sbrs	r10, 3
    2a0a:	0f c0       	rjmp	.+30     	; 0x2a2a <sprite_draw+0xde>
    {
        // Centre the sprite at x,y by adjusting the x,y coordinates.
        width = (*sprite_ptr++) >> 1;   // Get the width/2
    2a0c:	f9 01       	movw	r30, r18
    2a0e:	80 81       	ld	r24, Z
    2a10:	86 95       	lsr	r24
        if (x > width)
    2a12:	8b 15       	cp	r24, r11
    2a14:	08 f4       	brcc	.+2      	; 0x2a18 <sprite_draw+0xcc>
            x -= width;
    2a16:	b8 1a       	sub	r11, r24

        height = (*sprite_ptr--) >> 1;  // Get the height/2
    2a18:	f9 01       	movw	r30, r18
    2a1a:	81 81       	ldd	r24, Z+1	; 0x01
    2a1c:	86 95       	lsr	r24
        if (y > height)
    2a1e:	86 17       	cp	r24, r22
    2a20:	08 f4       	brcc	.+2      	; 0x2a24 <sprite_draw+0xd8>
            y -= height;
    2a22:	68 1b       	sub	r22, r24

        // Remove the sprite flag so bitblt does not see it.
        mode &= ~MODE_SPRITE_CENTER;
    2a24:	fa 2d       	mov	r31, r10
    2a26:	f7 7f       	andi	r31, 0xF7	; 247
    2a28:	af 2e       	mov	r10, r31
    }

    // Display the sprite.
    draw_vbitblt (x, y, mode, sprite_ptr);
    2a2a:	4a 2d       	mov	r20, r10
    2a2c:	8b 2d       	mov	r24, r11
}
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	1f 91       	pop	r17
    2a3a:	0f 91       	pop	r16
    2a3c:	ff 90       	pop	r15
    2a3e:	ef 90       	pop	r14
    2a40:	df 90       	pop	r13
    2a42:	cf 90       	pop	r12
    2a44:	bf 90       	pop	r11
    2a46:	af 90       	pop	r10
    2a48:	9f 90       	pop	r9
        // Remove the sprite flag so bitblt does not see it.
        mode &= ~MODE_SPRITE_CENTER;
    }

    // Display the sprite.
    draw_vbitblt (x, y, mode, sprite_ptr);
    2a4a:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <draw_vbitblt>
}
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	df 91       	pop	r29
    2a56:	cf 91       	pop	r28
    2a58:	1f 91       	pop	r17
    2a5a:	0f 91       	pop	r16
    2a5c:	ff 90       	pop	r15
    2a5e:	ef 90       	pop	r14
    2a60:	df 90       	pop	r13
    2a62:	cf 90       	pop	r12
    2a64:	bf 90       	pop	r11
    2a66:	af 90       	pop	r10
    2a68:	9f 90       	pop	r9
    2a6a:	08 95       	ret

00002a6c <sprite_upload>:
///
/// The sprite data is in native bitblt format, ie rows of bytes representing
/// 8-pixel high vertical stripes
void
sprite_upload (uint8_t sprite_id, uint8_t width, uint8_t height)
{
    2a6c:	cf 92       	push	r12
    2a6e:	df 92       	push	r13
    2a70:	ef 92       	push	r14
    2a72:	ff 92       	push	r15
    2a74:	0f 93       	push	r16
    2a76:	1f 93       	push	r17
    2a78:	cf 93       	push	r28
    2a7a:	df 93       	push	r29
    2a7c:	1f 92       	push	r1
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
    uint8_t sprite_bytes;

    sprite_bytes = width * ((height + 7) >> 3);
    2a82:	24 2f       	mov	r18, r20
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	29 5f       	subi	r18, 0xF9	; 249
    2a88:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8a:	53 e0       	ldi	r21, 0x03	; 3
    2a8c:	35 95       	asr	r19
    2a8e:	27 95       	ror	r18
    2a90:	5a 95       	dec	r21
    2a92:	e1 f7       	brne	.-8      	; 0x2a8c <sprite_upload+0x20>
    2a94:	62 9f       	mul	r22, r18
    2a96:	10 2d       	mov	r17, r0
    2a98:	11 24       	eor	r1, r1

    if (sprite_id & 0x80)
    2a9a:	87 ff       	sbrs	r24, 7
    2a9c:	27 c0       	rjmp	.+78     	; 0x2aec <sprite_upload+0x80>
    {
        // This is a EEPROM based sprite.
        uint8_t *eeprom_addr;

        // Ensure that the sprite_id is valid
        sprite_id &= 0x7f;
    2a9e:	8f 77       	andi	r24, 0x7F	; 127
    2aa0:	8e 30       	cpi	r24, 0x0E	; 14
    2aa2:	08 f0       	brcs	.+2      	; 0x2aa6 <sprite_upload+0x3a>
    2aa4:	8d e0       	ldi	r24, 0x0D	; 13
        if (sprite_id >= EEPROM_SPRITE_NUM)
            sprite_id = EEPROM_SPRITE_NUM - 1;

        eeprom_addr = (uint8_t *)(((int)(sprite_id) * EEPROM_SPRITE_SIZE) + EEPROM_ADDR_SPRITE_START);
    2aa6:	92 e2       	ldi	r25, 0x22	; 34
    2aa8:	89 9f       	mul	r24, r25
    2aaa:	60 01       	movw	r12, r0
    2aac:	11 24       	eor	r1, r1

        // Write the sprite into a buffer.
        eeprom_write_byte (eeprom_addr++, width);
    2aae:	c6 01       	movw	r24, r12
    2ab0:	80 96       	adiw	r24, 0x20	; 32
    2ab2:	49 83       	std	Y+1, r20	; 0x01
    2ab4:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <__eewr_byte_m168>
        eeprom_write_byte (eeprom_addr++, height);
    2ab8:	49 81       	ldd	r20, Y+1	; 0x01
    2aba:	64 2f       	mov	r22, r20
    2abc:	c6 01       	movw	r24, r12
    2abe:	81 96       	adiw	r24, 0x21	; 33
    2ac0:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <__eewr_byte_m168>

        // Read the rest of the data from serial and write to eeprom.
        if (sprite_bytes > 0)
    2ac4:	11 23       	and	r17, r17
    2ac6:	59 f1       	breq	.+86     	; 0x2b1e <sprite_upload+0xb2>

        eeprom_addr = (uint8_t *)(((int)(sprite_id) * EEPROM_SPRITE_SIZE) + EEPROM_ADDR_SPRITE_START);

        // Write the sprite into a buffer.
        eeprom_write_byte (eeprom_addr++, width);
        eeprom_write_byte (eeprom_addr++, height);
    2ac8:	e2 e2       	ldi	r30, 0x22	; 34
    2aca:	ce 0e       	add	r12, r30
    2acc:	d1 1c       	adc	r13, r1
    2ace:	fc 2c       	mov	r15, r12
    2ad0:	f1 0e       	add	r15, r17
        // Read the rest of the data from serial and write to eeprom.
        if (sprite_bytes > 0)
        {
            do
            {
                eeprom_write_byte (eeprom_addr++, serial_getc ());
    2ad2:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
    2ad6:	86 01       	movw	r16, r12
    2ad8:	0f 5f       	subi	r16, 0xFF	; 255
    2ada:	1f 4f       	sbci	r17, 0xFF	; 255
    2adc:	68 2f       	mov	r22, r24
    2ade:	c6 01       	movw	r24, r12
    2ae0:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <__eewr_byte_m168>
            }
            while (--sprite_bytes > 0);
    2ae4:	f0 16       	cp	r15, r16
    2ae6:	d9 f0       	breq	.+54     	; 0x2b1e <sprite_upload+0xb2>
        // Read the rest of the data from serial and write to eeprom.
        if (sprite_bytes > 0)
        {
            do
            {
                eeprom_write_byte (eeprom_addr++, serial_getc ());
    2ae8:	68 01       	movw	r12, r16
    2aea:	f3 cf       	rjmp	.-26     	; 0x2ad2 <sprite_upload+0x66>
    2aec:	86 30       	cpi	r24, 0x06	; 6
    2aee:	08 f0       	brcs	.+2      	; 0x2af2 <sprite_upload+0x86>
    2af0:	85 e0       	ldi	r24, 0x05	; 5
        uint8_t *sprite_addr;

        if (sprite_id >= NUM_SPRITES)
            sprite_id = NUM_SPRITES - 1;  // Coerce to valid sprite

        sprite_addr = &sprite[(int)(sprite_id) * SPRITE_SIZE];
    2af2:	92 e2       	ldi	r25, 0x22	; 34
    2af4:	89 9f       	mul	r24, r25
    2af6:	f0 01       	movw	r30, r0
    2af8:	11 24       	eor	r1, r1

        // Write the sprite into the buffer
        *sprite_addr++ = width;
    2afa:	ea 5e       	subi	r30, 0xEA	; 234
    2afc:	fd 4f       	sbci	r31, 0xFD	; 253
    2afe:	60 83       	st	Z, r22
        *sprite_addr++ = height;
    2b00:	41 83       	std	Z+1, r20	; 0x01

        // Read the rest of the data from serial and write to store.
        if (sprite_bytes > 0)
    2b02:	11 23       	and	r17, r17
    2b04:	61 f0       	breq	.+24     	; 0x2b1e <sprite_upload+0xb2>

        sprite_addr = &sprite[(int)(sprite_id) * SPRITE_SIZE];

        // Write the sprite into the buffer
        *sprite_addr++ = width;
        *sprite_addr++ = height;
    2b06:	7f 01       	movw	r14, r30
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	e8 0e       	add	r14, r24
    2b0c:	f1 1c       	adc	r15, r1
    2b0e:	1e 0d       	add	r17, r14
        // Read the rest of the data from serial and write to store.
        if (sprite_bytes > 0)
        {
            do
            {
                *sprite_addr++ = serial_getc ();
    2b10:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
    2b14:	f7 01       	movw	r30, r14
    2b16:	81 93       	st	Z+, r24
    2b18:	7f 01       	movw	r14, r30
            }
            while (--sprite_bytes > 0);
    2b1a:	1e 13       	cpse	r17, r30
    2b1c:	f9 cf       	rjmp	.-14     	; 0x2b10 <sprite_upload+0xa4>
        }
    }
}
    2b1e:	0f 90       	pop	r0
    2b20:	df 91       	pop	r29
    2b22:	cf 91       	pop	r28
    2b24:	1f 91       	pop	r17
    2b26:	0f 91       	pop	r16
    2b28:	ff 90       	pop	r15
    2b2a:	ef 90       	pop	r14
    2b2c:	df 90       	pop	r13
    2b2e:	cf 90       	pop	r12
    2b30:	08 95       	ret

00002b32 <sprite_splash>:
{
    uint8_t splash;

    // Increment the splash preference, if it reaches 2 then disable the
    // splash.
    splash = prefs_splash;
    2b32:	40 91 e5 02 	lds	r20, 0x02E5
    if (++splash > 2)
    2b36:	4f 5f       	subi	r20, 0xFF	; 255
    2b38:	43 30       	cpi	r20, 0x03	; 3
    2b3a:	08 f0       	brcs	.+2      	; 0x2b3e <sprite_splash+0xc>
        splash = 0;
    2b3c:	40 e0       	ldi	r20, 0x00	; 0

    // Write the splash screen value to the preference and EEPROM.
    lcd_set (LCD_SET_CHECKBYTE, EEPROM_ADDR_SPLASH, splash);
    2b3e:	63 e0       	ldi	r22, 0x03	; 3
    2b40:	85 ec       	ldi	r24, 0xC5	; 197
    2b42:	0c 94 3f 12 	jmp	0x247e	; 0x247e <lcd_set>

00002b46 <status_check>:
/// controller.
///
static void
status_check (void)
{
    uint8_t expected_status = status_value;   // Let compiler know it is read once!
    2b46:	20 91 00 01 	lds	r18, 0x0100
    uint8_t bus_status;                       // Status on the bus

    // Status check: Wait for the controller to be ready.
    do
    {
        PORTC &= ~((1 << CE) | (1 << RD));  // Chip enable + read
    2b4a:	88 b1       	in	r24, 0x08	; 8
    2b4c:	89 7f       	andi	r24, 0xF9	; 249
    2b4e:	88 b9       	out	0x08, r24	; 8

        // We need a minimum 150ns delay here.
        DDRB &= ~0x03;                  // Alternative to NOPs
    2b50:	84 b1       	in	r24, 0x04	; 4
    2b52:	8c 7f       	andi	r24, 0xFC	; 252
    2b54:	84 b9       	out	0x04, r24	; 4
        DDRD &= ~0xfc;
    2b56:	8a b1       	in	r24, 0x0a	; 10
    2b58:	83 70       	andi	r24, 0x03	; 3
    2b5a:	8a b9       	out	0x0a, r24	; 10

        // Pull the data in.
        bus_status = PINB & 0x03;
    2b5c:	93 b1       	in	r25, 0x03	; 3
        bus_status |= PIND & 0xfc;
    2b5e:	89 b1       	in	r24, 0x09	; 9
    2b60:	8c 7f       	andi	r24, 0xFC	; 252
        // We need a minimum 150ns delay here.
        DDRB &= ~0x03;                  // Alternative to NOPs
        DDRD &= ~0xfc;

        // Pull the data in.
        bus_status = PINB & 0x03;
    2b62:	93 70       	andi	r25, 0x03	; 3
        bus_status |= PIND & 0xfc;
    2b64:	89 2b       	or	r24, r25

        PORTC |= (1 << CE) | (1 << RD); // Deselect the chip.
    2b66:	98 b1       	in	r25, 0x08	; 8
    2b68:	96 60       	ori	r25, 0x06	; 6
    2b6a:	98 b9       	out	0x08, r25	; 8
    }
    while ((bus_status & expected_status) != expected_status);
    2b6c:	82 23       	and	r24, r18
    2b6e:	82 13       	cpse	r24, r18
    2b70:	ec cf       	rjmp	.-40     	; 0x2b4a <status_check+0x4>
}
    2b72:	08 95       	ret

00002b74 <data_write>:
///
/// @param [in] data The data to write.
///
static void
data_write (uint8_t data)
{
    2b74:	cf 93       	push	r28
    2b76:	df 93       	push	r29
    2b78:	1f 92       	push	r1
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
    // Status check 1: Wait for the controller to be ready.
    status_check ();
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    2b80:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <status_check>

    // Set the port direction registers to make data pins outputs.
    DDRB |= 0x03;
    2b84:	94 b1       	in	r25, 0x04	; 4
    2b86:	93 60       	ori	r25, 0x03	; 3
    2b88:	94 b9       	out	0x04, r25	; 4
    DDRD |= 0xfc;
    2b8a:	9a b1       	in	r25, 0x0a	; 10
    2b8c:	9c 6f       	ori	r25, 0xFC	; 252
    2b8e:	9a b9       	out	0x0a, r25	; 10

    // Clear PB7:2 and PD1:0 in preparation for data.
    PORTD &= 0x03;
    2b90:	9b b1       	in	r25, 0x0b	; 11
    2b92:	93 70       	andi	r25, 0x03	; 3
    2b94:	9b b9       	out	0x0b, r25	; 11
    PORTB &= 0xfc;
    2b96:	95 b1       	in	r25, 0x05	; 5
    2b98:	9c 7f       	andi	r25, 0xFC	; 252
    2b9a:	95 b9       	out	0x05, r25	; 5

    // Set up the data onto the lines.
    // Mask off PB1:0 and PD7:2 so we don't change them and then write the
    // bits.
    PORTB |= data & 0x03;
    2b9c:	25 b1       	in	r18, 0x05	; 5
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	98 2f       	mov	r25, r24
    2ba2:	93 70       	andi	r25, 0x03	; 3
    2ba4:	92 2b       	or	r25, r18
    2ba6:	95 b9       	out	0x05, r25	; 5
    PORTD |= data & 0xfc;
    2ba8:	9b b1       	in	r25, 0x0b	; 11
    2baa:	8c 7f       	andi	r24, 0xFC	; 252
    2bac:	89 2b       	or	r24, r25
    2bae:	8b b9       	out	0x0b, r24	; 11
    PORTC &= ~((1 << CD) |              // Data command
    2bb0:	88 b1       	in	r24, 0x08	; 8
    2bb2:	82 7f       	andi	r24, 0xF2	; 242
    2bb4:	88 b9       	out	0x08, r24	; 8
               (1 << WR) | (1 << CE));  // Write + Chip enable

    // We need a minimum 80ns delay here.
    asm volatile ("nop");
    2bb6:	00 00       	nop
    asm volatile ("nop");
    2bb8:	00 00       	nop

    PORTC |= ((1 << WR) | (1 << CE) |   // Deselect the chip
    2bba:	88 b1       	in	r24, 0x08	; 8
    2bbc:	8d 60       	ori	r24, 0x0D	; 13
    2bbe:	88 b9       	out	0x08, r24	; 8
              (1 << CD));               // Set default state.
}
    2bc0:	0f 90       	pop	r0
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	08 95       	ret

00002bc8 <data_read>:
data_read (void)
{
    uint8_t data;

    // Status check 1: Wait for the controller to be ready.
    status_check ();
    2bc8:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <status_check>

    // Perform the read
    PORTC &= ~((1 << CD) |              // Data transaction
    2bcc:	88 b1       	in	r24, 0x08	; 8
    2bce:	81 7f       	andi	r24, 0xF1	; 241
    2bd0:	88 b9       	out	0x08, r24	; 8
               (1 << CE) | (1 << RD));  // Chip enable + read

    // We need a minimum 150ns delay here.
    DDRB &= ~0x03;                      // +62.5ns
    2bd2:	84 b1       	in	r24, 0x04	; 4
    2bd4:	8c 7f       	andi	r24, 0xFC	; 252
    2bd6:	84 b9       	out	0x04, r24	; 4
    DDRD &= ~0xfc;                      // +125.0ns
    2bd8:	8a b1       	in	r24, 0x0a	; 10
    2bda:	83 70       	andi	r24, 0x03	; 3
    2bdc:	8a b9       	out	0x0a, r24	; 10

    // Pull the data in.
    data = PINB & 0x03;
    2bde:	83 b1       	in	r24, 0x03	; 3
    data |= PIND & 0xfc;
    2be0:	99 b1       	in	r25, 0x09	; 9
    2be2:	9c 7f       	andi	r25, 0xFC	; 252
    // We need a minimum 150ns delay here.
    DDRB &= ~0x03;                      // +62.5ns
    DDRD &= ~0xfc;                      // +125.0ns

    // Pull the data in.
    data = PINB & 0x03;
    2be4:	83 70       	andi	r24, 0x03	; 3
    data |= PIND & 0xfc;

    // CD delay 10ns - not required.
    // Go back to our known state for the signal lines.
    PORTC |= ((1 << CE) | (1 << RD) |   // Deselect the chip.
    2be6:	28 b1       	in	r18, 0x08	; 8
    2be8:	2e 60       	ori	r18, 0x0E	; 14
    2bea:	28 b9       	out	0x08, r18	; 8
              (1 << CD));

    // Return the data to the caller.
    return data;
}
    2bec:	89 2b       	or	r24, r25
    2bee:	08 95       	ret

00002bf0 <cmd_write>:
///                     The lower 8-bits contain the command.
///                     The upper 8-bits contain next status to be read.
///
static void
cmd_write (uint16_t command)
{
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	00 d0       	rcall	.+0      	; 0x2bf6 <cmd_write+0x6>
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    // Status check 1: Wait for the controller to be ready.
    status_check ();
    2bfa:	89 83       	std	Y+1, r24	; 0x01
    2bfc:	9a 83       	std	Y+2, r25	; 0x02
    2bfe:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <status_check>

    // Set the port direction registers to make data pins outputs.
    DDRB |= 0x03;
    2c02:	24 b1       	in	r18, 0x04	; 4
    2c04:	23 60       	ori	r18, 0x03	; 3
    2c06:	24 b9       	out	0x04, r18	; 4
    DDRD |= 0xfc;
    2c08:	2a b1       	in	r18, 0x0a	; 10
    2c0a:	2c 6f       	ori	r18, 0xFC	; 252
    2c0c:	2a b9       	out	0x0a, r18	; 10

    // Clear PB7:2 and PD1:0 in preparation for data.
    PORTD &= 0x03;
    2c0e:	2b b1       	in	r18, 0x0b	; 11
    2c10:	23 70       	andi	r18, 0x03	; 3
    2c12:	2b b9       	out	0x0b, r18	; 11
    PORTB &= 0xfc;
    2c14:	25 b1       	in	r18, 0x05	; 5
    2c16:	2c 7f       	andi	r18, 0xFC	; 252
    2c18:	25 b9       	out	0x05, r18	; 5

    // Set up the data onto the lines.
    // Mask off PB1:0 and PD7:2 so we don't change them and then write the
    // bits.
    PORTB |= (uint8_t)(command) & 0x03;
    2c1a:	35 b1       	in	r19, 0x05	; 5
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	28 2f       	mov	r18, r24
    2c20:	23 70       	andi	r18, 0x03	; 3
    2c22:	23 2b       	or	r18, r19
    2c24:	25 b9       	out	0x05, r18	; 5
    PORTD |= (uint8_t)(command) & 0xfc;
    2c26:	2b b1       	in	r18, 0x0b	; 11
    2c28:	8c 7f       	andi	r24, 0xFC	; 252
    2c2a:	82 2b       	or	r24, r18
    2c2c:	8b b9       	out	0x0b, r24	; 11

    // Note we are expecting CD to be set
    PORTC &= ~((1 << WR)|(1 << CE));    // Chip enable + write
    2c2e:	88 b1       	in	r24, 0x08	; 8
    2c30:	8a 7f       	andi	r24, 0xFA	; 250
    2c32:	88 b9       	out	0x08, r24	; 8

    // We need a minimum 80ns delay here so we do something useful with our
    // time time which is only 2 instructions. Set up the status value for
    // this command to be checked next time.
    status_value = (command >> 8) & 0xff;
    2c34:	9a 81       	ldd	r25, Y+2	; 0x02
    2c36:	90 93 00 01 	sts	0x0100, r25

    // Deselect the chip.
    PORTC |= ((1 << WR) | (1 << CE));
    2c3a:	88 b1       	in	r24, 0x08	; 8
    2c3c:	85 60       	ori	r24, 0x05	; 5
    2c3e:	88 b9       	out	0x08, r24	; 8
    // CD delay 10ns - not required.
}
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	08 95       	ret

00002c4a <set_pointer>:
/// Set the pointer to the byte which contains an arbirary x, y point. For
/// our 160 x 128 pixel display, there are 20*128 memory address, so we need
/// a 16-bit value address to refer to the whole graphics area array.
static void
set_pointer (uint8_t x, uint8_t y)
{
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    // Calculate which address in our memory space contains the pixel. For
    // each increase in y, we increase by 20 locations. For each 8 pixels in
    // x, we increase by one location. Using a 3-right-shift is a cheap way
    // of doing divide by 8 in a processor without a divide operation. Maybe
    // the compiler knows that, maybe not.
    address = (y * SCREEN_COLUMNS) + (x >> 3);
    2c4e:	86 95       	lsr	r24
    2c50:	86 95       	lsr	r24
    2c52:	86 95       	lsr	r24
    2c54:	c8 2f       	mov	r28, r24
    2c56:	d0 e0       	ldi	r29, 0x00	; 0
    2c58:	84 e1       	ldi	r24, 0x14	; 20
    2c5a:	68 9f       	mul	r22, r24
    2c5c:	c0 0d       	add	r28, r0
    2c5e:	d1 1d       	adc	r29, r1
    2c60:	11 24       	eor	r1, r1

    // Now that we have our address, we can write our data out. This is the
    // low byte of the address
    data_write ((uint8_t)(address & 0xff));
    2c62:	8c 2f       	mov	r24, r28
    2c64:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>

    // This is the high byte of the address
    data_write ((uint8_t)(address >> 8));
    2c68:	8d 2f       	mov	r24, r29
    2c6a:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>

    // This is the command for "set pointer address".
    cmd_write (CMD_SET_ADDR_POINTER);
    2c6e:	84 e2       	ldi	r24, 0x24	; 36
    2c70:	93 e0       	ldi	r25, 0x03	; 3
}
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28

    // This is the high byte of the address
    data_write ((uint8_t)(address >> 8));

    // This is the command for "set pointer address".
    cmd_write (CMD_SET_ADDR_POINTER);
    2c76:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <cmd_write>

00002c7a <set_column_pointer>:
/// Set the pointer to the byte which contains an arbirary x_column, y point.
/// For our 160 x 128 pixel display, there are 20*128 memory address, so we
/// need a 16-bit value address to refer to the whole graphics area array.
static void
set_column_pointer (uint8_t x_column, uint8_t y)
{
    2c7a:	cf 93       	push	r28
    2c7c:	df 93       	push	r29
    // Calculate which address in our memory space contains the pixel. For
    // each increase in y, we increase by 20 locations. For each 8 pixels in
    // x, we increase by one location. Using a 3-right-shift is a cheap way
    // of doing divide by 8 in a processor without a divide operation. Maybe
    // the compiler knows that, maybe not.
    address = (y * SCREEN_COLUMNS) + x_column;
    2c7e:	c8 2f       	mov	r28, r24
    2c80:	d0 e0       	ldi	r29, 0x00	; 0
    2c82:	84 e1       	ldi	r24, 0x14	; 20
    2c84:	68 9f       	mul	r22, r24
    2c86:	c0 0d       	add	r28, r0
    2c88:	d1 1d       	adc	r29, r1
    2c8a:	11 24       	eor	r1, r1

    // Now that we have our address, we can write our data out. This is the
    // low byte of the address
    data_write ((uint8_t)(address & 0xff));
    2c8c:	8c 2f       	mov	r24, r28
    2c8e:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>

    // This is the high byte of the address
    data_write ((uint8_t)(address >> 8));
    2c92:	8d 2f       	mov	r24, r29
    2c94:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>

    // This is the command for "set pointer address".
    cmd_write (CMD_SET_ADDR_POINTER);
    2c98:	84 e2       	ldi	r24, 0x24	; 36
    2c9a:	93 e0       	ldi	r25, 0x03	; 3
}
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28

    // This is the high byte of the address
    data_write ((uint8_t)(address >> 8));

    // This is the command for "set pointer address".
    cmd_write (CMD_SET_ADDR_POINTER);
    2ca0:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <cmd_write>

00002ca4 <merge_row>:

static __inline__ uint8_t
merge_row (uint8_t new_row, uint8_t orig_row, uint8_t mode)
{
    // Normalise the mode to retrieve the operator.
    mode &= MODE_OP_MASK;
    2ca4:	94 2f       	mov	r25, r20
    2ca6:	96 70       	andi	r25, 0x06	; 6

    if (mode >= MODE_XOR)
    2ca8:	94 30       	cpi	r25, 0x04	; 4
    2caa:	38 f0       	brcs	.+14     	; 0x2cba <merge_row+0x16>
    {
        // This is XOR or NAND */
        if ((mode & MODE_XOR) != 0)
    2cac:	42 ff       	sbrs	r20, 2
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <merge_row+0x10>
        {
            // MODE_XOR - XOR the existing buffer data with read data.
            new_row ^= orig_row;
    2cb0:	86 27       	eor	r24, r22
    2cb2:	08 95       	ret
        }
        else
        {
            // MODE_NAND - Clear bits according to buffer.
            new_row = ~new_row & orig_row;
    2cb4:	80 95       	com	r24
    2cb6:	86 23       	and	r24, r22
    2cb8:	08 95       	ret
        }
    }
    else
    {
        // MODE_OR - Set bits according to buffer.
        new_row |= orig_row;
    2cba:	86 2b       	or	r24, r22
    }

    // Return the merge to the caller.
    return new_row;
}
    2cbc:	08 95       	ret

00002cbe <t6963_screen_clear>:
/// @param [in] mode The mode to clear the screen
///                  0x00 MODE_REVERSE - clears with 1's
///                  0x01 MODE_NORMAL  - clears with 0's
void
t6963_screen_clear (uint8_t mode)
{
    2cbe:	1f 93       	push	r17
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    uint16_t ii;                        // Local loop counter.
    uint8_t data;                       // The data to write to screen.

    // Determine if the screen is reversed or not. In normal mode we write
    // 0x00 when reversed we write 0xff. Note: 0x00-0x01 = 0xff !!
    data = (mode & MODE_NORMAL_MASK) - 1;
    2cc4:	18 2f       	mov	r17, r24
    2cc6:	11 70       	andi	r17, 0x01	; 1
    2cc8:	11 50       	subi	r17, 0x01	; 1

    // Start from the top of memory.
    set_pointer (0,0);
    2cca:	60 e0       	ldi	r22, 0x00	; 0
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <set_pointer>

    // Clear the whole memory using auto write.
    cmd_write (CMD_DATA_AUTO_WRITE);
    2cd2:	80 eb       	ldi	r24, 0xB0	; 176
    2cd4:	98 e0       	ldi	r25, 0x08	; 8
    2cd6:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
    2cda:	c0 e0       	ldi	r28, 0x00	; 0
    2cdc:	da e0       	ldi	r29, 0x0A	; 10

    // Iterate over all of the data
    for (ii = 0; ii < (SCREEN_COLUMNS * SCREEN_HEIGHT); ii++)
        data_write (data);
    2cde:	81 2f       	mov	r24, r17
    2ce0:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>
    2ce4:	21 97       	sbiw	r28, 0x01	; 1

    // Clear the whole memory using auto write.
    cmd_write (CMD_DATA_AUTO_WRITE);

    // Iterate over all of the data
    for (ii = 0; ii < (SCREEN_COLUMNS * SCREEN_HEIGHT); ii++)
    2ce6:	20 97       	sbiw	r28, 0x00	; 0
    2ce8:	d1 f7       	brne	.-12     	; 0x2cde <t6963_screen_clear+0x20>
        data_write (data);
    cmd_write (CMD_DATA_AUTO_RESET);  // End of auto mode.
    2cea:	82 eb       	ldi	r24, 0xB2	; 178
    2cec:	93 e0       	ldi	r25, 0x03	; 3
}
    2cee:	df 91       	pop	r29
    2cf0:	cf 91       	pop	r28
    2cf2:	1f 91       	pop	r17
    cmd_write (CMD_DATA_AUTO_WRITE);

    // Iterate over all of the data
    for (ii = 0; ii < (SCREEN_COLUMNS * SCREEN_HEIGHT); ii++)
        data_write (data);
    cmd_write (CMD_DATA_AUTO_RESET);  // End of auto mode.
    2cf4:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <cmd_write>

00002cf8 <t6963_vscroll>:
/// @param [in] pixels The number of pixels to scroll where -ve is up
/// @param [in] mode The current mode.
///
void
t6963_vscroll (uint8_t *buf, int8_t pixels, uint8_t mode)
{
    2cf8:	af 92       	push	r10
    2cfa:	bf 92       	push	r11
    2cfc:	df 92       	push	r13
    2cfe:	ef 92       	push	r14
    2d00:	0f 93       	push	r16
    2d02:	1f 93       	push	r17
    2d04:	cf 93       	push	r28
    2d06:	df 93       	push	r29
    2d08:	e8 2e       	mov	r14, r24
    2d0a:	d9 2e       	mov	r13, r25
    
    // TODO: Currently we ignore pixels and simple do -8.
    
    // Determine if the screen is reversed or not. In normal mode we write
    // 0x00 when reversed we write 0xff. Note: 0x00-0x01 = 0xff !!
    mode = (mode & MODE_NORMAL_MASK) - 1;
    2d0c:	41 70       	andi	r20, 0x01	; 1
    2d0e:	41 50       	subi	r20, 0x01	; 1
    
    // Iterate over the whole screen.
    for (yy = 0; yy < SCREEN_HEIGHT; yy += 8)
    2d10:	10 e0       	ldi	r17, 0x00	; 0
        uint8_t xx;
        
        // If we are at the last line then fill with the background colour 
        if (yy == (SCREEN_HEIGHT - 8))
        {
            memset (buf, mode, SCREEN_WIDTH);
    2d12:	a4 2e       	mov	r10, r20
    2d14:	b1 2c       	mov	r11, r1
    for (yy = 0; yy < SCREEN_HEIGHT; yy += 8)
    {
        uint8_t xx;
        
        // If we are at the last line then fill with the background colour 
        if (yy == (SCREEN_HEIGHT - 8))
    2d16:	18 37       	cpi	r17, 0x78	; 120
    2d18:	41 f4       	brne	.+16     	; 0x2d2a <t6963_vscroll+0x32>
        {
            memset (buf, mode, SCREEN_WIDTH);
    2d1a:	40 ea       	ldi	r20, 0xA0	; 160
    2d1c:	50 e0       	ldi	r21, 0x00	; 0
    2d1e:	b5 01       	movw	r22, r10
    2d20:	8e 2d       	mov	r24, r14
    2d22:	9d 2d       	mov	r25, r13
    2d24:	0e 94 c3 1b 	call	0x3786	; 0x3786 <memset>
    2d28:	15 c0       	rjmp	.+42     	; 0x2d54 <t6963_vscroll+0x5c>
    2d2a:	68 e0       	ldi	r22, 0x08	; 8
    2d2c:	61 0f       	add	r22, r17
        }
        else
        {
            // Reset our position to the start of the row.
            set_pointer (0, yy + 8);
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <set_pointer>

            // Read in the existing lines.
            
            // Iterate over a block of data
            cmd_write (CMD_DATA_AUTO_READ);
    2d34:	81 eb       	ldi	r24, 0xB1	; 177
    2d36:	94 e0       	ldi	r25, 0x04	; 4
    2d38:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
    2d3c:	ce 2d       	mov	r28, r14
    2d3e:	dd 2d       	mov	r29, r13
    2d40:	00 ea       	ldi	r16, 0xA0	; 160
            for (xx = 0; xx < SCREEN_WIDTH; xx++)
                buf[xx] = data_read ();
    2d42:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <data_read>
    2d46:	89 93       	st	Y+, r24
    2d48:	01 50       	subi	r16, 0x01	; 1

            // Read in the existing lines.
            
            // Iterate over a block of data
            cmd_write (CMD_DATA_AUTO_READ);
            for (xx = 0; xx < SCREEN_WIDTH; xx++)
    2d4a:	d9 f7       	brne	.-10     	; 0x2d42 <t6963_vscroll+0x4a>
                buf[xx] = data_read ();
            cmd_write (CMD_DATA_AUTO_RESET);  // End of auto mode.
    2d4c:	82 eb       	ldi	r24, 0xB2	; 178
    2d4e:	93 e0       	ldi	r25, 0x03	; 3
    2d50:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
        }
        
        // Reset our position to the start of the row.
        set_pointer (0, yy);
    2d54:	61 2f       	mov	r22, r17
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <set_pointer>

        // Write the reversed lines.
        cmd_write (CMD_DATA_AUTO_WRITE);
    2d5c:	80 eb       	ldi	r24, 0xB0	; 176
    2d5e:	98 e0       	ldi	r25, 0x08	; 8
    2d60:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
    2d64:	ce 2d       	mov	r28, r14
    2d66:	dd 2d       	mov	r29, r13
    2d68:	00 ea       	ldi	r16, 0xA0	; 160
        for (xx = 0; xx < SCREEN_WIDTH; xx++)
            data_write (buf[xx]);
    2d6a:	89 91       	ld	r24, Y+
    2d6c:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>
    2d70:	01 50       	subi	r16, 0x01	; 1
        // Reset our position to the start of the row.
        set_pointer (0, yy);

        // Write the reversed lines.
        cmd_write (CMD_DATA_AUTO_WRITE);
        for (xx = 0; xx < SCREEN_WIDTH; xx++)
    2d72:	d9 f7       	brne	.-10     	; 0x2d6a <t6963_vscroll+0x72>
            data_write (buf[xx]);
        cmd_write (CMD_DATA_AUTO_RESET); // End of auto mode.
    2d74:	82 eb       	ldi	r24, 0xB2	; 178
    2d76:	93 e0       	ldi	r25, 0x03	; 3
    2d78:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
    // Determine if the screen is reversed or not. In normal mode we write
    // 0x00 when reversed we write 0xff. Note: 0x00-0x01 = 0xff !!
    mode = (mode & MODE_NORMAL_MASK) - 1;
    
    // Iterate over the whole screen.
    for (yy = 0; yy < SCREEN_HEIGHT; yy += 8)
    2d7c:	18 5f       	subi	r17, 0xF8	; 248
    2d7e:	10 38       	cpi	r17, 0x80	; 128
    2d80:	51 f6       	brne	.-108    	; 0x2d16 <t6963_vscroll+0x1e>
        cmd_write (CMD_DATA_AUTO_WRITE);
        for (xx = 0; xx < SCREEN_WIDTH; xx++)
            data_write (buf[xx]);
        cmd_write (CMD_DATA_AUTO_RESET); // End of auto mode.
    }
}
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	1f 91       	pop	r17
    2d88:	0f 91       	pop	r16
    2d8a:	ef 90       	pop	r14
    2d8c:	df 90       	pop	r13
    2d8e:	bf 90       	pop	r11
    2d90:	af 90       	pop	r10
    2d92:	08 95       	ret

00002d94 <t6963_screen_reverse>:
///
/// @param [in] buffer A buffer to use for 8 lines of screen data.
///
void
t6963_screen_reverse (uint8_t *buf)
{
    2d94:	ef 92       	push	r14
    2d96:	ff 92       	push	r15
    2d98:	0f 93       	push	r16
    2d9a:	1f 93       	push	r17
    2d9c:	cf 93       	push	r28
    2d9e:	df 93       	push	r29
    2da0:	f8 2e       	mov	r15, r24
    2da2:	e9 2e       	mov	r14, r25
    2da4:	10 e0       	ldi	r17, 0x00	; 0
    for (yy = 0; yy < SCREEN_HEIGHT; yy += 8)
    {
        uint8_t xx;

        // Reset our position to the start of the row.
        set_pointer (0, yy);
    2da6:	61 2f       	mov	r22, r17
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <set_pointer>

        // Read in the existing lines.

        // Iterate over a block of data
        cmd_write (CMD_DATA_AUTO_READ);
    2dae:	81 eb       	ldi	r24, 0xB1	; 177
    2db0:	94 e0       	ldi	r25, 0x04	; 4
    2db2:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
    2db6:	cf 2d       	mov	r28, r15
    2db8:	de 2d       	mov	r29, r14
    2dba:	00 ea       	ldi	r16, 0xA0	; 160
        for (xx = 0; xx < SCREEN_WIDTH; xx++)
            buf[xx] = data_read ();
    2dbc:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <data_read>
    2dc0:	89 93       	st	Y+, r24
    2dc2:	01 50       	subi	r16, 0x01	; 1

        // Read in the existing lines.

        // Iterate over a block of data
        cmd_write (CMD_DATA_AUTO_READ);
        for (xx = 0; xx < SCREEN_WIDTH; xx++)
    2dc4:	d9 f7       	brne	.-10     	; 0x2dbc <t6963_screen_reverse+0x28>
            buf[xx] = data_read ();
        cmd_write (CMD_DATA_AUTO_RESET);  // End of auto mode.
    2dc6:	82 eb       	ldi	r24, 0xB2	; 178
    2dc8:	93 e0       	ldi	r25, 0x03	; 3
    2dca:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>

        // Reset our position to the start of the row.
        set_pointer (0, yy);
    2dce:	61 2f       	mov	r22, r17
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <set_pointer>

        // Write the reversed lines.
        cmd_write (CMD_DATA_AUTO_WRITE);
    2dd6:	80 eb       	ldi	r24, 0xB0	; 176
    2dd8:	98 e0       	ldi	r25, 0x08	; 8
    2dda:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
    2dde:	cf 2d       	mov	r28, r15
    2de0:	de 2d       	mov	r29, r14
    2de2:	00 ea       	ldi	r16, 0xA0	; 160
        for (xx = 0; xx < SCREEN_WIDTH; xx++)
            data_write (~buf[xx]);
    2de4:	89 91       	ld	r24, Y+
    2de6:	80 95       	com	r24
    2de8:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>
    2dec:	01 50       	subi	r16, 0x01	; 1
        // Reset our position to the start of the row.
        set_pointer (0, yy);

        // Write the reversed lines.
        cmd_write (CMD_DATA_AUTO_WRITE);
        for (xx = 0; xx < SCREEN_WIDTH; xx++)
    2dee:	d1 f7       	brne	.-12     	; 0x2de4 <t6963_screen_reverse+0x50>
            data_write (~buf[xx]);
        cmd_write (CMD_DATA_AUTO_RESET); // End of auto mode.
    2df0:	82 eb       	ldi	r24, 0xB2	; 178
    2df2:	93 e0       	ldi	r25, 0x03	; 3
    2df4:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
    2df8:	18 5f       	subi	r17, 0xF8	; 248
t6963_screen_reverse (uint8_t *buf)
{
    uint16_t yy;                        // Local loop counter.

    // Iterate over the whole screen.
    for (yy = 0; yy < SCREEN_HEIGHT; yy += 8)
    2dfa:	10 38       	cpi	r17, 0x80	; 128
    2dfc:	a1 f6       	brne	.-88     	; 0x2da6 <t6963_screen_reverse+0x12>
        cmd_write (CMD_DATA_AUTO_WRITE);
        for (xx = 0; xx < SCREEN_WIDTH; xx++)
            data_write (~buf[xx]);
        cmd_write (CMD_DATA_AUTO_RESET); // End of auto mode.
    }
}
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	1f 91       	pop	r17
    2e04:	0f 91       	pop	r16
    2e06:	ff 90       	pop	r15
    2e08:	ef 90       	pop	r14
    2e0a:	08 95       	ret

00002e0c <t6963_init>:
///
void
t6963_init (void)
{
    // Port C is the control
    PORTC = ((1<<WR) | (1<<RD) | (1<<CE) | (1<<CD) | (1<<HALT) | (1<<RST));
    2e0c:	8f e3       	ldi	r24, 0x3F	; 63
    2e0e:	88 b9       	out	0x08, r24	; 8
    DDRC =  ((1<<WR) | (1<<RD) | (1<<CE) | (1<<CD) | (1<<HALT) | (1<<RST));
    2e10:	87 b9       	out	0x07, r24	; 7

    // Set up the screen size.
    x_dim = SCREEN_WIDTH;
    2e12:	80 ea       	ldi	r24, 0xA0	; 160
    2e14:	80 93 02 03 	sts	0x0302, r24
    y_dim = SCREEN_HEIGHT;
    2e18:	80 e8       	ldi	r24, 0x80	; 128
    2e1a:	80 93 f1 02 	sts	0x02F1, r24

    // The first part of display initialization is to set the start location
    // of the graphics in memory. We'll set it to 0x0000.

    // Write the low byte of the graphics home address.
    data_write (0x00);
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>
    // Write the high byte of the graphics home address.
    data_write (0x00);
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>
    // "Write graphics home address" command.
    cmd_write (CMD_SET_GRAPIC_HOME_ADDR);
    2e2a:	82 e4       	ldi	r24, 0x42	; 66
    2e2c:	93 e0       	ldi	r25, 0x03	; 3
    2e2e:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
    // line before the line wraps to the next one. Note that it does not have
    // to equal the actual number of pixels in the display- just equal to or
    // greater than.

    // Number of bytes per line (160 pixels/8 bits per byte)
    data_write (SCREEN_COLUMNS);
    2e32:	84 e1       	ldi	r24, 0x14	; 20
    2e34:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>
    // Always zero.
    data_write (0);
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>
    // "Write graphics area" command.
    cmd_write (CMD_SET_GRAPHIC_AREA);
    2e3e:	83 e4       	ldi	r24, 0x43	; 67
    2e40:	93 e0       	ldi	r25, 0x03	; 3
    2e42:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
    //          1   = RAM character generation
    //  MD2-0 - 000 = OR mode
    //          001 = XOR mode
    //          010 = AND mode
    //          100 = TEXT ATTRIBUTE mode
    cmd_write (CMD_MODE_SET);
    2e46:	80 e8       	ldi	r24, 0x80	; 128
    2e48:	93 e0       	ldi	r25, 0x03	; 3
    2e4a:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
    //     1  0  0  1  GRPH  TEXT  CUR  BLK
    //  GRPH - 1/0 graphics on/off
    //  TEXT - 1/0 text display on/off
    //  CUR  - 1/0 text cursor displayed/not displayed
    //  BLK  - 1/0 text cursory blink on/off
   cmd_write (CMD_DISPLAY_GRAPHIC);
    2e4e:	88 e9       	ldi	r24, 0x98	; 152
    2e50:	93 e0       	ldi	r25, 0x03	; 3
    2e52:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <cmd_write>

00002e56 <t6963_read_row>:
///                    Merge - XOR bits set in buffer
///                    buffer[x] = buffer[x] ^ read_data
///
void
t6963_read_row (uint8_t x_column, uint8_t y, uint16_t length, uint8_t *buf, uint8_t mode)
{
    2e56:	df 92       	push	r13
    2e58:	ef 92       	push	r14
    2e5a:	ff 92       	push	r15
    2e5c:	0f 93       	push	r16
    2e5e:	1f 93       	push	r17
    2e60:	cf 93       	push	r28
    2e62:	df 93       	push	r29
    2e64:	7a 01       	movw	r14, r20
    2e66:	e9 01       	movw	r28, r18
    uint8_t data;

    // This sets our pointer to the location containing
    set_column_pointer (x_column, y);
    2e68:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <set_column_pointer>

    // Use a different command depending on how many bytes are being read.
    // For a length of 1 then simply perform a single read command. If the
    // length is >= 2 then it is quicker to perform an auto read function.
    if (length == 1)
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	e8 16       	cp	r14, r24
    2e70:	f1 04       	cpc	r15, r1
    2e72:	c9 f4       	brne	.+50     	; 0x2ea6 <t6963_read_row+0x50>
    {
        cmd_write (CMD_DATA_READ);      // A non-incrementing read.
    2e74:	85 ec       	ldi	r24, 0xC5	; 197
    2e76:	93 e0       	ldi	r25, 0x03	; 3
    2e78:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
        data = data_read();             // Get the data from controller
    2e7c:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <data_read>

        // Apply any reverse setting.
        if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    2e80:	00 ff       	sbrs	r16, 0
            data = ~data;
    2e82:	80 95       	com	r24

        // Handle any buffer merging on the read.
        if ((mode & MODE_MODIFIER) != 0)
    2e84:	90 2f       	mov	r25, r16
    2e86:	96 71       	andi	r25, 0x16	; 22
    2e88:	29 f0       	breq	.+10     	; 0x2e94 <t6963_read_row+0x3e>
            data = merge_row (*buf, data, mode);
    2e8a:	40 2f       	mov	r20, r16
    2e8c:	68 2f       	mov	r22, r24
    2e8e:	88 81       	ld	r24, Y
    2e90:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <merge_row>

        // Assign the data to the buffer.
        *buf = data;
    2e94:	88 83       	st	Y, r24
            buf[ii] = data;
        }
        // End of auto mode
        cmd_write (CMD_DATA_AUTO_RESET);
    }
}
    2e96:	df 91       	pop	r29
    2e98:	cf 91       	pop	r28
    2e9a:	1f 91       	pop	r17
    2e9c:	0f 91       	pop	r16
    2e9e:	ff 90       	pop	r15
    2ea0:	ef 90       	pop	r14
    2ea2:	df 90       	pop	r13
    2ea4:	08 95       	ret
    else
    {
        int ii;

        // Perform an auto read to collect the data.
        cmd_write (CMD_DATA_AUTO_READ);
    2ea6:	81 eb       	ldi	r24, 0xB1	; 177
    2ea8:	94 e0       	ldi	r25, 0x04	; 4
    2eaa:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
    2eae:	ec 0e       	add	r14, r28
    2eb0:	fd 1e       	adc	r15, r29
        for (ii = 0; ii < length; ii++)
        {
            data = data_read();         // Pick up the data

            // Reverse the data if required.
            if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    2eb2:	10 2f       	mov	r17, r16
    2eb4:	11 70       	andi	r17, 0x01	; 1
                data = ~data;
            
            // Handle any buffer merging on the read.
            if ((mode & MODE_MODIFIER) != 0)
    2eb6:	80 2f       	mov	r24, r16
    2eb8:	86 71       	andi	r24, 0x16	; 22
    2eba:	d8 2e       	mov	r13, r24

        // Perform an auto read to collect the data.
        cmd_write (CMD_DATA_AUTO_READ);

        // Iterate over all of the data
        for (ii = 0; ii < length; ii++)
    2ebc:	ce 15       	cp	r28, r14
    2ebe:	df 05       	cpc	r29, r15
    2ec0:	71 f0       	breq	.+28     	; 0x2ede <t6963_read_row+0x88>
        {
            data = data_read();         // Pick up the data
    2ec2:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <data_read>

            // Reverse the data if required.
            if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    2ec6:	11 11       	cpse	r17, r1
    2ec8:	01 c0       	rjmp	.+2      	; 0x2ecc <t6963_read_row+0x76>
                data = ~data;
    2eca:	80 95       	com	r24
            
            // Handle any buffer merging on the read.
            if ((mode & MODE_MODIFIER) != 0)
    2ecc:	dd 20       	and	r13, r13
    2ece:	29 f0       	breq	.+10     	; 0x2eda <t6963_read_row+0x84>
                data = merge_row (buf[ii], data, mode);
    2ed0:	40 2f       	mov	r20, r16
    2ed2:	68 2f       	mov	r22, r24
    2ed4:	88 81       	ld	r24, Y
    2ed6:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <merge_row>

            // Assign the data to the buffer.
            buf[ii] = data;
    2eda:	89 93       	st	Y+, r24
    2edc:	ef cf       	rjmp	.-34     	; 0x2ebc <t6963_read_row+0x66>
        }
        // End of auto mode
        cmd_write (CMD_DATA_AUTO_RESET);
    2ede:	82 eb       	ldi	r24, 0xB2	; 178
    2ee0:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    2ee2:	df 91       	pop	r29
    2ee4:	cf 91       	pop	r28
    2ee6:	1f 91       	pop	r17
    2ee8:	0f 91       	pop	r16
    2eea:	ff 90       	pop	r15
    2eec:	ef 90       	pop	r14
    2eee:	df 90       	pop	r13

            // Assign the data to the buffer.
            buf[ii] = data;
        }
        // End of auto mode
        cmd_write (CMD_DATA_AUTO_RESET);
    2ef0:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <cmd_write>

00002ef4 <t6963_write_row>:
/// @param [in] length The number of columns to read.
/// @param [in] buf Location to write from.
///
void
t6963_write_row (uint8_t x_column, uint8_t y, uint16_t length, uint8_t *buf, uint8_t mode)
{
    2ef4:	ef 92       	push	r14
    2ef6:	ff 92       	push	r15
    2ef8:	0f 93       	push	r16
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	7a 01       	movw	r14, r20
    2f00:	e9 01       	movw	r28, r18
    // This sets our pointer to the location containing
    set_column_pointer (x_column, y);
    2f02:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <set_column_pointer>

    // Use a different command depending on how many bytes are being written.
    // For a length of 1 then simply perform a single write command. If the
    // length is >= 2 then it is quicker to perform an auto write function.
    if (length == 1)
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	e8 16       	cp	r14, r24
    2f0a:	f1 04       	cpc	r15, r1
    2f0c:	31 f4       	brne	.+12     	; 0x2f1a <t6963_write_row+0x26>
    {
        // Write the data first and then send the command.
        data_write (*buf);              // Send data to controller
    2f0e:	88 81       	ld	r24, Y
    2f10:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>
        cmd_write (CMD_DATA_WRITE);     // A non-incrementing write.
    2f14:	84 ec       	ldi	r24, 0xC4	; 196
    2f16:	93 e0       	ldi	r25, 0x03	; 3
    2f18:	13 c0       	rjmp	.+38     	; 0x2f40 <t6963_write_row+0x4c>
    else
    {
        int ii;

        // Perform an auto read to collect the data.
        cmd_write (CMD_DATA_AUTO_WRITE);
    2f1a:	80 eb       	ldi	r24, 0xB0	; 176
    2f1c:	98 e0       	ldi	r25, 0x08	; 8
    2f1e:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
    2f22:	ec 0e       	add	r14, r28
    2f24:	fd 1e       	adc	r15, r29
        for (ii = 0; ii < length; ii++)
        {
            uint8_t data = *buf++;

            // Perform a reverse if required.
            if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    2f26:	01 70       	andi	r16, 0x01	; 1

        // Perform an auto read to collect the data.
        cmd_write (CMD_DATA_AUTO_WRITE);

        // Iterate over all of the data
        for (ii = 0; ii < length; ii++)
    2f28:	ce 15       	cp	r28, r14
    2f2a:	df 05       	cpc	r29, r15
    2f2c:	39 f0       	breq	.+14     	; 0x2f3c <t6963_write_row+0x48>
        {
            uint8_t data = *buf++;
    2f2e:	89 91       	ld	r24, Y+

            // Perform a reverse if required.
            if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    2f30:	01 11       	cpse	r16, r1
    2f32:	01 c0       	rjmp	.+2      	; 0x2f36 <t6963_write_row+0x42>
                data = ~data;
    2f34:	80 95       	com	r24

            // Write the data.
            data_write (data);
    2f36:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>
    2f3a:	f6 cf       	rjmp	.-20     	; 0x2f28 <t6963_write_row+0x34>
        }

        // End of auto mode
        cmd_write (CMD_DATA_AUTO_RESET);
    2f3c:	82 eb       	ldi	r24, 0xB2	; 178
    2f3e:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    2f40:	df 91       	pop	r29
    2f42:	cf 91       	pop	r28
    2f44:	0f 91       	pop	r16
    2f46:	ff 90       	pop	r15
    2f48:	ef 90       	pop	r14
            // Write the data.
            data_write (data);
        }

        // End of auto mode
        cmd_write (CMD_DATA_AUTO_RESET);
    2f4a:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <cmd_write>

00002f4e <t6963_rewrite_row>:
///                    Merge - XOR bits set in buffer
///                    buffer[x] = buffer[x] ^ read_data
///
void
t6963_rewrite_row (uint8_t x_column, uint8_t y, uint16_t length, uint8_t *buf, uint8_t mode)
{
    2f4e:	bf 92       	push	r11
    2f50:	cf 92       	push	r12
    2f52:	df 92       	push	r13
    2f54:	ef 92       	push	r14
    2f56:	ff 92       	push	r15
    2f58:	0f 93       	push	r16
    2f5a:	1f 93       	push	r17
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	d8 2e       	mov	r13, r24
    2f62:	c6 2e       	mov	r12, r22
    2f64:	7a 01       	movw	r14, r20
    2f66:	e9 01       	movw	r28, r18
    2f68:	10 2f       	mov	r17, r16
    2f6a:	80 2f       	mov	r24, r16
    2f6c:	86 71       	andi	r24, 0x16	; 22
    2f6e:	b8 2e       	mov	r11, r24
    // Use a different command depending on how many bytes are being read.
    // For a length of 1 then simply perform a single read command. If the
    // length is >= 2 then it is quicker to perform an auto read function.
    if (length == 1)
    2f70:	41 30       	cpi	r20, 0x01	; 1
    2f72:	51 05       	cpc	r21, r1
    2f74:	41 f5       	brne	.+80     	; 0x2fc6 <t6963_rewrite_row+0x78>
    {
        uint8_t data;

        // This sets our pointer to the location containing
        set_column_pointer (x_column, y);
    2f76:	8d 2d       	mov	r24, r13
    2f78:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <set_column_pointer>
    2f7c:	01 70       	andi	r16, 0x01	; 1

        if ((mode & MODE_MODIFIER) != 0)
    2f7e:	bb 20       	and	r11, r11
    2f80:	79 f0       	breq	.+30     	; 0x2fa0 <t6963_rewrite_row+0x52>
        {
            cmd_write (CMD_DATA_READ);      // A non-incrementing read.
    2f82:	85 ec       	ldi	r24, 0xC5	; 197
    2f84:	93 e0       	ldi	r25, 0x03	; 3
    2f86:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
            data = data_read();             // Get the data from controller
    2f8a:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <data_read>

            // Apply any reverse setting
            if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    2f8e:	01 11       	cpse	r16, r1
    2f90:	01 c0       	rjmp	.+2      	; 0x2f94 <t6963_rewrite_row+0x46>
                data = ~data;
    2f92:	80 95       	com	r24

            // Handle any buffer merging on the read.
            data = merge_row (*buf, data, mode);
    2f94:	41 2f       	mov	r20, r17
    2f96:	68 2f       	mov	r22, r24
    2f98:	88 81       	ld	r24, Y
    2f9a:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <merge_row>
    2f9e:	01 c0       	rjmp	.+2      	; 0x2fa2 <t6963_rewrite_row+0x54>
        }
        else
            data = *buf;
    2fa0:	88 81       	ld	r24, Y

        if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    2fa2:	01 11       	cpse	r16, r1
    2fa4:	01 c0       	rjmp	.+2      	; 0x2fa8 <t6963_rewrite_row+0x5a>
            data = ~data;
    2fa6:	80 95       	com	r24

        // Write the data first and then send the command.
        data_write (data);              // Send data to controller
    2fa8:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>
        cmd_write (CMD_DATA_WRITE);     // A non-incrementing write.
    2fac:	84 ec       	ldi	r24, 0xC4	; 196
    2fae:	93 e0       	ldi	r25, 0x03	; 3
        }

        // Write the merged data.
        t6963_write_row (x_column, y, length, buf, mode);
    }
}
    2fb0:	df 91       	pop	r29
    2fb2:	cf 91       	pop	r28
    2fb4:	1f 91       	pop	r17
    2fb6:	0f 91       	pop	r16
    2fb8:	ff 90       	pop	r15
    2fba:	ef 90       	pop	r14
    2fbc:	df 90       	pop	r13
    2fbe:	cf 90       	pop	r12
    2fc0:	bf 90       	pop	r11
        if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
            data = ~data;

        // Write the data first and then send the command.
        data_write (data);              // Send data to controller
        cmd_write (CMD_DATA_WRITE);     // A non-incrementing write.
    2fc2:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <cmd_write>
    }
    else
    {
        // Simply do a read_row() followed by write_row(). Only perform the
        // read if there is a data merge operation.
        if ((mode & MODE_MODIFIER) != 0)
    2fc6:	bb 20       	and	r11, r11
    2fc8:	19 f0       	breq	.+6      	; 0x2fd0 <t6963_rewrite_row+0x82>
        {
            // Read for the merge.
            t6963_read_row (x_column, y, length, buf, mode);
    2fca:	8d 2d       	mov	r24, r13
    2fcc:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <t6963_read_row>
        }

        // Write the merged data.
        t6963_write_row (x_column, y, length, buf, mode);
    2fd0:	01 2f       	mov	r16, r17
    2fd2:	9e 01       	movw	r18, r28
    2fd4:	a7 01       	movw	r20, r14
    2fd6:	6c 2d       	mov	r22, r12
    2fd8:	8d 2d       	mov	r24, r13
    2fda:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <t6963_write_row>
    }
}
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	ff 90       	pop	r15
    2fe8:	ef 90       	pop	r14
    2fea:	df 90       	pop	r13
    2fec:	cf 90       	pop	r12
    2fee:	bf 90       	pop	r11
    2ff0:	08 95       	ret

00002ff2 <t6963_set_row>:
///                    Merge required - NAND bits cleared in buffer
///                    buffer[x] = ~buffer[x] & read_data
///
void
t6963_set_row (uint8_t x_column, uint8_t y, uint8_t data, uint8_t mask, uint8_t mode)
{
    2ff2:	ff 92       	push	r15
    2ff4:	0f 93       	push	r16
    2ff6:	1f 93       	push	r17
    2ff8:	cf 93       	push	r28
    2ffa:	df 93       	push	r29
    2ffc:	c4 2f       	mov	r28, r20
    2ffe:	12 2f       	mov	r17, r18
    // This sets our pointer to the location containing
    set_column_pointer (x_column, y);
    3000:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <set_column_pointer>
    
    // Handle any buffer merging on the read.
    if ((mode & MODE_MODIFIER) != 0)
    3004:	80 2f       	mov	r24, r16
    3006:	86 71       	andi	r24, 0x16	; 22
    3008:	90 2f       	mov	r25, r16
    300a:	91 70       	andi	r25, 0x01	; 1
    300c:	f9 2e       	mov	r15, r25
    300e:	88 23       	and	r24, r24
    3010:	c1 f0       	breq	.+48     	; 0x3042 <t6963_set_row+0x50>
    {
        uint8_t screen_data;

        // We need to perform a merge
        cmd_write (CMD_DATA_READ);  // A non-incrementing read.
    3012:	85 ec       	ldi	r24, 0xC5	; 197
    3014:	93 e0       	ldi	r25, 0x03	; 3
    3016:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <cmd_write>
        screen_data = data_read();  // Get the data from controller
    301a:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <data_read>
    301e:	d8 2f       	mov	r29, r24

        // Apply any reverse setting; if the reverse bit is set then we
        // negate the data
        if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    3020:	f1 10       	cpse	r15, r1
    3022:	01 c0       	rjmp	.+2      	; 0x3026 <t6963_set_row+0x34>
            screen_data = ~screen_data;
    3024:	d0 95       	com	r29

        // Perform the merge
        if ((mode & MODE_OP_MASK) != 0)
    3026:	80 2f       	mov	r24, r16
    3028:	86 70       	andi	r24, 0x06	; 6
    302a:	31 f0       	breq	.+12     	; 0x3038 <t6963_set_row+0x46>
            data = merge_row (data, screen_data, mode);
    302c:	40 2f       	mov	r20, r16
    302e:	6d 2f       	mov	r22, r29
    3030:	8c 2f       	mov	r24, r28
    3032:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <merge_row>
    3036:	c8 2f       	mov	r28, r24
        
        // MODE_MERGE - Merge in the data in a copy mode
        data = (data & mask) | (screen_data & ~mask);
    3038:	c1 23       	and	r28, r17
    303a:	21 2f       	mov	r18, r17
    303c:	20 95       	com	r18
    303e:	2d 23       	and	r18, r29
    3040:	c2 2b       	or	r28, r18
    }

    // Apply any reverse setting; if the reverse bit is set then we
    // negate the data
    if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
    3042:	f1 10       	cpse	r15, r1
    3044:	01 c0       	rjmp	.+2      	; 0x3048 <t6963_set_row+0x56>
        data = ~data;
    3046:	c0 95       	com	r28

    // Write the data first and then send the command.
    data_write (data);                  // Send data to controller
    3048:	8c 2f       	mov	r24, r28
    304a:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <data_write>
    cmd_write (CMD_DATA_WRITE);
    304e:	84 ec       	ldi	r24, 0xC4	; 196
    3050:	93 e0       	ldi	r25, 0x03	; 3
}
    3052:	df 91       	pop	r29
    3054:	cf 91       	pop	r28
    3056:	1f 91       	pop	r17
    3058:	0f 91       	pop	r16
    305a:	ff 90       	pop	r15
    if ((mode & MODE_NORMAL_MASK) == MODE_REVERSE)
        data = ~data;

    // Write the data first and then send the command.
    data_write (data);                  // Send data to controller
    cmd_write (CMD_DATA_WRITE);
    305c:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <cmd_write>

00003060 <t6963_set_pixel>:
///                    Merge - XOR bits set in buffer
///                    buffer[x] = buffer[x] ^ read_data
///
void
t6963_set_pixel (uint8_t x, uint8_t y, uint8_t mode)
{
    3060:	0f 93       	push	r16
    3062:	cf 93       	push	r28
    3064:	df 93       	push	r29
    3066:	04 2f       	mov	r16, r20
    uint8_t xbit = x & 7;               // The sub-column
    3068:	c8 2f       	mov	r28, r24
    306a:	c7 70       	andi	r28, 0x07	; 7
    
    // NOTE: There are savings to be made here as we probably do not always
    // need to set the address as we can write 8-pixels with 1 address set.

    // If this is a copy over then simply
    if ((mode & MODE_OP_MASK) == 0)
    306c:	94 2f       	mov	r25, r20
    306e:	96 70       	andi	r25, 0x06	; 6
    3070:	d0 e0       	ldi	r29, 0x00	; 0
    3072:	a1 f4       	brne	.+40     	; 0x309c <t6963_set_pixel+0x3c>
        uint16_t data;

        // This is a straight forward copy over operation.

        // Step one: select the byte in question.
        set_pointer(x, y);
    3074:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <set_pointer>

        data = CMD_BIT_SET_RESET;       // Bitset command.

        // Apply any reverse setting
        if ((mode & MODE_NORMAL_MASK) != MODE_REVERSE)
    3078:	00 ff       	sbrs	r16, 0
    307a:	03 c0       	rjmp	.+6      	; 0x3082 <t6963_set_pixel+0x22>
            data |= 0x08;
    307c:	28 ef       	ldi	r18, 0xF8	; 248
    307e:	33 e0       	ldi	r19, 0x03	; 3
    3080:	02 c0       	rjmp	.+4      	; 0x3086 <t6963_set_pixel+0x26>
        // This is a straight forward copy over operation.

        // Step one: select the byte in question.
        set_pointer(x, y);

        data = CMD_BIT_SET_RESET;       // Bitset command.
    3082:	20 ef       	ldi	r18, 0xF0	; 240
    3084:	33 e0       	ldi	r19, 0x03	; 3
        // Apply any reverse setting
        if ((mode & MODE_NORMAL_MASK) != MODE_REVERSE)
            data |= 0x08;

        // Figure out which bit we're interested in setting/clearing
        data |= 7 - xbit;              // Add the bit index into byte
    3086:	87 e0       	ldi	r24, 0x07	; 7
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	8c 1b       	sub	r24, r28
    308c:	9d 0b       	sbc	r25, r29

        cmd_write(data);                // Send the command.
    308e:	82 2b       	or	r24, r18
    3090:	93 2b       	or	r25, r19
        // Pass the mode in the call
        t6963_set_row (x >> 3, y, 0xff, 
                       pgm_read_byte(&bit_shift_rev_single_maskP [xbit]), 
                       mode | MODE_MERGE);
    }
}
    3092:	df 91       	pop	r29
    3094:	cf 91       	pop	r28
    3096:	0f 91       	pop	r16
            data |= 0x08;

        // Figure out which bit we're interested in setting/clearing
        data |= 7 - xbit;              // Add the bit index into byte

        cmd_write(data);                // Send the command.
    3098:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <cmd_write>
        //
        // Convert x to a column value
        // Set data to pixel to write by bit shifting 0 to the top bit.
        // Pass the mode in the call
        t6963_set_row (x >> 3, y, 0xff, 
                       pgm_read_byte(&bit_shift_rev_single_maskP [xbit]), 
    309c:	fe 01       	movw	r30, r28
    309e:	e8 59       	subi	r30, 0x98	; 152
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	24 91       	lpm	r18, Z
        // pixel to the right value.
        //
        // Convert x to a column value
        // Set data to pixel to write by bit shifting 0 to the top bit.
        // Pass the mode in the call
        t6963_set_row (x >> 3, y, 0xff, 
    30a4:	00 61       	ori	r16, 0x10	; 16
    30a6:	4f ef       	ldi	r20, 0xFF	; 255
    30a8:	86 95       	lsr	r24
    30aa:	86 95       	lsr	r24
    30ac:	86 95       	lsr	r24
    30ae:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <t6963_set_row>
                       pgm_read_byte(&bit_shift_rev_single_maskP [xbit]), 
                       mode | MODE_MERGE);
    }
}
    30b2:	df 91       	pop	r29
    30b4:	cf 91       	pop	r28
    30b6:	0f 91       	pop	r16
    30b8:	08 95       	ret

000030ba <t6963_vbitblt>:
///
///             0x10 - MODE_FILL
///                    Interpret the data as a mask and fill.
void
t6963_vbitblt (uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t mode, uint8_t *data)
{
    30ba:	2f 92       	push	r2
    30bc:	3f 92       	push	r3
    30be:	4f 92       	push	r4
    30c0:	5f 92       	push	r5
    30c2:	6f 92       	push	r6
    30c4:	7f 92       	push	r7
    30c6:	8f 92       	push	r8
    30c8:	9f 92       	push	r9
    30ca:	af 92       	push	r10
    30cc:	bf 92       	push	r11
    30ce:	cf 92       	push	r12
    30d0:	df 92       	push	r13
    30d2:	ef 92       	push	r14
    30d4:	ff 92       	push	r15
    30d6:	0f 93       	push	r16
    30d8:	1f 93       	push	r17
    30da:	cf 93       	push	r28
    30dc:	df 93       	push	r29
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	a7 97       	sbiw	r28, 0x27	; 39
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	16 2f       	mov	r17, r22
    30f0:	4d 8f       	std	Y+29, r20	; 0x1d
    30f2:	2e 8f       	std	Y+30, r18	; 0x1e
    30f4:	09 8f       	std	Y+25, r16	; 0x19
    30f6:	57 01       	movw	r10, r14
    uint8_t row;                        // The current row being processed.
    uint8_t col;                        // The current column being processed.
    uint8_t row_inc;                    // The row increment

    // Calculate the left margin and left aligned length
    left_margin = (x & 7);              // The left margin
    30f8:	98 2f       	mov	r25, r24
    30fa:	97 70       	andi	r25, 0x07	; 7
    30fc:	9e 8b       	std	Y+22, r25	; 0x16
    length = left_margin + width;       // Length of the left block aligned
    30fe:	94 0f       	add	r25, r20
    3100:	9d 8b       	std	Y+21, r25	; 0x15

    // Compute the row increment based on the length of the image
    row_inc = (length + 7) >> 3;
    3102:	29 2e       	mov	r2, r25
    3104:	31 2c       	mov	r3, r1
    3106:	21 01       	movw	r4, r2
    3108:	e7 e0       	ldi	r30, 0x07	; 7
    310a:	4e 0e       	add	r4, r30
    310c:	51 1c       	adc	r5, r1
    310e:	23 e0       	ldi	r18, 0x03	; 3
    3110:	55 94       	asr	r5
    3112:	47 94       	ror	r4
    3114:	2a 95       	dec	r18
    3116:	e1 f7       	brne	.-8      	; 0x3110 <t6963_vbitblt+0x56>

    // The margin to the right
    right_remain = length & 7;          // Remaining bits on line
    3118:	97 70       	andi	r25, 0x07	; 7
    311a:	9f 8f       	std	Y+31, r25	; 0x1f
{
    uint8_t ii;                         // Local iterator

    // See if there is a left merge.
    ii = x & 7;                         // Get the shift on the left
    x >>= 3;                            // Convert to column address
    311c:	98 2e       	mov	r9, r24
    311e:	96 94       	lsr	r9
    3120:	96 94       	lsr	r9
    3122:	96 94       	lsr	r9
        }

        // More than 1 block, compute the new length
        width -= 8;
        // This is a partial update so merge the data into the screen data.
        t6963_set_row (x++, y, *data++, valid_mask, mode | MODE_MERGE);
    3124:	91 e0       	ldi	r25, 0x01	; 1
    3126:	99 0d       	add	r25, r9
    3128:	99 a3       	std	Y+33, r25	; 0x21
    // The margin to the right
    right_remain = length & 7;          // Remaining bits on line
    // right_margin = (8 - (right_remain)) & 0x7;

    // Iterate over all of the rows.
    for (row = 0; row < height; row += 8)
    312a:	18 8e       	std	Y+24, r1	; 0x18
    312c:	1f 8a       	std	Y+23, r1	; 0x17
                    if ((mode & MODE_FILL) == 0)
                        data++;
                }

                // Save the data in the local buffer prior to conversion
                fbuf [left_index] = datum;
    312e:	6e 01       	movw	r12, r28
    3130:	e9 e0       	ldi	r30, 0x09	; 9
    3132:	ce 0e       	add	r12, r30
    3134:	d1 1c       	adc	r13, r1
    3136:	9e 01       	movw	r18, r28
    3138:	2f 5f       	subi	r18, 0xFF	; 255
    313a:	3f 4f       	sbci	r19, 0xFF	; 255
    313c:	3a 8b       	std	Y+18, r19	; 0x12
    313e:	29 8b       	std	Y+17, r18	; 0x11
    3140:	ce 01       	movw	r24, r28
    3142:	41 96       	adiw	r24, 0x11	; 17
    3144:	9c 8b       	std	Y+20, r25	; 0x14
    3146:	8b 8b       	std	Y+19, r24	; 0x13
    if (ii != 0)
    {
        uint8_t valid_mask;             // Mask for the valid bits to write.

        // Create mask for start block i.e. 0xff >> ii
        valid_mask = pgm_read_byte (&bit_shift_maskP[ii]);
    3148:	fe 89       	ldd	r31, Y+22	; 0x16
    314a:	ef 2f       	mov	r30, r31
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	e8 58       	subi	r30, 0x88	; 136
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	fc 8f       	std	Y+28, r31	; 0x1c
    3154:	eb 8f       	std	Y+27, r30	; 0x1b
    3156:	ff 88       	ldd	r15, Y+23	; 0x17
    3158:	ff 0c       	add	r15, r15
    315a:	ff 0c       	add	r15, r15
    315c:	ff 0c       	add	r15, r15
    // The margin to the right
    right_remain = length & 7;          // Remaining bits on line
    // right_margin = (8 - (right_remain)) & 0x7;

    // Iterate over all of the rows.
    for (row = 0; row < height; row += 8)
    315e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3160:	f9 16       	cp	r15, r25
    3162:	08 f0       	brcs	.+2      	; 0x3166 <t6963_vbitblt+0xac>
    3164:	ce c0       	rjmp	.+412    	; 0x3302 <t6963_vbitblt+0x248>
    3166:	00 e0       	ldi	r16, 0x00	; 0
                {
                    // Collect the data from the parameter.
                    datum = *data;

                    // Advance the datum if we are not in fill mode.
                    if ((mode & MODE_FILL) == 0)
    3168:	99 8d       	ldd	r25, Y+25	; 0x19
    316a:	98 70       	andi	r25, 0x08	; 8
    316c:	e9 2e       	mov	r14, r25
        uint16_t buf_index;             // Index to buffer
        uint8_t max_rows;               // The maximum number of rows
        uint8_t ii;                     // General iterator

        /* Convert all of the data */
        for (col = 0; col < length; col += 8)
    316e:	9d 89       	ldd	r25, Y+21	; 0x15
    3170:	09 17       	cp	r16, r25
    3172:	08 f0       	brcs	.+2      	; 0x3176 <t6963_vbitblt+0xbc>
    3174:	53 c0       	rjmp	.+166    	; 0x321c <t6963_vbitblt+0x162>
            uint8_t left_index;
            uint8_t fbuf [8];

            // Process the first row.
            left_index = 0;
            if (col == 0)
    3176:	00 23       	and	r16, r16
    3178:	11 f0       	breq	.+4      	; 0x317e <t6963_vbitblt+0xc4>
            uint8_t right_index;
            uint8_t left_index;
            uint8_t fbuf [8];

            // Process the first row.
            left_index = 0;
    317a:	81 2c       	mov	r8, r1
    317c:	01 c0       	rjmp	.+2      	; 0x3180 <t6963_vbitblt+0xc6>
    uint8_t row;                        // The current row being processed.
    uint8_t col;                        // The current column being processed.
    uint8_t row_inc;                    // The row increment

    // Calculate the left margin and left aligned length
    left_margin = (x & 7);              // The left margin
    317e:	8e 88       	ldd	r8, Y+22	; 0x16
            // Process the first row.
            left_index = 0;
            if (col == 0)
                left_index = left_margin;
            right_index = 8;
            if ((length - col) < 8)
    3180:	c1 01       	movw	r24, r2
    3182:	80 1b       	sub	r24, r16
    3184:	91 09       	sbc	r25, r1
    3186:	08 97       	sbiw	r24, 0x08	; 8
    3188:	1c f0       	brlt	.+6      	; 0x3190 <t6963_vbitblt+0xd6>

            // Process the first row.
            left_index = 0;
            if (col == 0)
                left_index = left_margin;
            right_index = 8;
    318a:	88 e0       	ldi	r24, 0x08	; 8
    318c:	68 2e       	mov	r6, r24
    318e:	01 c0       	rjmp	.+2      	; 0x3192 <t6963_vbitblt+0xd8>
            if ((length - col) < 8)
                right_index = right_remain;
    3190:	6f 8c       	ldd	r6, Y+31	; 0x1f
            do
            {
                uint8_t datum;

                // Write the data data to the buffer
                if (data == NULL)
    3192:	a1 14       	cp	r10, r1
    3194:	b1 04       	cpc	r11, r1
    3196:	19 f4       	brne	.+6      	; 0x319e <t6963_vbitblt+0xe4>
                {
                    // Collect the data from serial.
                    datum = serial_getc ();
    3198:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
    319c:	07 c0       	rjmp	.+14     	; 0x31ac <t6963_vbitblt+0xf2>
                }
                else
                {
                    // Collect the data from the parameter.
                    datum = *data;
    319e:	f5 01       	movw	r30, r10
    31a0:	80 81       	ld	r24, Z

                    // Advance the datum if we are not in fill mode.
                    if ((mode & MODE_FILL) == 0)
    31a2:	e1 10       	cpse	r14, r1
    31a4:	03 c0       	rjmp	.+6      	; 0x31ac <t6963_vbitblt+0xf2>
                        data++;
    31a6:	ff ef       	ldi	r31, 0xFF	; 255
    31a8:	af 1a       	sub	r10, r31
    31aa:	bf 0a       	sbc	r11, r31
                }

                // Save the data in the local buffer prior to conversion
                fbuf [left_index] = datum;
    31ac:	f6 01       	movw	r30, r12
    31ae:	e8 0d       	add	r30, r8
    31b0:	f1 1d       	adc	r31, r1
    31b2:	80 83       	st	Z, r24
            }
            while (++left_index < right_index);
    31b4:	83 94       	inc	r8
    31b6:	86 14       	cp	r8, r6
    31b8:	60 f3       	brcs	.-40     	; 0x3192 <t6963_vbitblt+0xd8>
    31ba:	de 01       	movw	r26, r28
    31bc:	51 96       	adiw	r26, 0x11	; 17

    // Flip the bits.
    yy = 7;
    do
    {
        uint8_t datum = buf[yy];
    31be:	8e 91       	ld	r24, -X
    31c0:	f6 01       	movw	r30, r12
        xx = 7;
        do
        {
            dest[xx] = (dest[xx] >> 1) | (datum & 0x80);
    31c2:	98 2f       	mov	r25, r24
    31c4:	90 78       	andi	r25, 0x80	; 128
    31c6:	22 91       	ld	r18, -Z
    31c8:	26 95       	lsr	r18
    31ca:	92 2b       	or	r25, r18
    31cc:	90 83       	st	Z, r25
            datum <<= 1;
    31ce:	88 0f       	add	r24, r24
        }
        while (--xx >= 0);
    31d0:	29 89       	ldd	r18, Y+17	; 0x11
    31d2:	3a 89       	ldd	r19, Y+18	; 0x12
    31d4:	e2 17       	cp	r30, r18
    31d6:	f3 07       	cpc	r31, r19
    31d8:	a1 f7       	brne	.-24     	; 0x31c2 <t6963_vbitblt+0x108>
    }
    while (--yy >= 0);
    31da:	ac 15       	cp	r26, r12
    31dc:	bd 05       	cpc	r27, r13
    31de:	79 f7       	brne	.-34     	; 0x31be <t6963_vbitblt+0x104>
    31e0:	de 01       	movw	r26, r28
    31e2:	51 96       	adiw	r26, 0x11	; 17
    31e4:	f6 01       	movw	r30, r12

    // Copy the results back
    xx = 7;
    do
    {
        buf[xx] = dest[xx];
    31e6:	82 91       	ld	r24, -Z
    31e8:	8e 93       	st	-X, r24
    }
    while (--xx >= 0);
    31ea:	89 89       	ldd	r24, Y+17	; 0x11
    31ec:	9a 89       	ldd	r25, Y+18	; 0x12
    31ee:	e8 17       	cp	r30, r24
    31f0:	f9 07       	cpc	r31, r25
    31f2:	c9 f7       	brne	.-14     	; 0x31e6 <t6963_vbitblt+0x12c>
            // Flip the data from vertical to horizontal
            flip_8x8_v_to_h (fbuf);

            // Organise in the correct position in the horizontal line such
            // that the horizontal blocks are separated by a line width.
            buf_index = col >> 3;
    31f4:	80 2f       	mov	r24, r16
    31f6:	86 95       	lsr	r24
    31f8:	86 95       	lsr	r24
    31fa:	86 95       	lsr	r24
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	f6 01       	movw	r30, r12
            for (ii = 0; ii < 8; ii++)
            {
                draw_buffer [buf_index] = fbuf[ii];
    3200:	21 91       	ld	r18, Z+
    3202:	dc 01       	movw	r26, r24
    3204:	ac 5f       	subi	r26, 0xFC	; 252
    3206:	bc 4f       	sbci	r27, 0xFC	; 252
    3208:	2c 93       	st	X, r18
                buf_index += row_inc;
    320a:	84 0d       	add	r24, r4
    320c:	95 1d       	adc	r25, r5
            flip_8x8_v_to_h (fbuf);

            // Organise in the correct position in the horizontal line such
            // that the horizontal blocks are separated by a line width.
            buf_index = col >> 3;
            for (ii = 0; ii < 8; ii++)
    320e:	2b 89       	ldd	r18, Y+19	; 0x13
    3210:	3c 89       	ldd	r19, Y+20	; 0x14
    3212:	e2 17       	cp	r30, r18
    3214:	f3 07       	cpc	r31, r19
    3216:	a1 f7       	brne	.-24     	; 0x3200 <t6963_vbitblt+0x146>
        uint16_t buf_index;             // Index to buffer
        uint8_t max_rows;               // The maximum number of rows
        uint8_t ii;                     // General iterator

        /* Convert all of the data */
        for (col = 0; col < length; col += 8)
    3218:	08 5f       	subi	r16, 0xF8	; 248
    321a:	a9 cf       	rjmp	.-174    	; 0x316e <t6963_vbitblt+0xb4>
    321c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    321e:	8f 19       	sub	r24, r15
    3220:	89 30       	cpi	r24, 0x09	; 9
    3222:	08 f0       	brcs	.+2      	; 0x3226 <t6963_vbitblt+0x16c>
    3224:	88 e0       	ldi	r24, 0x08	; 8
    3226:	81 0f       	add	r24, r17
    3228:	8a a3       	std	Y+34, r24	; 0x22
        max_rows = height - row;
        if (max_rows > 8)
            max_rows = 8;

        // Iterate over the rows
        for (buf_index = 0, ii = 0; ii < max_rows; ii++)
    322a:	61 2c       	mov	r6, r1
    322c:	71 2c       	mov	r7, r1
        uint8_t valid_mask;             // Mask for the valid bits to write.

        // This is a partial update so merge the data into the screen data.
        // Create the mask of invalid bits is  (1 << (8 - width)) - 1 i.e. bit_shift_mask;
        valid_mask = ~pgm_read_byte (&bit_shift_maskP[width]);
        t6963_set_row (x + ii, y, data[ii], valid_mask, mode | MODE_MERGE);
    322e:	99 8d       	ldd	r25, Y+25	; 0x19
    3230:	90 61       	ori	r25, 0x10	; 16
    3232:	9a 8f       	std	Y+26, r25	; 0x1a
            t6963_set_row (x, y, *data++, valid_mask, mode | MODE_MERGE);
            return;
        }

        // More than 1 block, compute the new length
        width -= 8;
    3234:	9d 89       	ldd	r25, Y+21	; 0x15
    3236:	98 50       	subi	r25, 0x08	; 8
    3238:	9b a3       	std	Y+35, r25	; 0x23
            if (width < 8)
            {
                // This is a short block, the data does not occupy the block.
                // Modify the mask to handle the right of the data.
                // i.e. ((1 << (8 - width)) - 1)
                valid_mask &= ~pgm_read_byte (&bit_shift_maskP[width]);
    323a:	f1 01       	movw	r30, r2
    323c:	e8 58       	subi	r30, 0x88	; 136
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	fd a3       	std	Y+37, r31	; 0x25
    3242:	ec a3       	std	Y+36, r30	; 0x24
        max_rows = height - row;
        if (max_rows > 8)
            max_rows = 8;

        // Iterate over the rows
        for (buf_index = 0, ii = 0; ii < max_rows; ii++)
    3244:	9a a1       	ldd	r25, Y+34	; 0x22
    3246:	19 17       	cp	r17, r25
    3248:	09 f4       	brne	.+2      	; 0x324c <t6963_vbitblt+0x192>
    324a:	55 c0       	rjmp	.+170    	; 0x32f6 <t6963_vbitblt+0x23c>
        {
            // Write the line.
            bitblt_line (x, y++, width, &draw_buffer [buf_index], mode);
    324c:	93 01       	movw	r18, r6
    324e:	2c 5f       	subi	r18, 0xFC	; 252
    3250:	3c 4f       	sbci	r19, 0xFC	; 252
    3252:	79 01       	movw	r14, r18
    3254:	91 e0       	ldi	r25, 0x01	; 1
    3256:	91 0f       	add	r25, r17
    3258:	98 a3       	std	Y+32, r25	; 0x20
    325a:	d9 01       	movw	r26, r18
    uint8_t ii;                         // Local iterator

    // See if there is a left merge.
    ii = x & 7;                         // Get the shift on the left
    x >>= 3;                            // Convert to column address
    if (ii != 0)
    325c:	9e 89       	ldd	r25, Y+22	; 0x16
    325e:	99 23       	and	r25, r25
    3260:	09 f1       	breq	.+66     	; 0x32a4 <t6963_vbitblt+0x1ea>
    {
        uint8_t valid_mask;             // Mask for the valid bits to write.

        // Create mask for start block i.e. 0xff >> ii
        valid_mask = pgm_read_byte (&bit_shift_maskP[ii]);
    3262:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3264:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3266:	24 91       	lpm	r18, Z
        width += ii;                    // Add the sub-block start

        // Add any right mask if we have a short block.
        if (width <= 8)
    3268:	9d 89       	ldd	r25, Y+21	; 0x15
    326a:	99 30       	cpi	r25, 0x09	; 9
    326c:	68 f4       	brcc	.+26     	; 0x3288 <t6963_vbitblt+0x1ce>
        {
            // Add any right mask if we have a short block.
            if (width < 8)
    326e:	98 30       	cpi	r25, 0x08	; 8
    3270:	29 f0       	breq	.+10     	; 0x327c <t6963_vbitblt+0x1c2>
            {
                // This is a short block, the data does not occupy the block.
                // Modify the mask to handle the right of the data.
                // i.e. ((1 << (8 - width)) - 1)
                valid_mask &= ~pgm_read_byte (&bit_shift_maskP[width]);
    3272:	ec a1       	ldd	r30, Y+36	; 0x24
    3274:	fd a1       	ldd	r31, Y+37	; 0x25
    3276:	84 91       	lpm	r24, Z
    3278:	80 95       	com	r24
    327a:	28 23       	and	r18, r24
            }

            // Write the start of row.
            t6963_set_row (x, y, *data++, valid_mask, mode | MODE_MERGE);
    327c:	0a 8d       	ldd	r16, Y+26	; 0x1a
    327e:	f7 01       	movw	r30, r14
    3280:	40 81       	ld	r20, Z
    3282:	61 2f       	mov	r22, r17
    3284:	89 2d       	mov	r24, r9
    3286:	31 c0       	rjmp	.+98     	; 0x32ea <t6963_vbitblt+0x230>
            return;
        }

        // More than 1 block, compute the new length
        width -= 8;
    3288:	7b a1       	ldd	r23, Y+35	; 0x23
        // This is a partial update so merge the data into the screen data.
        t6963_set_row (x++, y, *data++, valid_mask, mode | MODE_MERGE);
    328a:	ff ef       	ldi	r31, 0xFF	; 255
    328c:	ef 1a       	sub	r14, r31
    328e:	ff 0a       	sbc	r15, r31
    3290:	0a 8d       	ldd	r16, Y+26	; 0x1a
    3292:	4c 91       	ld	r20, X
    3294:	61 2f       	mov	r22, r17
    3296:	89 2d       	mov	r24, r9
    3298:	7f a3       	std	Y+39, r23	; 0x27
    329a:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <t6963_set_row>
    329e:	99 a1       	ldd	r25, Y+33	; 0x21
    32a0:	7f a1       	ldd	r23, Y+39	; 0x27
    32a2:	02 c0       	rjmp	.+4      	; 0x32a8 <t6963_vbitblt+0x1ee>
    uint8_t ii;                         // Local iterator

    // See if there is a left merge.
    ii = x & 7;                         // Get the shift on the left
    x >>= 3;                            // Convert to column address
    if (ii != 0)
    32a4:	7d 8d       	ldd	r23, Y+29	; 0x1d
{
    uint8_t ii;                         // Local iterator

    // See if there is a left merge.
    ii = x & 7;                         // Get the shift on the left
    x >>= 3;                            // Convert to column address
    32a6:	99 2d       	mov	r25, r9
        // This is a partial update so merge the data into the screen data.
        t6963_set_row (x++, y, *data++, valid_mask, mode | MODE_MERGE);
    }

    // Process the whole blocks; convert to column count
    if ((ii = (width >> 3)) > 0)
    32a8:	87 2e       	mov	r8, r23
    32aa:	86 94       	lsr	r8
    32ac:	86 94       	lsr	r8
    32ae:	86 94       	lsr	r8
    32b0:	61 f0       	breq	.+24     	; 0x32ca <t6963_vbitblt+0x210>
    {
        // Re-write the row, this will determine if we need to merge or not.
        t6963_rewrite_row (x, y, ii, data, mode);
    32b2:	48 2d       	mov	r20, r8
    32b4:	50 e0       	ldi	r21, 0x00	; 0
    32b6:	09 8d       	ldd	r16, Y+25	; 0x19
    32b8:	97 01       	movw	r18, r14
    32ba:	61 2f       	mov	r22, r17
    32bc:	89 2f       	mov	r24, r25
    32be:	7f a3       	std	Y+39, r23	; 0x27
    32c0:	9e a3       	std	Y+38, r25	; 0x26
    32c2:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <t6963_rewrite_row>
    32c6:	9e a1       	ldd	r25, Y+38	; 0x26
    32c8:	7f a1       	ldd	r23, Y+39	; 0x27
    }

    // Process any remaining block
    width &= 7;
    32ca:	77 70       	andi	r23, 0x07	; 7
    if (width > 0)
    32cc:	81 f0       	breq	.+32     	; 0x32ee <t6963_vbitblt+0x234>
    {
        uint8_t valid_mask;             // Mask for the valid bits to write.

        // This is a partial update so merge the data into the screen data.
        // Create the mask of invalid bits is  (1 << (8 - width)) - 1 i.e. bit_shift_mask;
        valid_mask = ~pgm_read_byte (&bit_shift_maskP[width]);
    32ce:	e7 2f       	mov	r30, r23
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	e8 58       	subi	r30, 0x88	; 136
    32d4:	ff 4f       	sbci	r31, 0xFF	; 255
    32d6:	24 91       	lpm	r18, Z
    32d8:	20 95       	com	r18
        t6963_set_row (x + ii, y, data[ii], valid_mask, mode | MODE_MERGE);
    32da:	d7 01       	movw	r26, r14
    32dc:	a8 0d       	add	r26, r8
    32de:	b1 1d       	adc	r27, r1
    32e0:	0a 8d       	ldd	r16, Y+26	; 0x1a
    32e2:	4c 91       	ld	r20, X
    32e4:	61 2f       	mov	r22, r17
    32e6:	88 2d       	mov	r24, r8
    32e8:	89 0f       	add	r24, r25
    32ea:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <t6963_set_row>
        // Iterate over the rows
        for (buf_index = 0, ii = 0; ii < max_rows; ii++)
        {
            // Write the line.
            bitblt_line (x, y++, width, &draw_buffer [buf_index], mode);
            buf_index += row_inc;
    32ee:	64 0c       	add	r6, r4
    32f0:	75 1c       	adc	r7, r5

        // Iterate over the rows
        for (buf_index = 0, ii = 0; ii < max_rows; ii++)
        {
            // Write the line.
            bitblt_line (x, y++, width, &draw_buffer [buf_index], mode);
    32f2:	18 a1       	ldd	r17, Y+32	; 0x20
    32f4:	a7 cf       	rjmp	.-178    	; 0x3244 <t6963_vbitblt+0x18a>
    32f6:	ef 89       	ldd	r30, Y+23	; 0x17
    32f8:	f8 8d       	ldd	r31, Y+24	; 0x18
    32fa:	31 96       	adiw	r30, 0x01	; 1
    32fc:	f8 8f       	std	Y+24, r31	; 0x18
    32fe:	ef 8b       	std	Y+23, r30	; 0x17
    3300:	2a cf       	rjmp	.-428    	; 0x3156 <t6963_vbitblt+0x9c>
            buf_index += row_inc;
        }
    }
}
    3302:	a7 96       	adiw	r28, 0x27	; 39
    3304:	0f b6       	in	r0, 0x3f	; 63
    3306:	f8 94       	cli
    3308:	de bf       	out	0x3e, r29	; 62
    330a:	0f be       	out	0x3f, r0	; 63
    330c:	cd bf       	out	0x3d, r28	; 61
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	ff 90       	pop	r15
    3318:	ef 90       	pop	r14
    331a:	df 90       	pop	r13
    331c:	cf 90       	pop	r12
    331e:	bf 90       	pop	r11
    3320:	af 90       	pop	r10
    3322:	9f 90       	pop	r9
    3324:	8f 90       	pop	r8
    3326:	7f 90       	pop	r7
    3328:	6f 90       	pop	r6
    332a:	5f 90       	pop	r5
    332c:	4f 90       	pop	r4
    332e:	3f 90       	pop	r3
    3330:	2f 90       	pop	r2
    3332:	08 95       	ret

00003334 <t6963_hline>:
/// @param [in] x1 The 2nd x-coordinate.
/// @param [in] mode The drawing mode.
///
void
t6963_hline (uint8_t x, uint8_t y, uint8_t x1, uint8_t mode)
{
    3334:	ef 92       	push	r14
    3336:	ff 92       	push	r15
    3338:	0f 93       	push	r16
    333a:	1f 93       	push	r17
    333c:	cf 93       	push	r28
    333e:	df 93       	push	r29
    3340:	16 2f       	mov	r17, r22
    3342:	f2 2e       	mov	r15, r18
    // polygon fill.
    uint8_t *buffer = (draw_buffer + 128);
    //uint8_t buffer [SCREEN_COLUMNS];  // Stack based if we have room

    // Check for a single pixeland handle imediately, no savings to be made.
    if (x == x1)
    3344:	84 13       	cpse	r24, r20
    3346:	09 c0       	rjmp	.+18     	; 0x335a <t6963_hline+0x26>
    {
        t6963_set_pixel (x, y, mode);
    3348:	42 2f       	mov	r20, r18
        // Create the mask of valid bits.
        // buffer[offset++] = ~((uint8_t)(1 << (8 - width)) - 1);
        valid_mask = ~pgm_read_byte (&bit_shift_maskP[width]);
        t6963_set_row (x, y, valid_mask, valid_mask, mode|MODE_MERGE);
    }
}
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	1f 91       	pop	r17
    3350:	0f 91       	pop	r16
    3352:	ff 90       	pop	r15
    3354:	ef 90       	pop	r14
    //uint8_t buffer [SCREEN_COLUMNS];  // Stack based if we have room

    // Check for a single pixeland handle imediately, no savings to be made.
    if (x == x1)
    {
        t6963_set_pixel (x, y, mode);
    3356:	0c 94 30 18 	jmp	0x3060	; 0x3060 <t6963_set_pixel>
        return;
    }

    // Swap the bytes to ensure x is smaller than x1.
    if (x > x1)
    335a:	48 17       	cp	r20, r24
    335c:	18 f4       	brcc	.+6      	; 0x3364 <t6963_hline+0x30>
        swap_bytes (x, x1);
    335e:	84 27       	eor	r24, r20
    3360:	48 27       	eor	r20, r24
    3362:	84 27       	eor	r24, r20
    while (x <= x1)
        t6963_set_pixel (x++, y, mode);
    return;
#endif

    width = (x1 - x) + 1;               // Calculate the width
    3364:	d1 e0       	ldi	r29, 0x01	; 1
    3366:	d4 0f       	add	r29, r20
    3368:	d8 1b       	sub	r29, r24
    x1 = x & 7;                         // Get the offset to start of block
    336a:	98 2f       	mov	r25, r24
    336c:	97 70       	andi	r25, 0x07	; 7
    x >>= 3;                            // Get the column index
    336e:	c8 2f       	mov	r28, r24
    3370:	c6 95       	lsr	r28
    3372:	c6 95       	lsr	r28
    3374:	c6 95       	lsr	r28
    if (x1 != 0)                        // Not on boundary?
    3376:	99 23       	and	r25, r25
    3378:	d1 f0       	breq	.+52     	; 0x33ae <t6963_hline+0x7a>
    {
        uint8_t valid_mask;             // Mask for the valid bits to write.

        // Compute the valid mask i.e. 0xff >> x1
        valid_mask = pgm_read_byte (&bit_shift_maskP[x1]);
    337a:	e9 2f       	mov	r30, r25
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	e8 58       	subi	r30, 0x88	; 136
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	44 91       	lpm	r20, Z
        width += x1;                    // Add the sub-block start to width
    3384:	d9 0f       	add	r29, r25

        // Add any right mask if we have a short block
        if (width < 8)
    3386:	d8 30       	cpi	r29, 0x08	; 8
    3388:	38 f4       	brcc	.+14     	; 0x3398 <t6963_hline+0x64>
        {
            // This is a short block, the data does not occupy the block.
            // Modify the mask to handle the right of the data.
            // i.e. valid_mask &= ~((1 << (8 - width)) - 1);
            valid_mask &= ~pgm_read_byte (&bit_shift_maskP[width]);
    338a:	ed 2f       	mov	r30, r29
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	e8 58       	subi	r30, 0x88	; 136
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	e4 91       	lpm	r30, Z
    3394:	e0 95       	com	r30
    3396:	4e 23       	and	r20, r30
        }
        
        // Write the start of row.
        t6963_set_row (x, y, valid_mask, valid_mask, mode | MODE_MERGE);
    3398:	0f 2d       	mov	r16, r15
    339a:	00 61       	ori	r16, 0x10	; 16
    339c:	24 2f       	mov	r18, r20
    339e:	61 2f       	mov	r22, r17
    33a0:	8c 2f       	mov	r24, r28
    33a2:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <t6963_set_row>
        
        // Deal quickly with a single block.
        if (width <= 8)
    33a6:	d9 30       	cpi	r29, 0x09	; 9
    33a8:	60 f1       	brcs	.+88     	; 0x3402 <t6963_hline+0xce>
            return;                     // Finished, quit now.
        width -= 8;
    33aa:	d8 50       	subi	r29, 0x08	; 8
        x++;
    33ac:	cf 5f       	subi	r28, 0xFF	; 255
    }
    
    // Process the whole blocks; convert to a column count
    if ((x1 = (width >> 3)) > 0)
    33ae:	ed 2e       	mov	r14, r29
    33b0:	e6 94       	lsr	r14
    33b2:	e6 94       	lsr	r14
    33b4:	e6 94       	lsr	r14
    33b6:	b1 f0       	breq	.+44     	; 0x33e4 <t6963_hline+0xb0>
    33b8:	a0 e0       	ldi	r26, 0x00	; 0
    {
        uint8_t offset = 0;
        
        do
        {
            buffer[offset++] = 0xff;
    33ba:	9f ef       	ldi	r25, 0xFF	; 255
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	8a 0f       	add	r24, r26
    33c0:	b0 e0       	ldi	r27, 0x00	; 0
    33c2:	ac 57       	subi	r26, 0x7C	; 124
    33c4:	bc 4f       	sbci	r27, 0xFC	; 252
    33c6:	9c 93       	st	X, r25
        }
        while (--x1 > 0);
    33c8:	8e 15       	cp	r24, r14
    33ca:	11 f0       	breq	.+4      	; 0x33d0 <t6963_hline+0x9c>
    {
        uint8_t offset = 0;
        
        do
        {
            buffer[offset++] = 0xff;
    33cc:	a8 2f       	mov	r26, r24
    33ce:	f6 cf       	rjmp	.-20     	; 0x33bc <t6963_hline+0x88>
        }
        while (--x1 > 0);
        
        // Write the data
        t6963_rewrite_row (x, y, offset, buffer, mode);
    33d0:	4e 2d       	mov	r20, r14
    33d2:	50 e0       	ldi	r21, 0x00	; 0
    33d4:	0f 2d       	mov	r16, r15
    33d6:	24 e8       	ldi	r18, 0x84	; 132
    33d8:	33 e0       	ldi	r19, 0x03	; 3
    33da:	61 2f       	mov	r22, r17
    33dc:	8c 2f       	mov	r24, r28
    33de:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <t6963_rewrite_row>
        
        // Advance x over the data written.
        x += offset;
    33e2:	ce 0d       	add	r28, r14
    }

    // Process any remaining block
    width &= 0x07;
    33e4:	d7 70       	andi	r29, 0x07	; 7
    if (width > 0)
    33e6:	69 f0       	breq	.+26     	; 0x3402 <t6963_hline+0xce>
    {
        uint8_t valid_mask;
        
        // Create the mask of valid bits.
        // buffer[offset++] = ~((uint8_t)(1 << (8 - width)) - 1);
        valid_mask = ~pgm_read_byte (&bit_shift_maskP[width]);
    33e8:	ed 2f       	mov	r30, r29
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	e8 58       	subi	r30, 0x88	; 136
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	44 91       	lpm	r20, Z
    33f2:	40 95       	com	r20
        t6963_set_row (x, y, valid_mask, valid_mask, mode|MODE_MERGE);
    33f4:	0f 2d       	mov	r16, r15
    33f6:	00 61       	ori	r16, 0x10	; 16
    33f8:	24 2f       	mov	r18, r20
    33fa:	61 2f       	mov	r22, r17
    33fc:	8c 2f       	mov	r24, r28
    33fe:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <t6963_set_row>
    }
}
    3402:	df 91       	pop	r29
    3404:	cf 91       	pop	r28
    3406:	1f 91       	pop	r17
    3408:	0f 91       	pop	r16
    340a:	ff 90       	pop	r15
    340c:	ef 90       	pop	r14
    340e:	08 95       	ret

00003410 <t6963_vline>:
/// @param [in] y1 The 2nd y-coordinate.
/// @param [in] mode The drawing mode.
///
void
t6963_vline (uint8_t x, uint8_t y, uint8_t y1, uint8_t mode)
{
    3410:	ff 92       	push	r15
    3412:	0f 93       	push	r16
    3414:	1f 93       	push	r17
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
    341a:	1f 92       	push	r1
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	f8 2e       	mov	r15, r24
    3422:	04 2f       	mov	r16, r20
    // Swap the bytes so that we can iterate
    if (y > y1)
    3424:	46 17       	cp	r20, r22
    3426:	18 f4       	brcc	.+6      	; 0x342e <t6963_vline+0x1e>
        swap_bytes (y, y1);
    3428:	64 27       	eor	r22, r20
    342a:	06 27       	eor	r16, r22
    342c:	60 27       	eor	r22, r16

    // Iterate between the two y coordinates.
    while (y <= y1)
    342e:	06 17       	cp	r16, r22
    3430:	50 f0       	brcs	.+20     	; 0x3446 <t6963_vline+0x36>
    {
        t6963_set_pixel (x, y++, mode);
    3432:	11 e0       	ldi	r17, 0x01	; 1
    3434:	16 0f       	add	r17, r22
    3436:	42 2f       	mov	r20, r18
    3438:	8f 2d       	mov	r24, r15
    343a:	29 83       	std	Y+1, r18	; 0x01
    343c:	0e 94 30 18 	call	0x3060	; 0x3060 <t6963_set_pixel>
    3440:	61 2f       	mov	r22, r17
    3442:	29 81       	ldd	r18, Y+1	; 0x01
    3444:	f4 cf       	rjmp	.-24     	; 0x342e <t6963_vline+0x1e>
    }
}
    3446:	0f 90       	pop	r0
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	1f 91       	pop	r17
    344e:	0f 91       	pop	r16
    3450:	ff 90       	pop	r15
    3452:	08 95       	ret

00003454 <main>:
}

// The main loop. This performs the initialisation and general operation.
int
main (void)
{
    3454:	cf 93       	push	r28
    3456:	df 93       	push	r29
    3458:	cd b7       	in	r28, 0x3d	; 61
    345a:	de b7       	in	r29, 0x3e	; 62
    345c:	27 97       	sbiw	r28, 0x07	; 7
    345e:	0f b6       	in	r0, 0x3f	; 63
    3460:	f8 94       	cli
    3462:	de bf       	out	0x3e, r29	; 62
    3464:	0f be       	out	0x3f, r0	; 63
    3466:	cd bf       	out	0x3d, r28	; 61
    int cc;

    // Set the watchdog timer for 2 seconds. Note that the lcd_reset()
    // function changes the timer to 64ms so this must be reset on input.
    cli();                              // Disable interrupts
    3468:	f8 94       	cli
     * |  1  |  0  |  0  |  1  |  8000        |
     * +-----+-----+-----+-----+--------------+
     */

    // Enter Watchdog Configuration mode
    WDTCSR |= (1 << WDCE) | (1 << WDE);
    346a:	80 91 60 00 	lds	r24, 0x0060
    346e:	88 61       	ori	r24, 0x18	; 24
    3470:	80 93 60 00 	sts	0x0060, r24
    // Set Watchdog settings
    WDTCSR = ((1 << WDIE)|(1 << WDE)|(0 << WDP3)|(1 << WDP2)|(1 << WDP1)|(1 << WDP0));
    3474:	8f e4       	ldi	r24, 0x4F	; 79
    3476:	80 93 60 00 	sts	0x0060, r24
    // Enable interrupts
    sei();
    347a:	78 94       	sei

    // Read in the EEPROM
    memset (prefs, 0, sizeof (prefs));
    347c:	8d e0       	ldi	r24, 0x0D	; 13
    347e:	e2 ee       	ldi	r30, 0xE2	; 226
    3480:	f2 e0       	ldi	r31, 0x02	; 2
    3482:	df 01       	movw	r26, r30
    3484:	1d 92       	st	X+, r1
    3486:	8a 95       	dec	r24
    3488:	e9 f7       	brne	.-6      	; 0x3484 <main+0x30>
    348a:	6f 01       	movw	r12, r30
    for (cc = EEPROM_ADDR_MAGIC; cc < EEPROM_ADDR_MAX; cc++)
    348c:	00 e0       	ldi	r16, 0x00	; 0
    348e:	10 e0       	ldi	r17, 0x00	; 0
        prefs [cc] = eeprom_read_byte ((const uint8_t *)(cc));
    3490:	c8 01       	movw	r24, r16
    3492:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__eerd_byte_m168>
    3496:	f6 01       	movw	r30, r12
    3498:	81 93       	st	Z+, r24
    349a:	6f 01       	movw	r12, r30
    // Enable interrupts
    sei();

    // Read in the EEPROM
    memset (prefs, 0, sizeof (prefs));
    for (cc = EEPROM_ADDR_MAGIC; cc < EEPROM_ADDR_MAX; cc++)
    349c:	0f 5f       	subi	r16, 0xFF	; 255
    349e:	1f 4f       	sbci	r17, 0xFF	; 255
    34a0:	0c 30       	cpi	r16, 0x0C	; 12
    34a2:	11 05       	cpc	r17, r1
    34a4:	a9 f7       	brne	.-22     	; 0x3490 <main+0x3c>
        prefs [cc] = eeprom_read_byte ((const uint8_t *)(cc));

    // Check for a valid magic, if so then we will accept the content
    if (is_invalid_magic() ||
    34a6:	80 91 e2 02 	lds	r24, 0x02E2
    34aa:	85 3d       	cpi	r24, 0xD5	; 213
    34ac:	49 f4       	brne	.+18     	; 0x34c0 <main+0x6c>
        baud_rate_invalid(prefs_baudrate) ||
    34ae:	80 91 e3 02 	lds	r24, 0x02E3
    34b2:	81 50       	subi	r24, 0x01	; 1
    memset (prefs, 0, sizeof (prefs));
    for (cc = EEPROM_ADDR_MAGIC; cc < EEPROM_ADDR_MAX; cc++)
        prefs [cc] = eeprom_read_byte ((const uint8_t *)(cc));

    // Check for a valid magic, if so then we will accept the content
    if (is_invalid_magic() ||
    34b4:	86 30       	cpi	r24, 0x06	; 6
    34b6:	20 f4       	brcc	.+8      	; 0x34c0 <main+0x6c>
        baud_rate_invalid(prefs_baudrate) ||
        ((prefs_reverse & ~MODE_NORMAL_MASK) != 0))
    34b8:	80 91 e6 02 	lds	r24, 0x02E6
    34bc:	8e 7f       	andi	r24, 0xFE	; 254
    for (cc = EEPROM_ADDR_MAGIC; cc < EEPROM_ADDR_MAX; cc++)
        prefs [cc] = eeprom_read_byte ((const uint8_t *)(cc));

    // Check for a valid magic, if so then we will accept the content
    if (is_invalid_magic() ||
        baud_rate_invalid(prefs_baudrate) ||
    34be:	11 f0       	breq	.+4      	; 0x34c4 <main+0x70>
        ((prefs_reverse & ~MODE_NORMAL_MASK) != 0))
    {
        lcd_factory_reset ();
    34c0:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <lcd_factory_reset>
#endif
    
    // The PINB is tempermental on the watchdog reset and returns the
    // incorrect value. This has been moved to the lcd_factory_reset() and is
    // now written to EEPROM.
    if (is_large())
    34c4:	80 91 ec 02 	lds	r24, 0x02EC
    34c8:	88 23       	and	r24, r24
    34ca:	19 f0       	breq	.+6      	; 0x34d2 <main+0x7e>
    {
        // The pin is high, this is a large display. Install the large
        // function table.
        functabP = t6963_functabP;
    34cc:	8d e4       	ldi	r24, 0x4D	; 77
    34ce:	91 e0       	ldi	r25, 0x01	; 1
    34d0:	02 c0       	rjmp	.+4      	; 0x34d6 <main+0x82>
    }
    else
    {
        // The pin is low, this is a small display. Install the small
        // function table.
        functabP = ks0108b_functabP;
    34d2:	8d e3       	ldi	r24, 0x3D	; 61
    34d4:	91 e0       	ldi	r25, 0x01	; 1
    34d6:	90 93 f0 02 	sts	0x02F0, r25
    34da:	80 93 ef 02 	sts	0x02EF, r24
    }

    // Set the backlight to the correct level
    backlight_init ();                  // Initialise the backlight.
    34de:	0e 94 a4 02 	call	0x548	; 0x548 <backlight_init>
    prefs_backlight = backlight_level (prefs_backlight, 0);
    34e2:	60 e0       	ldi	r22, 0x00	; 0
    34e4:	80 91 e4 02 	lds	r24, 0x02E4
    34e8:	0e 94 a7 02 	call	0x54e	; 0x54e <backlight_level>
    34ec:	80 93 e4 02 	sts	0x02E4, r24

    // Initialise display
    ((vfunc_t)(pgm_read_word(&functabP [F_DRV_INIT])))();
    34f0:	e0 91 ef 02 	lds	r30, 0x02EF
    34f4:	f0 91 f0 02 	lds	r31, 0x02F0
    34f8:	32 96       	adiw	r30, 0x02	; 2
    34fa:	85 91       	lpm	r24, Z+
    34fc:	94 91       	lpm	r25, Z
    34fe:	fc 01       	movw	r30, r24
    3500:	09 95       	icall

    // Initialise the fonts.
    font_set (prefs_font, CMDX_FONT_SET);
    3502:	68 e4       	ldi	r22, 0x48	; 72
    3504:	80 91 ed 02 	lds	r24, 0x02ED
    3508:	0e 94 b0 0a 	call	0x1560	; 0x1560 <font_set>
    font_mode (MODE_NORMAL);
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <font_mode>

    // Set the drawing modes to an initialised state of normal
    drawing_mode = MODE_NORMAL;
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	80 93 03 03 	sts	0x0303, r24

    // Set the baud rate to the user preference
    prefs_baudrate = serial_baudrate (prefs_baudrate);
    3518:	80 91 e3 02 	lds	r24, 0x02E3
    351c:	0e 94 82 13 	call	0x2704	; 0x2704 <serial_baudrate>
    3520:	80 93 e3 02 	sts	0x02E3, r24

    // Flush the serial and send the user an XON
    serial_flush ();
    3524:	0e 94 cd 13 	call	0x279a	; 0x279a <serial_flush>

    // Display the splash screen logo this is sprite zero
    if (is_splash())
    3528:	80 91 e5 02 	lds	r24, 0x02E5
    352c:	88 23       	and	r24, r24
    352e:	21 f0       	breq	.+8      	; 0x3538 <main+0xe4>
    {
        // Invoke demo mode to display the splash screen. This is not the
        // demo command.
        lcd_demo (0);
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	0e 94 bf 12 	call	0x257e	; 0x257e <lcd_demo>
    3536:	02 c0       	rjmp	.+4      	; 0x353c <main+0xe8>
    }
    else
    {
        // Clear the screen
        lcd_screen_clear ();
    3538:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_screen_clear>
    // prints them, or interprets them as a command
    for (;;)
    {
next_command:
        // Get a byte from the serial port and parse it.
        cc = serial_getc();
    353c:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
    3540:	08 2f       	mov	r16, r24
    3542:	10 e0       	ldi	r17, 0x00	; 0

        // Deterimine our operational mode, if we are in a grapics mode then
        // we only process commands, otherwise we look for text to render.
        if (!is_graphics())
    3544:	80 91 ee 02 	lds	r24, 0x02EE
    3548:	81 11       	cpse	r24, r1
    354a:	4e c0       	rjmp	.+156    	; 0x35e8 <main+0x194>
        {
            // We are in non-graphcis mode, process the character
            if (cc < ' ')
    354c:	00 32       	cpi	r16, 0x20	; 32
    354e:	11 05       	cpc	r17, r1
    3550:	ac f4       	brge	.+42     	; 0x357c <main+0x128>
            {
                // Process any special control characters.
                if (cc >= CHAR_LF)
    3552:	0a 30       	cpi	r16, 0x0A	; 10
    3554:	11 05       	cpc	r17, r1
    3556:	64 f0       	brlt	.+24     	; 0x3570 <main+0x11c>
                {
                    // LF move to next row
                    if (cc == CHAR_LF)
    3558:	0a 30       	cpi	r16, 0x0A	; 10
    355a:	11 05       	cpc	r17, r1
    355c:	19 f4       	brne	.+6      	; 0x3564 <main+0x110>
                        font_lf ();
    355e:	0e 94 21 0b 	call	0x1642	; 0x1642 <font_lf>
    3562:	ec cf       	rjmp	.-40     	; 0x353c <main+0xe8>
                    // CR, reset to start of row
                    else if (cc == CHAR_CR)
    3564:	0d 30       	cpi	r16, 0x0D	; 13
    3566:	11 05       	cpc	r17, r1
    3568:	49 f7       	brne	.-46     	; 0x353c <main+0xe8>
                        font_cr ();
    356a:	0e 94 17 0b 	call	0x162e	; 0x162e <font_cr>
    356e:	e6 cf       	rjmp	.-52     	; 0x353c <main+0xe8>
                }
                else
                {
                    // Backspace
                    if (cc == CHAR_BACKSPACE)
    3570:	08 30       	cpi	r16, 0x08	; 8
    3572:	11 05       	cpc	r17, r1
    3574:	19 f7       	brne	.-58     	; 0x353c <main+0xe8>
                        font_backspace ();
    3576:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <font_backspace>
    357a:	e0 cf       	rjmp	.-64     	; 0x353c <main+0xe8>
                // We ignore anything else and do not draw it.
            }
            else
            {
                // See if this is a control character.
                if (cc == CHAR_COMMAND)
    357c:	0c 37       	cpi	r16, 0x7C	; 124
    357e:	11 05       	cpc	r17, r1
    3580:	39 f4       	brne	.+14     	; 0x3590 <main+0x13c>
                {
                    // Received character indicated a coming command. Get the
                    // command character and process it.
                    cc = serial_getc();
    3582:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
    3586:	08 2f       	mov	r16, r24
    3588:	10 e0       	ldi	r17, 0x00	; 0

                    // If the character is not the command character then process
                    // as a command.
                    if (cc != CHAR_COMMAND)
    358a:	0c 37       	cpi	r16, 0x7C	; 124
    358c:	11 05       	cpc	r17, r1
    358e:	61 f5       	brne	.+88     	; 0x35e8 <main+0x194>
                        goto graphics_command;
                }

                // Otherwise draw the character
                font_draw (cc);
    3590:	80 2f       	mov	r24, r16
    3592:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <font_draw>
    3596:	d2 cf       	rjmp	.-92     	; 0x353c <main+0xe8>
                int8_t lo = 0;                          // Lo watermark

                do
                {
                    // Find the entry from the middle of the command table
                    int8_t  mid  = (lo + hi) >> 1;      // Get the mid value
    3598:	84 2f       	mov	r24, r20
    359a:	99 27       	eor	r25, r25
    359c:	87 fd       	sbrc	r24, 7
    359e:	90 95       	com	r25
    35a0:	85 0f       	add	r24, r21
    35a2:	91 1d       	adc	r25, r1
    35a4:	57 fd       	sbrc	r21, 7
    35a6:	9a 95       	dec	r25
    35a8:	95 95       	asr	r25
    35aa:	87 95       	ror	r24
                    uint8_t tcmd = pgm_read_byte (&cmdtable_cmdsP[mid]);
    35ac:	28 2f       	mov	r18, r24
    35ae:	33 27       	eor	r19, r19
    35b0:	27 fd       	sbrc	r18, 7
    35b2:	30 95       	com	r19
    35b4:	f9 01       	movw	r30, r18
    35b6:	ea 52       	subi	r30, 0x2A	; 42
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	e4 91       	lpm	r30, Z

                    if (cc == tcmd)
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	0e 17       	cp	r16, r30
    35c0:	1f 07       	cpc	r17, r31
    35c2:	a9 f0       	breq	.+42     	; 0x35ee <main+0x19a>
                        }

                        // The command has been executed. Move onto the next command.
                        goto next_command;
                    }
                    else if (cc > tcmd) // Binary chop - work out which part of table to keep
    35c4:	e0 17       	cp	r30, r16
    35c6:	f1 07       	cpc	r31, r17
    35c8:	0c f0       	brlt	.+2      	; 0x35cc <main+0x178>
    35ca:	a6 c0       	rjmp	.+332    	; 0x3718 <main+0x2c4>
                        lo = mid + 1;   // Discard top half
    35cc:	51 e0       	ldi	r21, 0x01	; 1
    35ce:	58 0f       	add	r21, r24
#undef argc                             /* Re-use the variable */
#undef argf                             /* Re-use the variable */
                }
                // Continue the binary chop until we run out of entries to
                // chop.
                while (lo <= hi);
    35d0:	45 17       	cp	r20, r21
    35d2:	14 f7       	brge	.-60     	; 0x3598 <main+0x144>

            // At this point the command character is not recognised or
            // processed. Where we have received a command character
            // indicated a coming command. We are in the wrong mode, flip
            // back to a non-graphics mode and process.
            if (cc == CHAR_COMMAND)
    35d4:	0c 37       	cpi	r16, 0x7C	; 124
    35d6:	11 05       	cpc	r17, r1
    35d8:	09 f0       	breq	.+2      	; 0x35dc <main+0x188>
    35da:	b0 cf       	rjmp	.-160    	; 0x353c <main+0xe8>
            {
                // Drop out of graphics mode as we have received a command character.
                prefs_graphics = 0;
    35dc:	10 92 ee 02 	sts	0x02EE, r1

                // Get the command character and then go and process it.
                cc = serial_getc();
    35e0:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
    35e4:	08 2f       	mov	r16, r24
    35e6:	10 e0       	ldi	r17, 0x00	; 0
            // then use the argument table to determine the arguments of the
            // call before finalling invoking the function indirectly via the
            // function table.
            {
                int8_t hi = sizeof(cmdtable_cmdsP) - 1; // Hi watermark
                int8_t lo = 0;                          // Lo watermark
    35e8:	50 e0       	ldi	r21, 0x00	; 0
            // command table. This gives us the index of the function. We
            // then use the argument table to determine the arguments of the
            // call before finalling invoking the function indirectly via the
            // function table.
            {
                int8_t hi = sizeof(cmdtable_cmdsP) - 1; // Hi watermark
    35ea:	4a e2       	ldi	r20, 0x2A	; 42
    35ec:	d5 cf       	rjmp	.-86     	; 0x3598 <main+0x144>

                    if (cc == tcmd)
                    {
#define argc hi                         /* Re-use the variable */
#define argf lo                         /* Re-use the variable */
                        void *func = pgm_read_word(&cmd_functabP[pgm_read_byte (&cmdtable_funcsP[mid])]);
    35ee:	f9 01       	movw	r30, r18
    35f0:	e0 58       	subi	r30, 0x80	; 128
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	e4 91       	lpm	r30, Z
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	ee 0f       	add	r30, r30
    35fa:	ff 1f       	adc	r31, r31
    35fc:	ef 5f       	subi	r30, 0xFF	; 255
    35fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3600:	c5 90       	lpm	r12, Z+
    3602:	d4 90       	lpm	r13, Z
                        uint8_t argv[6];

                        argf = pgm_read_byte (&cmdtable_argsP[mid]);
    3604:	f9 01       	movw	r30, r18
    3606:	e5 55       	subi	r30, 0x55	; 85
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	f4 90       	lpm	r15, Z
                        argc = 0;

                        // Get any pre arguments that need to be pushed
                        // before arguments acquired over the serial port.
                        if (argf & FUNC_PRE_DRAW_MODE)
    360c:	f3 fe       	sbrs	r15, 3
    360e:	05 c0       	rjmp	.+10     	; 0x361a <main+0x1c6>
                            argv[argc++] = drawing_mode;
    3610:	80 91 03 03 	lds	r24, 0x0303
    3614:	89 83       	std	Y+1, r24	; 0x01
    3616:	91 e0       	ldi	r25, 0x01	; 1
    3618:	01 c0       	rjmp	.+2      	; 0x361c <main+0x1c8>
#define argf lo                         /* Re-use the variable */
                        void *func = pgm_read_word(&cmd_functabP[pgm_read_byte (&cmdtable_funcsP[mid])]);
                        uint8_t argv[6];

                        argf = pgm_read_byte (&cmdtable_argsP[mid]);
                        argc = 0;
    361a:	90 e0       	ldi	r25, 0x00	; 0
                        // before arguments acquired over the serial port.
                        if (argf & FUNC_PRE_DRAW_MODE)
                            argv[argc++] = drawing_mode;

                        // Get the arguments from serial. */
                        while (argc < (argf & FUNC_ARGC_MASK))
    361c:	ff 2d       	mov	r31, r15
    361e:	f7 70       	andi	r31, 0x07	; 7
    3620:	ef 2e       	mov	r14, r31
    3622:	9e 15       	cp	r25, r14
    3624:	94 f4       	brge	.+36     	; 0x364a <main+0x1f6>
    3626:	bb 24       	eor	r11, r11
    3628:	b3 94       	inc	r11
    362a:	b9 0e       	add	r11, r25
                            argv[argc++] = serial_getc ();
    362c:	9f 83       	std	Y+7, r25	; 0x07
    362e:	0e 94 01 14 	call	0x2802	; 0x2802 <serial_getc>
    3632:	9f 81       	ldd	r25, Y+7	; 0x07
    3634:	a1 e0       	ldi	r26, 0x01	; 1
    3636:	b0 e0       	ldi	r27, 0x00	; 0
    3638:	ac 0f       	add	r26, r28
    363a:	bd 1f       	adc	r27, r29
    363c:	a9 0f       	add	r26, r25
    363e:	b1 1d       	adc	r27, r1
    3640:	97 fd       	sbrc	r25, 7
    3642:	ba 95       	dec	r27
    3644:	8c 93       	st	X, r24
    3646:	9b 2d       	mov	r25, r11
    3648:	ec cf       	rjmp	.-40     	; 0x3622 <main+0x1ce>
    364a:	89 2f       	mov	r24, r25

                        // Set any default arguments
                        if (argf & FUNC_DRAW_ZERO)
    364c:	f5 fe       	sbrs	r15, 5
    364e:	0a c0       	rjmp	.+20     	; 0x3664 <main+0x210>
                            argv[argc++] = 0;
    3650:	9f 5f       	subi	r25, 0xFF	; 255
    3652:	a1 e0       	ldi	r26, 0x01	; 1
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	ac 0f       	add	r26, r28
    3658:	bd 1f       	adc	r27, r29
    365a:	a8 0f       	add	r26, r24
    365c:	b1 1d       	adc	r27, r1
    365e:	87 fd       	sbrc	r24, 7
    3660:	ba 95       	dec	r27
    3662:	1c 92       	st	X, r1
                        if (argf & FUNC_FILL_CMD)
    3664:	f7 fe       	sbrs	r15, 7
    3666:	0a c0       	rjmp	.+20     	; 0x367c <main+0x228>
                            argv[argc++] = cc;
    3668:	a1 e0       	ldi	r26, 0x01	; 1
    366a:	b0 e0       	ldi	r27, 0x00	; 0
    366c:	ac 0f       	add	r26, r28
    366e:	bd 1f       	adc	r27, r29
    3670:	a9 0f       	add	r26, r25
    3672:	b1 1d       	adc	r27, r1
    3674:	97 fd       	sbrc	r25, 7
    3676:	ba 95       	dec	r27
    3678:	0c 93       	st	X, r16
    367a:	9f 5f       	subi	r25, 0xFF	; 255
                        if (argf & FUNC_DRAW_MODE)
    367c:	f6 fe       	sbrs	r15, 6
    367e:	0c c0       	rjmp	.+24     	; 0x3698 <main+0x244>
                            argv[argc++] = drawing_mode;
    3680:	a1 e0       	ldi	r26, 0x01	; 1
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	ac 0f       	add	r26, r28
    3686:	bd 1f       	adc	r27, r29
    3688:	a9 0f       	add	r26, r25
    368a:	b1 1d       	adc	r27, r1
    368c:	97 fd       	sbrc	r25, 7
    368e:	ba 95       	dec	r27
    3690:	80 91 03 03 	lds	r24, 0x0303
    3694:	8c 93       	st	X, r24
    3696:	9f 5f       	subi	r25, 0xFF	; 255
                        // Unfortunately there is no way that I know of in
                        // 'C' to manually buld a stack frame. I would have
                        // to drop down to assembler to do this a bit more
                        // efficiently and it is not that critical to devote
                        // my time to sorting this out.
                        if (argc <= 3)
    3698:	94 30       	cpi	r25, 0x04	; 4
    369a:	14 f5       	brge	.+68     	; 0x36e0 <main+0x28c>
                        {
                            // 3 or less arguments.
                            if (argc <= 1)
    369c:	92 30       	cpi	r25, 0x02	; 2
    369e:	4c f4       	brge	.+18     	; 0x36b2 <main+0x25e>
                            {
                                // Zero or 1 argument.
                                if (argc == 0)
    36a0:	91 11       	cpse	r25, r1
    36a2:	03 c0       	rjmp	.+6      	; 0x36aa <main+0x256>
                                    ((vfunc_t) func)();
    36a4:	f6 01       	movw	r30, r12
    36a6:	09 95       	icall
    36a8:	49 cf       	rjmp	.-366    	; 0x353c <main+0xe8>
                                else
                                    ((vfunc_i_t) func)(argv[0]);
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	f6 01       	movw	r30, r12
    36ae:	09 95       	icall
    36b0:	45 cf       	rjmp	.-374    	; 0x353c <main+0xe8>
                            {
                                // 2 or 3 arguments. Noted a special case of
                                // arguments if we have a FUNC_DRAW_NULL
                                // which is a special pointer argument of
                                // NULL
                                if (argc == 2)
    36b2:	92 30       	cpi	r25, 0x02	; 2
    36b4:	29 f4       	brne	.+10     	; 0x36c0 <main+0x26c>
                                    ((vfunc_ii_t) func)(argv[0], argv[1]);
    36b6:	6a 81       	ldd	r22, Y+2	; 0x02
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	f6 01       	movw	r30, r12
    36bc:	09 95       	icall
    36be:	3e cf       	rjmp	.-388    	; 0x353c <main+0xe8>
                                else
                                {
                                    // All of the NULL terminated commands are 4 bytes long.
                                    if (argf & FUNC_DRAW_NULL)
    36c0:	f4 fe       	sbrs	r15, 4
    36c2:	08 c0       	rjmp	.+16     	; 0x36d4 <main+0x280>
                                        ((vfunc_iiip_t) func)(argv[0], argv[1], argv[2], NULL);
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	4b 81       	ldd	r20, Y+3	; 0x03
    36ca:	6a 81       	ldd	r22, Y+2	; 0x02
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
    36ce:	f6 01       	movw	r30, r12
    36d0:	09 95       	icall
    36d2:	34 cf       	rjmp	.-408    	; 0x353c <main+0xe8>
                                    else
                                        ((vfunc_iii_t) func)(argv[0], argv[1], argv[2]);
    36d4:	4b 81       	ldd	r20, Y+3	; 0x03
    36d6:	6a 81       	ldd	r22, Y+2	; 0x02
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	f6 01       	movw	r30, r12
    36dc:	09 95       	icall
    36de:	2e cf       	rjmp	.-420    	; 0x353c <main+0xe8>
                            }
                        }
                        else
                        {
                            // 4 or more arguments
                            if (argc <= 5)
    36e0:	96 30       	cpi	r25, 0x06	; 6
    36e2:	8c f4       	brge	.+34     	; 0x3706 <main+0x2b2>
                            {
                                // 4 or 5 arguments
                                if (argc == 5)
    36e4:	95 30       	cpi	r25, 0x05	; 5
    36e6:	41 f4       	brne	.+16     	; 0x36f8 <main+0x2a4>
                                    ((vfunc_iiiii_t) func)(argv[0], argv[1], argv[2], argv[3], argv[4]);
    36e8:	0d 81       	ldd	r16, Y+5	; 0x05
    36ea:	2c 81       	ldd	r18, Y+4	; 0x04
    36ec:	4b 81       	ldd	r20, Y+3	; 0x03
    36ee:	6a 81       	ldd	r22, Y+2	; 0x02
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	f6 01       	movw	r30, r12
    36f4:	09 95       	icall
    36f6:	22 cf       	rjmp	.-444    	; 0x353c <main+0xe8>
                                else
                                    ((vfunc_iiii_t) func)(argv[0], argv[1], argv[2], argv[3]);
    36f8:	2c 81       	ldd	r18, Y+4	; 0x04
    36fa:	4b 81       	ldd	r20, Y+3	; 0x03
    36fc:	6a 81       	ldd	r22, Y+2	; 0x02
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	f6 01       	movw	r30, r12
    3702:	09 95       	icall
    3704:	1b cf       	rjmp	.-458    	; 0x353c <main+0xe8>
                            }
                            else
                            {
                                // 6 arguments.
                                ((vfunc_iiiiii_t) func)(argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);
    3706:	ee 80       	ldd	r14, Y+6	; 0x06
    3708:	0d 81       	ldd	r16, Y+5	; 0x05
    370a:	2c 81       	ldd	r18, Y+4	; 0x04
    370c:	4b 81       	ldd	r20, Y+3	; 0x03
    370e:	6a 81       	ldd	r22, Y+2	; 0x02
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	f6 01       	movw	r30, r12
    3714:	09 95       	icall
    3716:	12 cf       	rjmp	.-476    	; 0x353c <main+0xe8>
                        goto next_command;
                    }
                    else if (cc > tcmd) // Binary chop - work out which part of table to keep
                        lo = mid + 1;   // Discard top half
                    else
                        hi = mid - 1;   // Discard bottom half
    3718:	4f ef       	ldi	r20, 0xFF	; 255
    371a:	48 0f       	add	r20, r24
    371c:	59 cf       	rjmp	.-334    	; 0x35d0 <main+0x17c>

0000371e <__udivmodqi4>:
    371e:	99 1b       	sub	r25, r25
    3720:	79 e0       	ldi	r23, 0x09	; 9
    3722:	04 c0       	rjmp	.+8      	; 0x372c <__udivmodqi4_ep>

00003724 <__udivmodqi4_loop>:
    3724:	99 1f       	adc	r25, r25
    3726:	96 17       	cp	r25, r22
    3728:	08 f0       	brcs	.+2      	; 0x372c <__udivmodqi4_ep>
    372a:	96 1b       	sub	r25, r22

0000372c <__udivmodqi4_ep>:
    372c:	88 1f       	adc	r24, r24
    372e:	7a 95       	dec	r23
    3730:	c9 f7       	brne	.-14     	; 0x3724 <__udivmodqi4_loop>
    3732:	80 95       	com	r24
    3734:	08 95       	ret

00003736 <__divmodhi4>:
    3736:	97 fb       	bst	r25, 7
    3738:	07 2e       	mov	r0, r23
    373a:	16 f4       	brtc	.+4      	; 0x3740 <__divmodhi4+0xa>
    373c:	00 94       	com	r0
    373e:	07 d0       	rcall	.+14     	; 0x374e <__divmodhi4_neg1>
    3740:	77 fd       	sbrc	r23, 7
    3742:	09 d0       	rcall	.+18     	; 0x3756 <__divmodhi4_neg2>
    3744:	0e 94 af 1b 	call	0x375e	; 0x375e <__udivmodhi4>
    3748:	07 fc       	sbrc	r0, 7
    374a:	05 d0       	rcall	.+10     	; 0x3756 <__divmodhi4_neg2>
    374c:	3e f4       	brtc	.+14     	; 0x375c <__divmodhi4_exit>

0000374e <__divmodhi4_neg1>:
    374e:	90 95       	com	r25
    3750:	81 95       	neg	r24
    3752:	9f 4f       	sbci	r25, 0xFF	; 255
    3754:	08 95       	ret

00003756 <__divmodhi4_neg2>:
    3756:	70 95       	com	r23
    3758:	61 95       	neg	r22
    375a:	7f 4f       	sbci	r23, 0xFF	; 255

0000375c <__divmodhi4_exit>:
    375c:	08 95       	ret

0000375e <__udivmodhi4>:
    375e:	aa 1b       	sub	r26, r26
    3760:	bb 1b       	sub	r27, r27
    3762:	51 e1       	ldi	r21, 0x11	; 17
    3764:	07 c0       	rjmp	.+14     	; 0x3774 <__udivmodhi4_ep>

00003766 <__udivmodhi4_loop>:
    3766:	aa 1f       	adc	r26, r26
    3768:	bb 1f       	adc	r27, r27
    376a:	a6 17       	cp	r26, r22
    376c:	b7 07       	cpc	r27, r23
    376e:	10 f0       	brcs	.+4      	; 0x3774 <__udivmodhi4_ep>
    3770:	a6 1b       	sub	r26, r22
    3772:	b7 0b       	sbc	r27, r23

00003774 <__udivmodhi4_ep>:
    3774:	88 1f       	adc	r24, r24
    3776:	99 1f       	adc	r25, r25
    3778:	5a 95       	dec	r21
    377a:	a9 f7       	brne	.-22     	; 0x3766 <__udivmodhi4_loop>
    377c:	80 95       	com	r24
    377e:	90 95       	com	r25
    3780:	bc 01       	movw	r22, r24
    3782:	cd 01       	movw	r24, r26
    3784:	08 95       	ret

00003786 <memset>:
    3786:	dc 01       	movw	r26, r24
    3788:	01 c0       	rjmp	.+2      	; 0x378c <memset+0x6>
    378a:	6d 93       	st	X+, r22
    378c:	41 50       	subi	r20, 0x01	; 1
    378e:	50 40       	sbci	r21, 0x00	; 0
    3790:	e0 f7       	brcc	.-8      	; 0x378a <memset+0x4>
    3792:	08 95       	ret

00003794 <__eerd_byte_m168>:
    3794:	f9 99       	sbic	0x1f, 1	; 31
    3796:	fe cf       	rjmp	.-4      	; 0x3794 <__eerd_byte_m168>
    3798:	92 bd       	out	0x22, r25	; 34
    379a:	81 bd       	out	0x21, r24	; 33
    379c:	f8 9a       	sbi	0x1f, 0	; 31
    379e:	99 27       	eor	r25, r25
    37a0:	80 b5       	in	r24, 0x20	; 32
    37a2:	08 95       	ret

000037a4 <__eewr_byte_m168>:
    37a4:	26 2f       	mov	r18, r22

000037a6 <__eewr_r18_m168>:
    37a6:	f9 99       	sbic	0x1f, 1	; 31
    37a8:	fe cf       	rjmp	.-4      	; 0x37a6 <__eewr_r18_m168>
    37aa:	1f ba       	out	0x1f, r1	; 31
    37ac:	92 bd       	out	0x22, r25	; 34
    37ae:	81 bd       	out	0x21, r24	; 33
    37b0:	20 bd       	out	0x20, r18	; 32
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	fa 9a       	sbi	0x1f, 2	; 31
    37b8:	f9 9a       	sbi	0x1f, 1	; 31
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	01 96       	adiw	r24, 0x01	; 1
    37be:	08 95       	ret

000037c0 <_exit>:
    37c0:	f8 94       	cli

000037c2 <__stop_program>:
    37c2:	ff cf       	rjmp	.-2      	; 0x37c2 <__stop_program>
